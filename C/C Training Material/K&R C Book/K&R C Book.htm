<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0151)http://64.233.167.104/search?q=cache:GjewIA8ENDMJ:www.socs.org/~duck/junk/The_C_Programming_Language_by_K%26R.pdf+binsearch+3.1+example+Kernighan&hl=en -->
<HTML><HEAD><TITLE>The C programming Language</TITLE>
<META http-equiv=Content-Type content="text/html; charset=utf-8">
<META content="MSHTML 6.00.2800.1106" name=GENERATOR></HEAD>
<BODY vLink=blue link=blue bgColor=#ffffff>
<HR>

<STYLE type=text/css>.goohl0 {
	COLOR: black; BACKGROUND-COLOR: #ffff66
}
.goohl1 {
	COLOR: black; BACKGROUND-COLOR: #a0ffff
}
.goohl2 {
	COLOR: black; BACKGROUND-COLOR: #99ff99
}
.goohl3 {
	COLOR: black; BACKGROUND-COLOR: #ff9999
}
</STYLE>

<META 
content="htmldoc 1.8.13 Copyright 1997-2001 Easy Software Products, All Rights Reserved." 
name=Producer>
<META content=D:20010607112156+0100 name=CreationDate>
<META content="programming, C, kernighan, ritchie" name=Keywords>
<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=1><B>Page 1</B></A></FONT></TD></TR></TBODY></TABLE><FONT face=Times 
size=4><SPAN style="FONT-SIZE: 26px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 293px"><NOBR><B>The C 
programming Language</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 344px"><NOBR>By Brian W. 
<B><SPAN class=goohl3>Kernighan</SPAN></B> and Dennis M. Ritchie.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 384px"><NOBR>Published by 
Prentice−Hall in 1988</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 423px"><NOBR>ISBN 
0−13−110362−8 (paperback)</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 443px"><NOBR>ISBN 
0−13−110370−9</NOBR></DIV></SPAN></FONT><FONT face=Times size=4><SPAN 
style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 484px"><NOBR><B>Contents</B></NOBR></DIV></SPAN></FONT><FONT 
face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 531px"><NOBR><A 
href="#5">Preface</A></NOBR></DIV></SPAN></FONT><FONT 
face=Symbol size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 526px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 551px"><NOBR><A 
href="#7">Preface 
to the first edition</A></NOBR></DIV></SPAN></FONT><FONT face=Symbol 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 545px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 571px"><NOBR><A 
href="#8">Introduction</A></NOBR></DIV></SPAN></FONT><FONT 
face=Symbol size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 565px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 610px"><NOBR><A 
href="#11">Chapter 
1: A Tutorial Introduction</A></NOBR></DIV>
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 630px"><NOBR><A 
href="#11">Getting 
Started</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 630px"><NOBR>1. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 650px"><NOBR><A 
href="#13">Variables 
and Arithmetic Expressions</A></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 650px"><NOBR>2. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 670px"><NOBR><A 
href="#18">The 
for statement</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 670px"><NOBR>3. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 689px"><NOBR><A 
href="#19">Symbolic 
Constants</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 689px"><NOBR>4. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 709px"><NOBR><A 
href="#19">Character 
Input and Output</A></NOBR></DIV>
<DIV style="LEFT: 270px; POSITION: absolute; TOP: 729px"><NOBR><A 
href="#20">File 
Copying</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 254px; POSITION: absolute; TOP: 729px"><NOBR>1. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 270px; POSITION: absolute; TOP: 749px"><NOBR><A 
href="#21">Character 
Counting</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 254px; POSITION: absolute; TOP: 749px"><NOBR>2. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 270px; POSITION: absolute; TOP: 769px"><NOBR><A 
href="#23">Line 
Counting</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 254px; POSITION: absolute; TOP: 769px"><NOBR>3. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 270px; POSITION: absolute; TOP: 788px"><NOBR><A 
href="#23">Word 
Counting</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 254px; POSITION: absolute; TOP: 788px"><NOBR>4. </NOBR></DIV>
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 709px"><NOBR>5. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 808px"><NOBR><A 
href="#25">Arrays</A></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 808px"><NOBR>6. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 828px"><NOBR><A 
href="#27">Functions</A></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 828px"><NOBR>7. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 848px"><NOBR><A 
href="#30">Arguments 
− Call by Value</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 848px"><NOBR>8. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 868px"><NOBR><A 
href="#30">Character 
Arrays</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 868px"><NOBR>9. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 887px"><NOBR><A 
href="#33">External 
Variables and Scope</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 191px; POSITION: absolute; TOP: 887px"><NOBR>10. </NOBR></DIV>
<DIV style="LEFT: 146px; POSITION: absolute; TOP: 610px"><NOBR>1. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 927px"><NOBR><A 
href="#36">Chapter 
2: Types, Operators and Expressions</A></NOBR></DIV>
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 947px"><NOBR><A 
href="#36">Variable 
Names</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 947px"><NOBR>1. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 967px"><NOBR><A 
href="#36">Data 
Types and Sizes</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 967px"><NOBR>2. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 986px"><NOBR><A 
href="#37">Constants</A></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 986px"><NOBR>3. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 1006px"><NOBR><A 
href="#40">Declarations</A></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 1006px"><NOBR>4. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 1026px"><NOBR><A 
href="#41">Arithmetic 
Operators</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 1026px"><NOBR>5. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 1046px"><NOBR><A 
href="#41">Relational 
and Logical Operators</A></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 1046px"><NOBR>6. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 1066px"><NOBR><A 
href="#42">Type 
Conversions</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 1066px"><NOBR>7. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 1085px"><NOBR><A 
href="#45">Increment 
and Decrement Operators</A></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 1085px"><NOBR>8. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 1105px"><NOBR><A 
href="#47">Bitwise 
Operators</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 1105px"><NOBR>9. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 1125px"><NOBR><A 
href="#48">Assignment 
Operators and Expressions</A></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 191px; POSITION: absolute; TOP: 1125px"><NOBR>10. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 1145px"><NOBR><A 
href="#50">Conditional 
Expressions</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 191px; POSITION: absolute; TOP: 1145px"><NOBR>11. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 1165px"><NOBR><A 
href="#51">Precedence 
and Order of Evaluation</A></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 191px; POSITION: absolute; TOP: 1165px"><NOBR>12. 
</NOBR></DIV>
<DIV style="LEFT: 146px; POSITION: absolute; TOP: 927px"><NOBR>2. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 1204px"><NOBR><A 
href="#53">Chapter 
3: Control Flow</A></NOBR></DIV>
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 1224px"><NOBR><A 
href="#53">Statements 
and Blocks</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 1224px"><NOBR>1. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 1244px"><NOBR><A 
href="#53">If−Else</A></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 1244px"><NOBR>2. </NOBR></DIV>
<DIV style="LEFT: 146px; POSITION: absolute; TOP: 1204px"><NOBR>3. </NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 217px"><NOBR>The C programming 
Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 1297px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV 
style="LEFT: 829px; POSITION: absolute; TOP: 1297px"><NOBR>1</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 1363px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=2><B>Page 2</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT face=Times 
color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 1455px"><NOBR><A 
href="#54">Else−If</A></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 1455px"><NOBR>3. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 1475px"><NOBR><A 
href="#56">Switch</A></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 1475px"><NOBR>4. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 1495px"><NOBR><A 
href="#57">Loops 
− While and For</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 1495px"><NOBR>5. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 1515px"><NOBR><A 
href="#60">Loops 
− Do−While</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 1515px"><NOBR>6. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 1534px"><NOBR><A 
href="#61">Break 
and Continue</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 1534px"><NOBR>7. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 1554px"><NOBR><A 
href="#61">Goto 
and labels</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 1554px"><NOBR>8. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 1594px"><NOBR><A 
href="#64">Chapter 
4: Functions and Program Structure</A></NOBR></DIV>
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 1614px"><NOBR><A 
href="#64">Basics 
of Functions</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 1614px"><NOBR>1. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 1633px"><NOBR><A 
href="#67">Functions 
Returning Non−integers</A></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 1633px"><NOBR>2. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 1653px"><NOBR><A 
href="#69">External 
Variables</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 1653px"><NOBR>3. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 1673px"><NOBR><A 
href="#74">Scope 
Rules</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 1673px"><NOBR>4. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 1693px"><NOBR><A 
href="#76">Header 
Files</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 1693px"><NOBR>5. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 1713px"><NOBR><A 
href="#78">Static 
Variables</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 1713px"><NOBR>6. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 1732px"><NOBR><A 
href="#78">Register 
Variables</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 1732px"><NOBR>7. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 1752px"><NOBR><A 
href="#79">Block 
Structure</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 1752px"><NOBR>8. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 1772px"><NOBR><A 
href="#79">Initialization</A></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 1772px"><NOBR>9. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 1792px"><NOBR><A 
href="#81">Recursion</A></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 191px; POSITION: absolute; TOP: 1792px"><NOBR>10. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 1812px"><NOBR><A 
href="#82">The 
C Preprocessor</A></NOBR></DIV>
<DIV style="LEFT: 270px; POSITION: absolute; TOP: 1831px"><NOBR><A 
href="#82">File 
Inclusion</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 254px; POSITION: absolute; TOP: 1831px"><NOBR>1. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 270px; POSITION: absolute; TOP: 1851px"><NOBR><A 
href="#83">Macro 
Substitution</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 254px; POSITION: absolute; TOP: 1851px"><NOBR>2. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 270px; POSITION: absolute; TOP: 1871px"><NOBR><A 
href="#85">Conditional 
Inclusion</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 254px; POSITION: absolute; TOP: 1871px"><NOBR>3. </NOBR></DIV>
<DIV style="LEFT: 191px; POSITION: absolute; TOP: 1812px"><NOBR>11. 
</NOBR></DIV>
<DIV style="LEFT: 146px; POSITION: absolute; TOP: 1594px"><NOBR>4. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 1911px"><NOBR><A 
href="#86">Chapter 
5: Pointers and Arrays</A></NOBR></DIV>
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 1930px"><NOBR><A 
href="#86">Pointers 
and Addresses</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 1930px"><NOBR>1. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 1950px"><NOBR><A 
href="#88">Pointers 
and Function Arguments</A></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 1950px"><NOBR>2. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 1970px"><NOBR><A 
href="#90">Pointers 
and Arrays</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 1970px"><NOBR>3. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 1990px"><NOBR><A 
href="#93">Address 
Arithmetic</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 1990px"><NOBR>4. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 2010px"><NOBR><A 
href="#96">Character 
Pointers and Functions</A></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 2010px"><NOBR>5. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 2029px"><NOBR><A 
href="#99">Pointer 
Arrays; Pointers to Pointers</A></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 2029px"><NOBR>6. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 2049px"><NOBR><A 
href="#102">Multi−dimensional 
Arrays</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 2049px"><NOBR>7. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 2069px"><NOBR><A 
href="#104">Initialization 
of Pointer Arrays</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 2069px"><NOBR>8. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 2089px"><NOBR><A 
href="#104">Pointers 
vs. Multi−dimensional Arrays</A></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 2089px"><NOBR>9. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 2109px"><NOBR><A 
href="#105">Command−line 
Arguments</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 191px; POSITION: absolute; TOP: 2109px"><NOBR>10. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 2128px"><NOBR><A 
href="#109">Pointers 
to Functions</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 191px; POSITION: absolute; TOP: 2128px"><NOBR>11. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 2148px"><NOBR><A 
href="#112">Complicated 
Declarations</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 191px; POSITION: absolute; TOP: 2148px"><NOBR>12. 
</NOBR></DIV>
<DIV style="LEFT: 146px; POSITION: absolute; TOP: 1911px"><NOBR>5. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 2188px"><NOBR><A 
href="#117">Chapter 
6: Structures</A></NOBR></DIV>
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 2208px"><NOBR><A 
href="#117">Basics 
of Structures</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 2208px"><NOBR>1. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 2227px"><NOBR><A 
href="#119">Structures 
and Functions</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 2227px"><NOBR>2. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 2247px"><NOBR><A 
href="#122">Arrays 
of Structures</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 2247px"><NOBR>3. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 2267px"><NOBR><A 
href="#125">Pointers 
to Structures</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 2267px"><NOBR>4. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 2287px"><NOBR><A 
href="#127">Self−referential 
Structures</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 2287px"><NOBR>5. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 2307px"><NOBR><A 
href="#131">Table 
Lookup</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 2307px"><NOBR>6. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 2326px"><NOBR><A 
href="#133">Typedef</A></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 2326px"><NOBR>7. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 2346px"><NOBR><A 
href="#134">Unions</A></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 2346px"><NOBR>8. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 2366px"><NOBR><A 
href="#136">Bit−fields</A></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 2366px"><NOBR>9. </NOBR></DIV>
<DIV style="LEFT: 146px; POSITION: absolute; TOP: 2188px"><NOBR>6. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 2406px"><NOBR><A 
href="#138">Chapter 
7: Input and Output</A></NOBR></DIV>
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 2425px"><NOBR><A 
href="#138">Standard 
Input and Output</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 2425px"><NOBR>1. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 2445px"><NOBR><A 
href="#140">Formatted 
Output − printf</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 2445px"><NOBR>2. </NOBR></DIV>
<DIV style="LEFT: 146px; POSITION: absolute; TOP: 2406px"><NOBR>7. </NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 1405px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 2485px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV 
style="LEFT: 829px; POSITION: absolute; TOP: 2485px"><NOBR>2</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 2551px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=3><B>Page 3</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT face=Times 
color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 2643px"><NOBR><A 
href="#141">Variable−length 
Argument Lists</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 2643px"><NOBR>3. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 2663px"><NOBR><A 
href="#142">Formatted 
Input − Scanf</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 2663px"><NOBR>4. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 2683px"><NOBR><A 
href="#144">File 
Access</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 2683px"><NOBR>5. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 2703px"><NOBR><A 
href="#147">Error 
Handling − Stderr and Exit</A></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 2703px"><NOBR>6. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 2722px"><NOBR><A 
href="#148">Line 
Input and Output</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 2722px"><NOBR>7. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 2742px"><NOBR><A 
href="#149">Miscellaneous 
Functions</A></NOBR></DIV>
<DIV style="LEFT: 270px; POSITION: absolute; TOP: 2762px"><NOBR><A 
href="#150">String 
Operations</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 254px; POSITION: absolute; TOP: 2762px"><NOBR>1. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 270px; POSITION: absolute; TOP: 2782px"><NOBR><A 
href="#150">Character 
Class Testing and Conversion</A></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 254px; POSITION: absolute; TOP: 2782px"><NOBR>2. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 270px; POSITION: absolute; TOP: 2802px"><NOBR><A 
href="#150">Ungetc</A></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 254px; POSITION: absolute; TOP: 2802px"><NOBR>3. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 270px; POSITION: absolute; TOP: 2821px"><NOBR><A 
href="#151">Command 
Execution</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 254px; POSITION: absolute; TOP: 2821px"><NOBR>4. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 270px; POSITION: absolute; TOP: 2841px"><NOBR><A 
href="#151">Storage 
Management</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 254px; POSITION: absolute; TOP: 2841px"><NOBR>5. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 270px; POSITION: absolute; TOP: 2861px"><NOBR><A 
href="#152">Mathematical 
Functions</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 254px; POSITION: absolute; TOP: 2861px"><NOBR>6. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 270px; POSITION: absolute; TOP: 2881px"><NOBR><A 
href="#152">Random 
Number generation</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 254px; POSITION: absolute; TOP: 2881px"><NOBR>7. </NOBR></DIV>
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 2742px"><NOBR>8. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 2920px"><NOBR><A 
href="#153">Chapter 
8: The UNIX System Interface</A></NOBR></DIV>
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 2940px"><NOBR><A 
href="#153">File 
Descriptors</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 2940px"><NOBR>1. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 2960px"><NOBR><A 
href="#154">Low 
Level I/O − Read and Write</A></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 2960px"><NOBR>2. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 2980px"><NOBR><A 
href="#155">Open, 
Creat, Close, Unlink</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 2980px"><NOBR>3. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 3000px"><NOBR><A 
href="#157">Random 
Access − Lseek</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 3000px"><NOBR>4. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 3019px"><NOBR><A 
href="#158"><B><SPAN 
class=goohl2>Example</SPAN></B> − An implementation of Fopen and 
Getc</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 3019px"><NOBR>5. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 3039px"><NOBR><A 
href="#161"><B><SPAN 
class=goohl2>Example</SPAN></B> − Listing 
Directories</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 3039px"><NOBR>6. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 3059px"><NOBR><A 
href="#165"><B><SPAN 
class=goohl2>Example</SPAN></B> − A Storage 
Allocator</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 3059px"><NOBR>7. </NOBR></DIV>
<DIV style="LEFT: 146px; POSITION: absolute; TOP: 2920px"><NOBR>8. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 3099px"><NOBR><A 
href="#170">Appendix 
A: Reference Manual</A></NOBR></DIV>
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 3118px"><NOBR><A 
href="#170">Introduction</A></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 3118px"><NOBR>1. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 3138px"><NOBR><A 
href="#170">Lexical 
Conventions</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 3138px"><NOBR>2. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 3158px"><NOBR><A 
href="#173">Syntax 
Notation</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 3158px"><NOBR>3. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 3178px"><NOBR><A 
href="#173">Meaning 
of Identifiers</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 3178px"><NOBR>4. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 3198px"><NOBR><A 
href="#175">Objects 
and Lvalues</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 3198px"><NOBR>5. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 3217px"><NOBR><A 
href="#175">Conversions</A></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 3217px"><NOBR>6. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 3237px"><NOBR><A 
href="#178">Expressions</A></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 3237px"><NOBR>7. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 3257px"><NOBR><A 
href="#188">Declarations</A></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 3257px"><NOBR>8. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 3277px"><NOBR><A 
href="#201">Statements</A></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 3277px"><NOBR>9. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 3297px"><NOBR><A 
href="#204">External 
Declarations</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 191px; POSITION: absolute; TOP: 3297px"><NOBR>10. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 3316px"><NOBR><A 
href="#206">Scope 
and Linkage</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 191px; POSITION: absolute; TOP: 3316px"><NOBR>11. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 3336px"><NOBR><A 
href="#207">Preprocessor</A></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 191px; POSITION: absolute; TOP: 3336px"><NOBR>12. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 3356px"><NOBR><A 
href="#213">Grammar</A></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 191px; POSITION: absolute; TOP: 3356px"><NOBR>13. 
</NOBR></DIV></SPAN></FONT><FONT face=Symbol size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 3093px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 3396px"><NOBR><A 
href="#221">Appendix 
B: Standard Library</A></NOBR></DIV>
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 3415px"><NOBR><A 
href="#221">Input 
and Output: &lt;stdio.h&gt;</A></NOBR></DIV>
<DIV style="LEFT: 270px; POSITION: absolute; TOP: 3435px"><NOBR><A 
href="#221">File 
Operations</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 254px; POSITION: absolute; TOP: 3435px"><NOBR>1. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 270px; POSITION: absolute; TOP: 3455px"><NOBR><A 
href="#223">Formatted 
Output</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 254px; POSITION: absolute; TOP: 3455px"><NOBR>2. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 270px; POSITION: absolute; TOP: 3475px"><NOBR><A 
href="#224">Formatted 
Input</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 254px; POSITION: absolute; TOP: 3475px"><NOBR>3. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 270px; POSITION: absolute; TOP: 3495px"><NOBR><A 
href="#225">Character 
Input and Output Functions</A></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 254px; POSITION: absolute; TOP: 3495px"><NOBR>4. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 270px; POSITION: absolute; TOP: 3514px"><NOBR><A 
href="#226">Direct 
Input and Output Functions</A></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 254px; POSITION: absolute; TOP: 3514px"><NOBR>5. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 270px; POSITION: absolute; TOP: 3534px"><NOBR><A 
href="#226">File 
Positioning Functions</A></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 254px; POSITION: absolute; TOP: 3534px"><NOBR>6. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 270px; POSITION: absolute; TOP: 3554px"><NOBR><A 
href="#226">Error 
Functions</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 254px; POSITION: absolute; TOP: 3554px"><NOBR>7. </NOBR></DIV>
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 3415px"><NOBR>1. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 3574px"><NOBR><A 
href="#227">Character 
Class Tests: &lt;ctype.h&gt;</A></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 3574px"><NOBR>2. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 3594px"><NOBR><A 
href="#227">String 
Functions: &lt;string.h&gt;</A></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 3594px"><NOBR>3. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 3613px"><NOBR><A 
href="#229">Mathematical 
Functions: &lt;math.h&gt;</A></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 3613px"><NOBR>4. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 3633px"><NOBR><A 
href="#230">Utility 
Functions: &lt;stdlib.h&gt;</A></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 3633px"><NOBR>5. 
</NOBR></DIV></SPAN></FONT><FONT face=Symbol size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 3390px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 2593px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 3673px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV 
style="LEFT: 829px; POSITION: absolute; TOP: 3673px"><NOBR>3</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 3739px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=4><B>Page 4</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT face=Times 
color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 3831px"><NOBR><A 
href="#232">Diagnostics: 
&lt;assert.h&gt;</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 3831px"><NOBR>6. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 3851px"><NOBR><A 
href="#232">Variable 
Argument Lists: &lt;stdarg.h&gt;</A></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 3851px"><NOBR>7. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 3871px"><NOBR><A 
href="#233">Non−local 
Jumps: &lt;setjmp.h&gt;</A></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 3871px"><NOBR>8. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 3891px"><NOBR><A 
href="#233">Signals: 
&lt;signal.h&gt;</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 200px; POSITION: absolute; TOP: 3891px"><NOBR>9. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 3910px"><NOBR><A 
href="#234">Date 
and Time Functions: &lt;time.h&gt;</A></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 191px; POSITION: absolute; TOP: 3910px"><NOBR>10. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 3930px"><NOBR><A 
href="#236">Implementation−defined 
Limits: &lt;limits.h&gt; and &lt;float.h&gt;</A></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 191px; POSITION: absolute; TOP: 3930px"><NOBR>11. 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 3970px"><NOBR><A 
href="#238">Appendix 
C: Summary of Changes</A></NOBR></DIV></SPAN></FONT><FONT face=Symbol 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 3964px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 3781px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 4861px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV 
style="LEFT: 829px; POSITION: absolute; TOP: 4861px"><NOBR>4</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 4927px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=5><B>Page 5</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT face=Times 
color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 348px; POSITION: absolute; TOP: 5042px"><NOBR><A 
href="#1">Index 
</A><FONT face=Times color=#000000>−− </FONT><A 
href="#7">Preface 
to the first edition</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=4><SPAN 
style="FONT-SIZE: 26px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 5087px"><NOBR><B>Preface</B></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 5139px"><NOBR>The computing 
world has undergone a revolution since the publication of <I>The C Programming 
Language </I>in</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 5158px"><NOBR>1978. Big 
computers are much bigger, and personal computers have capabilities that rival 
mainframes of a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 5178px"><NOBR>decade ago. 
During this time, C has changed too, although only modestly, and it has spread 
far beyond its</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 5198px"><NOBR>origins as the 
language of the UNIX operating system.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 5238px"><NOBR>The growing 
popularity of C, the changes in the language over the years, and the creation of 
compilers by</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 5257px"><NOBR>groups not 
involved in its design, combined to demonstrate a need for a more precise and 
more contemporary</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 5277px"><NOBR>definition of 
the language than the first edition of this book provided. In 1983, the American 
National</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 5297px"><NOBR>Standards 
Institute (ANSI) established a committee whose goal was to produce ``an 
unambiguous and</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 5317px"><NOBR>machine−independent 
definition of the language C'', while still retaining its spirit. The result is 
the ANSI</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 5337px"><NOBR>standard for 
C.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 5376px"><NOBR>The standard 
formalizes constructions that were hinted but not described in the first 
edition, particularly</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 5396px"><NOBR>structure 
assignment and enumerations. It provides a new form of function declaration that 
permits</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 5416px"><NOBR>cross−checking 
of definition with use. It specifies a standard library, with an extensive set 
of functions for</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 5436px"><NOBR>performing input 
and output, memory management, string manipulation, and similar tasks. It makes 
precise</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 5455px"><NOBR>the behavior of 
features that were not spelled out in the original definition, and at the same 
time states</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 5475px"><NOBR>explicitly which 
aspects of the language remain machine−dependent.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 5515px"><NOBR>This Second 
Edition of <I>The C Programming Language </I>describes C as defined by the ANSI 
standard.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 5535px"><NOBR>Although we have 
noted the places where the language has evolved, we have chosen to write 
exclusively in</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 5554px"><NOBR>the new form. 
For the most part, this makes no significant difference; the most visible change 
is the new form</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 5574px"><NOBR>of function 
declaration and definition. Modern compilers already support most features of 
the standard.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 5614px"><NOBR>We have tried to 
retain the brevity of the first edition. C is not a big language, and it is not 
well served by a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 5634px"><NOBR>big book. We 
have improved the exposition of critical features, such as pointers, that are 
central to C</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 5653px"><NOBR>programming. We 
have refined the original examples, and have added new examples in several 
chapters. For</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 5673px"><NOBR>instance, the 
treatment of complicated declarations is augmented by programs that convert 
declarations into</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 5693px"><NOBR>words and vice 
versa. As before, all examples have been tested directly from the text, which is 
in</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 5713px"><NOBR>machine−readable 
form.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 5752px"><NOBR>Appendix A, the 
reference manual, is not the standard, but our attempt to convey the essentials 
of the standard</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 5772px"><NOBR>in a smaller 
space. It is meant for easy comprehension by programmers, but not as a 
definition for compiler</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 5792px"><NOBR>writers −− that 
role properly belongs to the standard itself. Appendix B is a summary of the 
facilities of the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 5812px"><NOBR>standard 
library. It too is meant for reference by programmers, not implementers. 
Appendix C is a concise</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 5832px"><NOBR>summary of the 
changes from the original version.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 5871px"><NOBR>As we said in 
the preface to the first edition, C ``wears well as one's experience with it 
grows''. With a decade</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 5891px"><NOBR>more experience, 
we still feel that way. We hope that this book will help you learn C and use it 
well.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 5931px"><NOBR>We are deeply 
indebted to friends who helped us to produce this second edition. Jon Bently, 
Doug Gwyn,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 5950px"><NOBR>Doug McIlroy, 
Peter Nelson, and Rob Pike gave us perceptive comments on almost every page of 
draft</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 5970px"><NOBR>manuscripts. We 
are grateful for careful reading by Al Aho, Dennis Allison, Joe Campbell, G.R. 
Emlin, Karen</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 5990px"><NOBR>Fortgang, Allen 
Holub, Andrew Hume, Dave Kristol, John Linderman, Dave Prosser, Gene Spafford, 
and</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 6010px"><NOBR>Chris van Wyk. 
We also received helpful suggestions from Bill Cheswick, Mark <B><SPAN 
class=goohl3>Kernighan</SPAN></B>, Andy Koenig,</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 4969px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 6049px"><NOBR>Preface</NOBR></DIV>
<DIV 
style="LEFT: 829px; POSITION: absolute; TOP: 6049px"><NOBR>5</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 6115px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=6><B>Page 6</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 6207px"><NOBR>Robin Lake, Tom 
London, Jim Reeds, Clovis Tondo, and Peter Weinberger. Dave Prosser answered 
many</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 6227px"><NOBR>detailed 
questions about the ANSI standard. We used Bjarne Stroustrup's C++ translator 
extensively for local</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 6247px"><NOBR>testing of our 
programs, and Dave Kristol provided us with an ANSI C compiler for final 
testing. Rich</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 6267px"><NOBR>Drechsler helped 
greatly with typesetting.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 6306px"><NOBR>Our sincere 
thanks to all.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 6346px"><NOBR>Brian W. 
<B><SPAN class=goohl3>Kernighan</SPAN></B></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 6366px"><NOBR>Dennis M. 
Ritchie</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 348px; POSITION: absolute; TOP: 6408px"><NOBR><A 
href="#1">Index 
</A><FONT face=Times color=#000000>−− </FONT><A 
href="#7">Preface 
to the first edition</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 6157px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 7237px"><NOBR>Preface</NOBR></DIV>
<DIV 
style="LEFT: 829px; POSITION: absolute; TOP: 7237px"><NOBR>6</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 7303px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=7><B>Page 7</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT face=Times 
color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 307px; POSITION: absolute; TOP: 7418px"><NOBR><A 
href="#5">Back 
to the Preface </A><FONT face=Times color=#000000>−− </FONT><A 
href="#1">Index 
</A><FONT face=Times color=#000000>−− </FONT><A 
href="#8">Introduction</A></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=4><SPAN style="FONT-SIZE: 26px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 7463px"><NOBR><B>Preface to 
the first edition</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 7515px"><NOBR>C is a 
general−purpose programming language with features economy of expression, modern 
flow control and</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 7534px"><NOBR>data structures, 
and a rich set of operators. C is not a ``very high level'' language, nor a 
``big'' one, and is not</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 7554px"><NOBR>specialized to 
any particular area of application. But its absence of restrictions and its 
generality make it more</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 7574px"><NOBR>convenient and 
effective for many tasks than supposedly more powerful languages.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 7614px"><NOBR>C was originally 
designed for and implemented on the UNIX operating system on the DEC PDP−11, 
by</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 7633px"><NOBR>Dennis Ritchie. 
The operating system, the C compiler, and essentially all UNIX applications 
programs</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 7653px"><NOBR>(including all 
of the software used to prepare this book) are written in C. Production 
compilers also exist for</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 7673px"><NOBR>several other 
machines, including the IBM System/370, the Honeywell 6000, and the Interdata 
8/32. C is not</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 7693px"><NOBR>tied to any 
particular hardware or system, however, and it is easy to write programs that 
will run without</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 7713px"><NOBR>change on any 
machine that supports C.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 7752px"><NOBR>This book is 
meant to help the reader learn how to program in C. It contains a tutorial 
introduction to get new</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 7772px"><NOBR>users started as 
soon as possible, separate chapters on each major feature, and a reference 
manual. Most of the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 7792px"><NOBR>treatment is 
based on reading, writing and revising examples, rather than on mere statements 
of rules. For the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 7812px"><NOBR>most part, the 
examples are complete, real programs rather than isolated fragments. All 
examples have been</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 7831px"><NOBR>tested directly 
from the text, which is in machine−readable form. Besides showing how to make 
effective use</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 7851px"><NOBR>of the language, 
we have also tried where possible to illustrate useful algorithms and principles 
of good style</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 7871px"><NOBR>and sound 
design.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 7911px"><NOBR>The book is not 
an introductory programming manual; it assumes some familiarity with basic 
programming</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 7930px"><NOBR>concepts like 
variables, assignment statements, loops, and functions. Nonetheless, a novice 
programmer</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 7950px"><NOBR>should be able 
to read along and pick up the language, although access to more knowledgeable 
colleague will</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 7970px"><NOBR>help.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 8010px"><NOBR>In our 
experience, C has proven to be a pleasant, expressive and versatile language for 
a wide variety of</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 8029px"><NOBR>programs. It is 
easy to learn, and it wears well as on's experience with it grows. We hope that 
this book will</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 8049px"><NOBR>help you to use 
it well.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 8089px"><NOBR>The thoughtful 
criticisms and suggestions of many friends and colleagues have added greatly to 
this book and</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 8109px"><NOBR>to our pleasure 
in writing it. In particular, Mike Bianchi, Jim Blue, Stu Feldman, Doug McIlroy 
Bill Roome,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 8128px"><NOBR>Bob Rosin and 
Larry Rosler all read multiple volumes with care. We are also indebted to Al 
Aho, Steve</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 8148px"><NOBR>Bourne, Dan 
Dvorak, Chuck Haley, Debbie Haley, Marion Harris, Rick Holt, Steve Johnson, John 
Mashey,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 8168px"><NOBR>Bob Mitze, Ralph 
Muha, Peter Nelson, Elliot Pinson, Bill Plauger, Jerry Spivack, Ken Thompson, 
and Peter</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 8188px"><NOBR>Weinberger for 
helpful comments at various stages, and to Mile Lesk and Joe Ossanna for 
invaluable</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 8208px"><NOBR>assistance with 
typesetting.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 8247px"><NOBR>Brian W. 
<B><SPAN class=goohl3>Kernighan</SPAN></B></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 8267px"><NOBR>Dennis M. 
Ritchie</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 307px; POSITION: absolute; TOP: 8310px"><NOBR><A 
href="#5">Back 
to the Preface </A><FONT face=Times color=#000000>−− </FONT><A 
href="#1">Index 
</A><FONT face=Times color=#000000>−− </FONT><A 
href="#8">Introduction</A></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 7345px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 8425px"><NOBR>Preface to the 
first edition</NOBR></DIV>
<DIV 
style="LEFT: 829px; POSITION: absolute; TOP: 8425px"><NOBR>7</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 8491px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=8><B>Page 8</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT face=Times 
color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 251px; POSITION: absolute; TOP: 8606px"><NOBR><A 
href="#7">Back 
to the Preface to the First Edition </A><FONT face=Times color=#000000>−− 
</FONT><A 
href="#1">Index 
</A><FONT face=Times color=#000000>−− </FONT><A 
href="#11">Chapter 
1</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=4><SPAN 
style="FONT-SIZE: 26px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 8651px"><NOBR><B>Introduction</B></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 8703px"><NOBR>C is a 
general−purpose programming language. It has been closely associated with the 
UNIX operating</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 8722px"><NOBR>system where it 
was developed, since both the system and most of the programs that run on it are 
written in C.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 8742px"><NOBR>The language, 
however, is not tied to any one operating system or machine; and although it has 
been called a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 8762px"><NOBR>``system 
programming language'' because it is useful for writing compilers and operating 
systems, it has been</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 8782px"><NOBR>used equally 
well to write major programs in many different domains.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 8821px"><NOBR>Many of the 
important ideas of C stem from the language BCPL, developed by Martin Richards. 
The</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 8841px"><NOBR>influence of 
BCPL on C proceeded indirectly through the language B, which was written by Ken 
Thompson</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 8861px"><NOBR>in 1970 for the 
first UNIX system on the DEC PDP−7.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 8901px"><NOBR>BCPL and B are 
``typeless'' languages. By contrast, C provides a variety of data types. The 
fundamental types</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 8920px"><NOBR>are characters, 
and integers and floating point numbers of several sizes. In addition, there is 
a hierarchy of</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 8940px"><NOBR>derived data 
types created with pointers, arrays, structures and unions. Expressions are 
formed from operators</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 8960px"><NOBR>and operands; 
any expression, including an assignment or a function call, can be a statement. 
Pointers provide</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 8980px"><NOBR>for 
machine−independent address arithmetic.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 9019px"><NOBR>C provides the 
fundamental control−flow constructions required for well−structured programs: 
statement</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 9039px"><NOBR>grouping, 
decision making (<FONT face=Courier>if−else</FONT>), selecting one of a set of 
possible values (<FONT face=Courier>switch</FONT>), looping with 
the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 9059px"><NOBR>termination test 
at the top (<FONT face=Courier>while, for</FONT>) or at the bottom (<FONT 
face=Courier>do</FONT>), and early loop exit (<FONT 
face=Courier>break</FONT>).</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 9099px"><NOBR>Functions may 
return values of basic types, structures, unions, or pointers. Any function may 
be called</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 9118px"><NOBR>recursively. 
Local variables are typically ``automatic'', or created anew with each 
invocation. Function</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 9138px"><NOBR>definitions may 
not be nested but variables may be declared in a block−structured fashion. The 
functions of a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 9158px"><NOBR>C program may 
exist in separate source files that are compiled separately. Variables may be 
internal to a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 9178px"><NOBR>function, 
external but known only within a single source file, or visible to the entire 
program.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 9217px"><NOBR>A preprocessing 
step performs macro substitution on program text, inclusion of other source 
files, and</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 9237px"><NOBR>conditional 
compilation.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 9277px"><NOBR>C is a 
relatively ``low−level'' language. This characterization is not pejorative; it 
simply means that C deals</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 9297px"><NOBR>with the same 
sort of objects that most computers do, namely characters, numbers, and 
addresses. These may</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 9316px"><NOBR>be combined and 
moved about with the arithmetic and logical operators implemented by real 
machines.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 9356px"><NOBR>C provides no 
operations to deal directly with composite objects such as character strings, 
sets, lists or arrays.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 9376px"><NOBR>There are no 
operations that manipulate an entire array or string, although structures may be 
copied as a unit.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 9396px"><NOBR>The language 
does not define any storage allocation facility other than static definition and 
the stack discipline</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 9415px"><NOBR>provided by the 
local variables of functions; there is no heap or garbage collection. Finally, C 
itself provides</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 9435px"><NOBR>no input/output 
facilities; there are no READ or WRITE statements, and no built−in file access 
methods. All</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 9455px"><NOBR>of these 
higher−level mechanisms must be provided by explicitly called functions. Most C 
implementations</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 9475px"><NOBR>have included a 
reasonably standard collection of such functions.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 9514px"><NOBR>Similarly, C 
offers only straightforward, single−thread control flow: tests, loops, grouping, 
and subprograms,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 9534px"><NOBR>but not 
multiprogramming, parallel operations, synchronization, or 
coroutines.</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 8533px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 9613px"><NOBR>Introduction</NOBR></DIV>
<DIV 
style="LEFT: 829px; POSITION: absolute; TOP: 9613px"><NOBR>8</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 9679px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=9><B>Page 9</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 9771px"><NOBR>Although the 
absence of some of these features may seem like a grave deficiency, (``You mean 
I have to call</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 9791px"><NOBR>a function to 
compare two character strings?''), keeping the language down to modest size has 
real benefits.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 9811px"><NOBR>Since C is 
relatively small, it can be described in small space, and learned quickly. A 
programmer can</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 9831px"><NOBR>reasonably 
expect to know and understand and indeed regularly use the entire 
language.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 9870px"><NOBR>For many years, 
the definition of C was the reference manual in the first edition of <I>The C 
Programming</I></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 9890px"><NOBR><I>Language</I>. 
In 1983, the American National Standards Institute (ANSI) established a 
committee to provide a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 9910px"><NOBR>modern, 
comprehensive definition of C. The resulting definition, the ANSI standard, or 
``ANSI C'', was</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 9930px"><NOBR>completed in 
late 1988. Most of the features of the standard are already supported by modern 
compilers.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 9969px"><NOBR>The standard is 
based on the original reference manual. The language is relatively little 
changed; one of the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 9989px"><NOBR>goals of the 
standard was to make sure that most existing programs would remain valid, or, 
failing that, that</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 10009px"><NOBR>compilers could 
produce warnings of new behavior.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 10048px"><NOBR>For most 
programmers, the most important change is the new syntax for declaring and 
defining functions. A</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 10068px"><NOBR>function 
declaration can now include a description of the arguments of the function; the 
definition syntax</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 10088px"><NOBR>changes to 
match. This extra information makes it much easier for compilers to detect 
errors caused by</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 10108px"><NOBR>mismatched 
arguments; in our experience, it is a very useful addition to the 
language.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 10147px"><NOBR>There are other 
small−scale language changes. Structure assignment and enumerations, which had 
been</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 10167px"><NOBR>widely 
available, are now officially part of the language. Floating−point computations 
may now be done in</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 10187px"><NOBR>single 
precision. The properties of arithmetic, especially for unsigned types, are 
clarified. The preprocessor is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 10207px"><NOBR>more elaborate. 
Most of these changes will have only minor effects on most 
programmers.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 10246px"><NOBR>A second 
significant contribution of the standard is the definition of a library to 
accompany C. It specifies</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 10266px"><NOBR>functions for 
accessing the operating system (for instance, to read and write files), 
formatted input and output,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 10286px"><NOBR>memory 
allocation, string manipulation, and the like. A collection of standard headers 
provides uniform</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 10306px"><NOBR>access to 
declarations of functions in data types. Programs that use this library to 
interact with a host system</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 10326px"><NOBR>are assured of 
compatible behavior. Most of the library is closely modeled on the ``standard 
I/O library'' of the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 10345px"><NOBR>UNIX system. 
This library was described in the first edition, and has been widely used on 
other systems as</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 10365px"><NOBR>well. Again, 
most programmers will not see much change.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 10405px"><NOBR>Because the 
data types and control structures provided by C are supported directly by most 
computers, the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 10425px"><NOBR>run−time 
library required to implement self−contained programs is tiny. The standard 
library functions are</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 10444px"><NOBR>only called 
explicitly, so they can be avoided if they are not needed. Most can be written 
in C, and except for</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 10464px"><NOBR>the operating 
system details they conceal, are themselves portable.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 10504px"><NOBR>Although C 
matches the capabilities of many computers, it is independent of any particular 
machine</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 10524px"><NOBR>architecture. 
With a little care it is easy to write portable programs, that is, programs that 
can be run without</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 10543px"><NOBR>change on a 
variety of hardware. The standard makes portability issues explicit, and 
prescribes a set of</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 10563px"><NOBR>constants that 
characterize the machine on which the program is run.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 10603px"><NOBR>C is not a 
strongly−typed language, but as it has evolved, its type−checking has been 
strengthened. The</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 10623px"><NOBR>original 
definition of C frowned on, but permitted, the interchange of pointers and 
integers; this has long since</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 10642px"><NOBR>been 
eliminated, and the standard now requires the proper declarations and explicit 
conversions that had</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 10662px"><NOBR>already been 
enforced by good compilers. The new function declarations are another step in 
this direction.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 10682px"><NOBR>Compilers will 
warn of most type errors, and there is no automatic conversion of incompatible 
data types.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 10702px"><NOBR>Nevertheless, C 
retains the basic philosophy that programmers know what they are doing; it only 
requires that</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 10722px"><NOBR>they state 
their intentions explicitly.</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 9721px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 10801px"><NOBR>Introduction</NOBR></DIV>
<DIV 
style="LEFT: 829px; POSITION: absolute; TOP: 10801px"><NOBR>9</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 10867px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=10><B>Page 10</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 10959px"><NOBR>C, like any 
other language, has its blemishes. Some of the operators have the wrong 
precedence; some parts of</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 10979px"><NOBR>the syntax 
could be better. Nonetheless, C has proven to ben an extremely effective and 
expressive language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 10999px"><NOBR>for a wide 
variety of programming applications.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 11038px"><NOBR>The book is 
organized as follows. Chapter 1 is a tutorial on the central part of C. The 
purpose is to get the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 11058px"><NOBR>reader started 
as quickly as possible, since we believe strongly that the way to learn a new 
language is to write</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 11078px"><NOBR>programs in it. 
The tutorial does assume a working knowledge of the basic elements of 
programming; there is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 11098px"><NOBR>no explanation 
of computers, of compilation, nor of the meaning of an expression like <FONT 
face=Courier>n=n+1</FONT>. Although we</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 11118px"><NOBR>have tried 
where possible to show useful programming techniques, the book is not intended 
to be a reference</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 11137px"><NOBR>work on data 
structures and algorithms; when forced to make a choice, we have concentrated on 
the language.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 11177px"><NOBR>Chapters 2 
through 6 discuss various aspects of C in more detail, and rather more formally, 
than does Chapter</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 11197px"><NOBR>1, although the 
emphasis is still on examples of complete programs, rather than isolated 
fragments. Chapter 2</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 11217px"><NOBR>deals with the 
basic data types, operators and expressions. Chapter 3 threats control flow: 
<FONT face=Courier>if−else</FONT>,</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 11237px"><NOBR>switch<FONT 
face=Times>, </FONT>while<FONT face=Times>, </FONT>for<FONT face=Times>, etc. 
Chapter 4 covers functions and program structure − external variables, 
scope</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 11256px"><NOBR>rules, multiple 
source files, and so on − and also touches on the preprocessor. Chapter 5 
discusses pointers and</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 11276px"><NOBR>address 
arithmetic. Chapter 6 covers structures and unions.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 11316px"><NOBR>Chapter 7 
describes the standard library, which provides a common interface to the 
operating system. This</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 11335px"><NOBR>library is 
defined by the ANSI standard and is meant to be supported on all machines that 
support C, so</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 11355px"><NOBR>programs that 
use it for input, output, and other operating system access can be moved from 
one system to</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 11375px"><NOBR>another without 
change.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 11415px"><NOBR>Chapter 8 
describes an interface between C programs and the UNIX operating system, 
concentrating on</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 11434px"><NOBR>input/output, 
the file system, and storage allocation. Although some of this chapter is 
specific to UNIX</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 11454px"><NOBR>systems, 
programmers who use other systems should still find useful material here, 
including some insight</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 11474px"><NOBR>into how one 
version of the standard library is implemented, and suggestions on 
portability.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 11514px"><NOBR>Appendix A 
contains a language reference manual. The official statement of the syntax and 
semantics of the C</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 11533px"><NOBR>language is the 
ANSI standard itself. That document, however, is intended foremost for compiler 
writers. The</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 11553px"><NOBR>reference 
manual here conveys the definition of the language more concisely and without 
the same legalistic</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 11573px"><NOBR>style. Appendix 
B is a summary of the standard library, again for users rather than 
implementers. Appendix C</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 11593px"><NOBR>is a short 
summary of changes from the original language. In cases of doubt, however, the 
standard and one's</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 11613px"><NOBR>own compiler 
remain the final authorities on the language.</NOBR></DIV></SPAN></FONT><FONT 
face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 251px; POSITION: absolute; TOP: 11655px"><NOBR><A 
href="#7">Back 
to the Preface to the First Edition </A><FONT face=Times color=#000000>−− 
</FONT><A 
href="#1">Index 
</A><FONT face=Times color=#000000>−− </FONT><A 
href="#11">Chapter 
1</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 10909px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 11989px"><NOBR>Introduction</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 11989px"><NOBR>10</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 12055px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=11><B>Page 11</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 311px; POSITION: absolute; TOP: 12170px"><NOBR><A 
href="#8">Back 
to Introduction </A><FONT face=Times color=#000000>−− </FONT><A 
href="#1">Index 
</A><FONT face=Times color=#000000>−− </FONT><A 
href="#36">Chapter 
2</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=4><SPAN 
style="FONT-SIZE: 26px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 12215px"><NOBR><B>Chapter 1 − 
A Tutorial Introduction</B></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 12267px"><NOBR>Let us begin 
with a quick introduction in C. Our aim is to show the essential elements of the 
language in real</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 12286px"><NOBR>programs, but 
without getting bogged down in details, rules, and exceptions. At this point, we 
are not trying to</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 12306px"><NOBR>be complete or 
even precise (save that the examples are meant to be correct). We want to get 
you as quickly as</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 12326px"><NOBR>possible to the 
point where you can write useful programs, and to do that we have to concentrate 
on the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 12346px"><NOBR>basics: 
variables and constants, arithmetic, control flow, functions, and the rudiments 
of input and output. We</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 12366px"><NOBR>are 
intentionally leaving out of this chapter features of C that are important for 
writing bigger programs. These</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 12385px"><NOBR>include 
pointers, structures, most of C's rich set of operators, several control−flow 
statements, and the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 12405px"><NOBR>standard 
library.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 12445px"><NOBR>This approach 
and its drawbacks. Most notable is that the complete story on any particular 
feature is not found</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 12465px"><NOBR>here, and the 
tutorial, by being brief, may also be misleading. And because the examples do 
not use the full</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 12484px"><NOBR>power of C, 
they are not as concise and elegant as they might be. We have tried to minimize 
these effects, but</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 12504px"><NOBR>be warned. 
Another drawback is that later chapters will necessarily repeat some of this 
chapter. We hope that</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 12524px"><NOBR>the repetition 
will help you more than it annoys.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 12564px"><NOBR>In any case, 
experienced programmers should be able to extrapolate from the material in this 
chapter to their</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 12583px"><NOBR>own programming 
needs. Beginners should supplement it by writing small, similar programs of 
their own.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 12603px"><NOBR>Both groups can 
use it as a framework on which to hang the more detailed descriptions that begin 
in <FONT face=Times color=#0000ff><A 
href="#36">Chapter</A></FONT></NOBR></DIV></SPAN></FONT><FONT 
face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 12623px"><NOBR><A 
href="#36">2</A><FONT 
face=Times color=#000000>.</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=4><SPAN style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 12664px"><NOBR><B>1.1 Getting 
Started</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 12711px"><NOBR>The only way to 
learn a new programming language is by writing programs in it. The first program 
to write is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 12731px"><NOBR>the same for 
all languages:</NOBR></DIV>
<DIV style="LEFT: 118px; POSITION: absolute; TOP: 12751px"><NOBR><I>Print the 
words</I></NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 118px; POSITION: absolute; TOP: 12771px"><NOBR>hello, 
world</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 12810px"><NOBR>This is a big 
hurdle; to leap over it you have to be able to create the program text 
somewhere, compile it</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 12830px"><NOBR>successfully, 
load it, run it, and find out where your output went. With these mechanical 
details mastered,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 12850px"><NOBR>everything else 
is comparatively easy.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 12889px"><NOBR>In C, the 
program to print ``<FONT face=Courier>hello, world</FONT>'' 
is</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 12929px"><NOBR>#include 
&lt;stdio.h&gt;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 12962px"><NOBR>main()</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 12978px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 149px; POSITION: absolute; TOP: 12995px"><NOBR>printf("hello, 
world\n");</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 13011px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 13048px"><NOBR>Just how to run 
this program depends on the system you are using. As a specific <B><SPAN 
class=goohl2>example</SPAN></B>, on the UNIX</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 13067px"><NOBR>operating 
system you must create the program in a file whose name ends in ``<FONT 
face=Courier>.c</FONT>'', such as <FONT face=Courier>hello.c</FONT>, 
then</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 13087px"><NOBR>compile it with 
the command</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 13127px"><NOBR>cc 
hello.c</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 12097px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 13177px"><NOBR>Chapter 1 − A 
Tutorial Introduction</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 13177px"><NOBR>11</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 13243px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=12><B>Page 12</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 13335px"><NOBR>If you haven't 
botched anything, such as omitting a character or misspelling something, the 
compilation will</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 13355px"><NOBR>proceed 
silently, and make an executable file called <FONT face=Courier>a.out</FONT>. If 
you run <FONT face=Courier>a.out </FONT>by typing the 
command</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 13394px"><NOBR>a.out</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 13431px"><NOBR>it will 
print</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 13470px"><NOBR>hello, 
world</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 13507px"><NOBR>On other 
systems, the rules will be different; check with a local expert.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 13546px"><NOBR>Now, for some 
explanations about the program itself. A C program, whatever its size, consists 
of <I>functions</I></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 13566px"><NOBR>and 
<I>variables</I>. A function contains <I>statements </I>that specify the 
computing operations to be done, and variables</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 13586px"><NOBR>store values 
used during the computation. C functions are like the subroutines and functions 
in Fortran or the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 13606px"><NOBR>procedures and 
functions of Pascal. Our <B><SPAN class=goohl2>example</SPAN></B> is a function 
named <FONT face=Courier>main</FONT>. Normally you are at liberty 
to</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 13626px"><NOBR>give functions 
whatever names you like, but ``<FONT face=Courier>main</FONT>'' is special − 
your program begins executing at the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 13645px"><NOBR>beginning of 
main. This means that every program must have a <FONT face=Courier>main 
</FONT>somewhere.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 13686px"><NOBR>main <FONT 
face=Times>will usually call other functions to help perform its job, some that 
you wrote, and others from libraries</FONT></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 13705px"><NOBR>that are 
provided for you. The first line of the program,</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 13744px"><NOBR>#include 
&lt;stdio.h&gt;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 13781px"><NOBR>tells the 
compiler to include information about the standard input/output library; the 
line appears at the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 13801px"><NOBR>beginning of 
many C source files. The standard library is described in <A 
href="#138"></A><FONT 
face=Times color=#0000ff><A 
href="#138">Chapter 
7 </A></FONT>and <FONT face=Times color=#0000ff><A 
href="#221">Appendix 
B</A></FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 13840px"><NOBR>One method of 
communicating data between functions is for the calling function to provide a 
list of values,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 13860px"><NOBR>called 
<I>arguments</I>, to the function it calls. The parentheses after the function 
name surround the argument list.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 13880px"><NOBR>In this 
<B><SPAN class=goohl2>example</SPAN></B>, <FONT face=Courier>main </FONT>is 
defined to be a function that expects no arguments, which is indicated by the 
empty</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 13900px"><NOBR>list <FONT 
face=Courier>( )</FONT>.</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 13942px"><NOBR>#include 
&lt;stdio.h&gt; <I>include information about standard library</I></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 13958px"><NOBR>main() 
<I>define a function called main</I></NOBR></DIV>
<DIV style="LEFT: 479px; POSITION: absolute; TOP: 13975px"><NOBR><I>that 
received no argument values</I></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 13991px"><NOBR>{ <I>statements 
of main are enclosed in braces</I></NOBR></DIV>
<DIV style="LEFT: 141px; POSITION: absolute; TOP: 14008px"><NOBR>printf("hello, 
world\n"); <I>main calls library function printf</I></NOBR></DIV>
<DIV style="LEFT: 446px; POSITION: absolute; TOP: 14024px"><NOBR><I>to print 
this sequence of characters</I></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 14041px"><NOBR>} \n 
<I>represents the newline character</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 405px; POSITION: absolute; TOP: 14077px"><NOBR><I><B>The first 
C program</B></I></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 14120px"><NOBR>The statements 
of a function are enclosed in braces <FONT face=Courier>{ }</FONT>. The function 
<FONT face=Courier>main </FONT>contains only one 
statement,</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 14159px"><NOBR>printf("hello, 
world\n");</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 14196px"><NOBR>A function is 
called by naming it, followed by a parenthesized list of arguments, so this 
calls the function</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 14217px"><NOBR>printf <FONT 
face=Times>with the argument </FONT>"hello, world\n"<FONT face=Times>. 
</FONT>printf <FONT face=Times>is a library function that prints output, in 
this</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 14236px"><NOBR>case the string 
of characters between the quotes.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 14275px"><NOBR>A sequence of 
characters in double quotes, like <FONT face=Courier>"hello, world\n"</FONT>, is 
called a <I>character string </I>or <I>string</I></NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 14295px"><NOBR><I>constant</I>. For 
the moment our only use of character strings will be as arguments for <FONT 
face=Courier>printf </FONT>and other</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 14315px"><NOBR>functions.</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 13285px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 14365px"><NOBR>Chapter 1 − A 
Tutorial Introduction</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 14365px"><NOBR>12</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 14431px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=13><B>Page 13</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 14523px"><NOBR>The sequence 
<FONT face=Courier>\n </FONT>in the string is C notation for the <I>newline 
character</I>, which when printed advances the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 14543px"><NOBR>output to the 
left margin on the next line. If you leave out the <FONT face=Courier>\n 
</FONT>(a worthwhile experiment), you will find that</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 14563px"><NOBR>there is no 
line advance after the output is printed. You must use <FONT face=Courier>\n 
</FONT>to include a newline character in the</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 14584px"><NOBR>printf <FONT 
face=Times>argument; if you try something 
like</FONT></NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 14622px"><NOBR>printf("hello, 
world</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 14639px"><NOBR>");</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 14675px"><NOBR>the C compiler 
will produce an error message.</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 14716px"><NOBR>printf <FONT 
face=Times>never supplies a newline character automatically, so several calls 
may be used to build up an output</FONT></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 14734px"><NOBR>line in stages. 
Our first program could just as well have been 
written</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 14774px"><NOBR>#include 
&lt;stdio.h&gt;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 14807px"><NOBR>main()</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 14823px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 149px; POSITION: absolute; TOP: 14840px"><NOBR>printf("hello, 
");</NOBR></DIV>
<DIV 
style="LEFT: 149px; POSITION: absolute; TOP: 14856px"><NOBR>printf("world");</NOBR></DIV>
<DIV 
style="LEFT: 149px; POSITION: absolute; TOP: 14873px"><NOBR>printf("\n");</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 14889px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 14926px"><NOBR>to produce 
identical output.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 14965px"><NOBR>Notice that 
<FONT face=Courier>\n </FONT>represents only a single character. An <I>escape 
sequence </I>like <FONT face=Courier>\n </FONT>provides a general 
and</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 14985px"><NOBR>extensible 
mechanism for representing hard−to−type or invisible characters. Among the 
others that C provides</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 15005px"><NOBR>are <FONT 
face=Courier>\t </FONT>for tab, <FONT face=Courier>\b </FONT>for backspace, 
<FONT face=Courier>\" </FONT>for the double quote and <FONT face=Courier>\\ 
</FONT>for the backslash itself. There is a complete</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 15025px"><NOBR>list in <A 
href="#37"></A><FONT 
face=Times color=#0000ff><A 
href="#37">Section 
2.3</A></FONT><A 
href="#37"></A>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 15064px"><NOBR><I><B>Exercise 
1−1. </B></I>Run the ``<FONT face=Courier>hello, world</FONT>'' program on your 
system. Experiment with leaving out parts of the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 15084px"><NOBR>program, to see 
what error messages you get.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 15124px"><NOBR><I><B>Exercise 
1−2. </B></I>Experiment to find out what happens when <FONT 
face=Courier>prints</FONT>'s argument string contains <I>\c</I>, where <I>c 
</I>is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 15144px"><NOBR>some character 
not listed above.</NOBR></DIV></SPAN></FONT><FONT face=Times size=4><SPAN 
style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 15185px"><NOBR><B>1.2 
Variables and Arithmetic Expressions</B></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 15232px"><NOBR>The next 
program uses the formula </NOBR></DIV></SPAN></FONT><FONT face=Times 
size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 344px; POSITION: absolute; TOP: 15227px"><NOBR>o</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 349px; POSITION: absolute; TOP: 15232px"><NOBR>C=(5/9)(</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 407px; POSITION: absolute; TOP: 15227px"><NOBR>o</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 413px; POSITION: absolute; TOP: 15232px"><NOBR>F−32) to print 
the following table of Fahrenheit temperatures</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 15251px"><NOBR>and their 
centigrade or Celsius equivalents:</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 15291px"><NOBR>1 
−17</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 15307px"><NOBR>20 
−6</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 15324px"><NOBR>40 
4</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 15340px"><NOBR>60 
15</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 15357px"><NOBR>80 
26</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 15373px"><NOBR>100 
37</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 15390px"><NOBR>120 
48</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 15406px"><NOBR>140 
60</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 15423px"><NOBR>160 
71</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 15439px"><NOBR>180 
82</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 15456px"><NOBR>200 
93</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 15472px"><NOBR>220 
104</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 15489px"><NOBR>240 
115</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 15505px"><NOBR>260 
126</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 14473px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 15553px"><NOBR>1.2 Variables 
and Arithmetic Expressions</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 15553px"><NOBR>13</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 15619px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=14><B>Page 14</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 15711px"><NOBR>280 
137</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 15728px"><NOBR>300 
148</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 15764px"><NOBR>The program 
itself still consists of the definition of a single function named <FONT 
face=Courier>main</FONT>. It is longer than the one</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 15784px"><NOBR>that printed 
``<FONT face=Courier>hello, world</FONT>'', but not complicated. It introduces 
several new ideas, including comments,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 15804px"><NOBR>declarations, 
variables, arithmetic expressions, loops , and formatted 
output.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 15843px"><NOBR>#include 
&lt;stdio.h&gt;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 15876px"><NOBR>/* print 
Fahrenheit−Celsius table</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 15893px"><NOBR>for fahr = 0, 
20, ..., 300 */</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 15909px"><NOBR>main()</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 15926px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 149px; POSITION: absolute; TOP: 15942px"><NOBR>int fahr, 
celsius;</NOBR></DIV>
<DIV style="LEFT: 149px; POSITION: absolute; TOP: 15959px"><NOBR>int lower, 
upper, step;</NOBR></DIV>
<DIV style="LEFT: 149px; POSITION: absolute; TOP: 15992px"><NOBR>lower = 0; /* 
lower limit of temperature scale */</NOBR></DIV>
<DIV style="LEFT: 149px; POSITION: absolute; TOP: 16008px"><NOBR>upper = 300; /* 
upper limit */</NOBR></DIV>
<DIV style="LEFT: 149px; POSITION: absolute; TOP: 16025px"><NOBR>step = 20; /* 
step size */</NOBR></DIV>
<DIV style="LEFT: 149px; POSITION: absolute; TOP: 16058px"><NOBR>fahr = 
lower;</NOBR></DIV>
<DIV style="LEFT: 149px; POSITION: absolute; TOP: 16074px"><NOBR>while (fahr 
&lt;= upper) {</NOBR></DIV>
<DIV style="LEFT: 183px; POSITION: absolute; TOP: 16091px"><NOBR>celsius = 5 * 
(fahr−32) / 9;</NOBR></DIV>
<DIV 
style="LEFT: 183px; POSITION: absolute; TOP: 16107px"><NOBR>printf("%d\t%d\n", 
fahr, celsius);</NOBR></DIV>
<DIV style="LEFT: 183px; POSITION: absolute; TOP: 16124px"><NOBR>fahr = fahr + 
step;</NOBR></DIV>
<DIV style="LEFT: 149px; POSITION: absolute; TOP: 16140px"><NOBR>}</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 16157px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 16193px"><NOBR>The two 
lines</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 125px; POSITION: absolute; TOP: 16232px"><NOBR>/* print 
Fahrenheit−Celsius table</NOBR></DIV>
<DIV style="LEFT: 158px; POSITION: absolute; TOP: 16249px"><NOBR>for fahr = 0, 
20, ..., 300 */</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 16285px"><NOBR>are a 
<I>comment</I>, which in this case explains briefly what the program does. Any 
characters between <FONT face=Courier>/* </FONT>and <FONT 
face=Courier>*/</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 16305px"><NOBR>are ignored by 
the compiler; they may be used freely to make a program easier to understand. 
Comments may</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 16325px"><NOBR>appear anywhere 
where a blank, tab or newline can.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 16365px"><NOBR>In C, all 
variables must be declared before they are used, usually at the beginning of the 
function before any</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 16384px"><NOBR>executable 
statements. A <I>declaration </I>announces the properties of variables; it 
consists of a name and a list of</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 16404px"><NOBR>variables, such 
as</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 141px; POSITION: absolute; TOP: 16444px"><NOBR>int fahr, 
celsius;</NOBR></DIV>
<DIV style="LEFT: 141px; POSITION: absolute; TOP: 16460px"><NOBR>int lower, 
upper, step;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 16497px"><NOBR>The type <FONT 
face=Courier>int </FONT>means that the variables listed are integers; by 
contrast with <FONT face=Courier>float</FONT>, which means floating</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 16516px"><NOBR>point, i.e., 
numbers that may have a fractional part. The range of both <FONT 
face=Courier>int </FONT>and <FONT face=Courier>float </FONT>depends on 
the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 16536px"><NOBR>machine you are 
using; 16−bits <FONT face=Courier>int</FONT>s, which lie between −32768 and 
+32767, are common, as are 32−bit</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 16557px"><NOBR>int<FONT 
face=Times>s. A </FONT>float <FONT face=Times>number is typically a 32−bit 
quantity, with at least six significant digits and 
magnitude</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 16576px"><NOBR>generally 
between about 10</NOBR></DIV></SPAN></FONT><FONT face=Times size=2><SPAN 
style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 290px; POSITION: absolute; TOP: 16572px"><NOBR>−38</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 312px; POSITION: absolute; TOP: 16576px"><NOBR>and 
10</NOBR></DIV></SPAN></FONT><FONT face=Times size=2><SPAN 
style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 356px; POSITION: absolute; TOP: 16572px"><NOBR>38</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 368px; POSITION: absolute; TOP: 16576px"><NOBR>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 16615px"><NOBR>C provides 
several other data types besides <FONT face=Courier>int </FONT>and <FONT 
face=Courier>float</FONT>, including:</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 329px; POSITION: absolute; TOP: 16658px"><NOBR>char</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 399px; POSITION: absolute; TOP: 16657px"><NOBR>character − a 
single byte</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 329px; POSITION: absolute; TOP: 16684px"><NOBR>short</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 399px; POSITION: absolute; TOP: 16683px"><NOBR>short 
integer</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 15661px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 16741px"><NOBR>1.2 Variables 
and Arithmetic Expressions</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 16741px"><NOBR>14</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 16807px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=15><B>Page 15</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 329px; POSITION: absolute; TOP: 16902px"><NOBR>long</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 399px; POSITION: absolute; TOP: 16901px"><NOBR>long 
integer</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 329px; POSITION: absolute; TOP: 16929px"><NOBR>double <FONT 
face=Times>double−precision floating point 
</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 16952px"><NOBR>The size of 
these objects is also machine−dependent. There are also <I>arrays</I>, 
<I>structures </I>and <I>unions </I>of these</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 16972px"><NOBR>basic types, 
<I>pointers </I>to them, and <I>functions </I>that return them, all of which we 
will meet in due course.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 17011px"><NOBR>Computation in 
the temperature conversion program begins with the <I>assignment 
statements</I></NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 141px; POSITION: absolute; TOP: 17051px"><NOBR>lower = 
0;</NOBR></DIV>
<DIV style="LEFT: 141px; POSITION: absolute; TOP: 17067px"><NOBR>upper = 
300;</NOBR></DIV>
<DIV style="LEFT: 141px; POSITION: absolute; TOP: 17084px"><NOBR>step = 
20;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 17120px"><NOBR>which set the 
variables to their initial values. Individual statements are terminated by 
semicolons.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 17160px"><NOBR>Each line of 
the table is computed the same way, so we use a loop that repeats once per 
output line; this is the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 17179px"><NOBR>purpose of the 
<FONT face=Courier>while </FONT>loop</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 141px; POSITION: absolute; TOP: 17219px"><NOBR>while (fahr 
&lt;= upper) {</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 17235px"><NOBR>...</NOBR></DIV>
<DIV 
style="LEFT: 141px; POSITION: absolute; TOP: 17252px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 17288px"><NOBR>The <FONT 
face=Courier>while </FONT>loop operates as follows: The condition in parentheses 
is tested. If it is true (<FONT face=Courier>fahr </FONT>is less than 
or</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 17308px"><NOBR>equal to <FONT 
face=Courier>upper</FONT>), the body of the loop (the three statements enclosed 
in braces) is executed. Then the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 17328px"><NOBR>condition is 
re−tested, and if true, the body is executed again. When the test becomes false 
(<FONT face=Courier>fahr </FONT>exceeds</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 17349px"><NOBR>upper<FONT 
face=Times>) the loop ends, and execution continues at the statement that 
follows the loop. There are no further</FONT></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 17368px"><NOBR>statements in 
this program, so it terminates.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 17407px"><NOBR>The body of a 
<FONT face=Courier>while </FONT>can be one or more statements enclosed in 
braces, as in the temperature converter, or a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 17427px"><NOBR>single 
statement without braces, as in</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 17466px"><NOBR>while (i &lt; 
j)</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 17483px"><NOBR>i = 2 * 
i;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 17519px"><NOBR>In either case, 
we will always indent the statements controlled by the <FONT face=Courier>while 
</FONT>by one tab stop (which we</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 17539px"><NOBR>have shown as 
four spaces) so you can see at a glance which statements are inside the loop. 
The indentation</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 17559px"><NOBR>emphasizes the 
logical structure of the program. Although C compilers do not care about how a 
program</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 17579px"><NOBR>looks, proper 
indentation and spacing are critical in making programs easy for people to read. 
We recommend</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 17599px"><NOBR>writing only 
one statement per line, and using blanks around operators to clarify grouping. 
The position of</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 17618px"><NOBR>braces is less 
important, although people hold passionate beliefs. We have chosen one of 
several popular</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 17638px"><NOBR>styles. Pick a 
style that suits you, then use it consistently.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 17678px"><NOBR>Most of the 
work gets done in the body of the loop. The Celsius temperature is computed and 
assigned to the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 17698px"><NOBR>variable <FONT 
face=Courier>celsius </FONT>by the statement</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 174px; POSITION: absolute; TOP: 17737px"><NOBR>celsius = 5 * 
(fahr−32) / 9;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 17773px"><NOBR>The reason for 
multiplying by 5 and dividing by 9 instead of just multiplying by <FONT 
face=Courier>5/9 </FONT>is that in C, as in many</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 17793px"><NOBR>other 
languages, integer division <I>truncates</I>: any fractional part is discarded. 
Since <FONT face=Courier>5 </FONT>and <FONT face=Courier>9 </FONT>are integers. 
<FONT face=Courier>5/9</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 17813px"><NOBR>would be 
truncated to zero and so all the Celsius temperatures would be reported as 
zero.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 17853px"><NOBR>This <B><SPAN 
class=goohl2>example</SPAN></B> also shows a bit more of how <FONT 
face=Courier>printf </FONT>works. <FONT face=Courier>printf </FONT>is a 
general−purpose output formatting</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 17872px"><NOBR>function, which 
we will describe in detail in <FONT face=Times color=#0000ff><A 
href="#138">Chapter 
7</A></FONT>. Its first argument is a string of characters to be 
printed,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 17892px"><NOBR>with each <FONT 
face=Courier>% </FONT>indicating where one of the other (second, third, ...) 
arguments is to be substituted, and in what</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 16849px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 17929px"><NOBR>1.2 Variables 
and Arithmetic Expressions</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 17929px"><NOBR>15</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 17995px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=16><B>Page 16</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 18087px"><NOBR>form it is to 
be printed. For instance, <FONT face=Courier>%d </FONT>specifies an integer 
argument, so the statement</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 174px; POSITION: absolute; TOP: 18127px"><NOBR>printf("%d\t%d\n", 
fahr, celsius);</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 18163px"><NOBR>causes the 
values of the two integers <FONT face=Courier>fahr </FONT>and <FONT 
face=Courier>celsius </FONT>to be printed, with a tab (<FONT 
face=Courier>\t</FONT>) between them.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 18203px"><NOBR>Each <FONT 
face=Courier>% </FONT>construction in the first argument of <FONT 
face=Courier>printf </FONT>is paired with the corresponding second argument, 
third</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 18223px"><NOBR>argument, etc.; 
they must match up properly by number and type, or you will get wrong 
answers.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 18262px"><NOBR>By the way, 
<FONT face=Courier>printf </FONT>is not part of the C language; there is no 
input or output defined in C itself. <FONT face=Courier>printf 
</FONT>is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 18282px"><NOBR>just a useful 
function from the standard library of functions that are normally accessible to 
C programs. The</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 18302px"><NOBR>behaviour of 
<FONT face=Courier>printf </FONT>is defined in the ANSI standard, however, so 
its properties should be the same with any</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 18322px"><NOBR>compiler and 
library that conforms to the standard.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 18361px"><NOBR>In order to 
concentrate on C itself, we don't talk much about input and output until <FONT 
face=Times color=#0000ff><A 
href="#138">chapter 
7</A></FONT><A 
href="#138"></A>. 
In particular, we</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 18381px"><NOBR>will defer 
formatted input until then. If you have to input numbers, read the discussion of 
the function <FONT face=Courier>scanf</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 18401px"><NOBR>in <FONT 
face=Times color=#0000ff><A 
href="#142">Section 
7.4</A></FONT>. <FONT face=Courier>scanf </FONT>is like <FONT 
face=Courier>printf</FONT>, except that it reads input instead of writing 
output.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 18440px"><NOBR>There are a 
couple of problems with the temperature conversion program. The simpler one is 
that the output</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 18460px"><NOBR>isn't very 
pretty because the numbers are not right−justified. That's easy to fix; if we 
augment each <FONT face=Courier>%d </FONT>in the</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 18481px"><NOBR>printf <FONT 
face=Times>statement with a width, the numbers printed will be right−justified 
in their fields. For instance, we</FONT></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 18500px"><NOBR>might 
say</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 18539px"><NOBR>printf("%3d 
%6d\n", fahr, celsius);</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 18576px"><NOBR>to print the 
first number of each line in a field three digits wide, and the second in a 
field six digits wide, like</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 18595px"><NOBR>this:</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 149px; POSITION: absolute; TOP: 18635px"><NOBR>0 
−17</NOBR></DIV>
<DIV style="LEFT: 141px; POSITION: absolute; TOP: 18651px"><NOBR>20 
−6</NOBR></DIV>
<DIV style="LEFT: 141px; POSITION: absolute; TOP: 18668px"><NOBR>40 
4</NOBR></DIV>
<DIV style="LEFT: 141px; POSITION: absolute; TOP: 18684px"><NOBR>60 
15</NOBR></DIV>
<DIV style="LEFT: 141px; POSITION: absolute; TOP: 18701px"><NOBR>80 
26</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 18717px"><NOBR>100 
37</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 18734px"><NOBR>...</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 18770px"><NOBR>The more 
serious problem is that because we have used integer arithmetic, the Celsius 
temperatures are not</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 18790px"><NOBR>very accurate; 
for instance, 0</NOBR></DIV></SPAN></FONT><FONT face=Times size=2><SPAN 
style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 299px; POSITION: absolute; TOP: 18786px"><NOBR>o</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 305px; POSITION: absolute; TOP: 18790px"><NOBR>F is actually 
about −17.8</NOBR></DIV></SPAN></FONT><FONT face=Times size=2><SPAN 
style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 469px; POSITION: absolute; TOP: 18786px"><NOBR>o</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 474px; POSITION: absolute; TOP: 18790px"><NOBR>C, not −17. To 
get more accurate answers, we should</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 18810px"><NOBR>use 
floating−point arithmetic instead of integer. This requires some changes in the 
program. Here is the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 18830px"><NOBR>second 
version:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 18869px"><NOBR>#include 
&lt;stdio.h&gt;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 18902px"><NOBR>/* print 
Fahrenheit−Celsius table</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 18919px"><NOBR>for fahr = 0, 
20, ..., 300; floating−point version */</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 18935px"><NOBR>main()</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 18952px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 149px; POSITION: absolute; TOP: 18968px"><NOBR>float fahr, 
celsius;</NOBR></DIV>
<DIV style="LEFT: 149px; POSITION: absolute; TOP: 18985px"><NOBR>float lower, 
upper, step;</NOBR></DIV>
<DIV style="LEFT: 149px; POSITION: absolute; TOP: 19018px"><NOBR>lower = 0; /* 
lower limit of temperatuire scale */</NOBR></DIV>
<DIV style="LEFT: 149px; POSITION: absolute; TOP: 19034px"><NOBR>upper = 300; /* 
upper limit */</NOBR></DIV>
<DIV style="LEFT: 149px; POSITION: absolute; TOP: 19051px"><NOBR>step = 20; /* 
step size */</NOBR></DIV>
<DIV style="LEFT: 149px; POSITION: absolute; TOP: 19084px"><NOBR>fahr = 
lower;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 18037px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 19117px"><NOBR>1.2 Variables 
and Arithmetic Expressions</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 19117px"><NOBR>16</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 19183px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=17><B>Page 17</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 149px; POSITION: absolute; TOP: 19275px"><NOBR>while (fahr 
&lt;= upper) {</NOBR></DIV>
<DIV style="LEFT: 183px; POSITION: absolute; TOP: 19292px"><NOBR>celsius = 
(5.0/9.0) * (fahr−32.0);</NOBR></DIV>
<DIV style="LEFT: 183px; POSITION: absolute; TOP: 19308px"><NOBR>printf("%3.0f 
%6.1f\n", fahr, celsius);</NOBR></DIV>
<DIV style="LEFT: 183px; POSITION: absolute; TOP: 19325px"><NOBR>fahr = fahr + 
step;</NOBR></DIV>
<DIV style="LEFT: 149px; POSITION: absolute; TOP: 19341px"><NOBR>}</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 19358px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 19394px"><NOBR>This is much 
the same as before, except that <FONT face=Courier>fahr </FONT>and <FONT 
face=Courier>celsius </FONT>are declared to be <FONT face=Courier>float 
</FONT>and the formula</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 19414px"><NOBR>for conversion 
is written in a more natural way. We were unable to use <FONT face=Courier>5/9 
</FONT>in the previous version because</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 19434px"><NOBR>integer 
division would truncate it to zero. A decimal point in a constant indicates that 
it is floating point,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 19453px"><NOBR>however, so 
<FONT face=Courier>5.0/9.0 </FONT>is not truncated because it is the ratio of 
two floating−point values.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 19493px"><NOBR>If an 
arithmetic operator has integer operands, an integer operation is performed. If 
an arithmetic operator has</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 19513px"><NOBR>one 
floating−point operand and one integer operand, however, the integer will be 
converted to floating point</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 19533px"><NOBR>before the 
operation is done. If we had written <FONT face=Courier>(fahr−32)</FONT>, the 
<FONT face=Courier>32 </FONT>would be automatically converted to</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 19552px"><NOBR>floating point. 
Nevertheless, writing floating−point constants with explicit decimal points even 
when they</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 19572px"><NOBR>have integral 
values emphasizes their floating−point nature for human readers.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 19612px"><NOBR>The detailed 
rules for when integers are converted to floating point are in <FONT face=Times 
color=#0000ff><A 
href="#36">Chapter 
2</A></FONT><A 
href="#36"></A>. 
For now, notice that the</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 19632px"><NOBR>assignment</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 19671px"><NOBR>fahr = 
lower;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 19708px"><NOBR>and the 
test</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 19747px"><NOBR>while (fahr 
&lt;= upper)</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 19783px"><NOBR>also work in 
the natural way − the <FONT face=Courier>int </FONT>is converted to <FONT 
face=Courier>float </FONT>before the operation is done.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 19823px"><NOBR>The <FONT 
face=Courier>printf </FONT>conversion specification <FONT face=Courier>%3.0f 
</FONT>says that a floating−point number (here <FONT face=Courier>fahr</FONT>) 
is to be printed</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 19843px"><NOBR>at least three 
characters wide, with no decimal point and no fraction digits. <FONT 
face=Courier>%6.1f </FONT>describes another number</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 19863px"><NOBR>(<FONT 
face=Courier>celsius</FONT>) that is to be printed at least six characters wide, 
with 1 digit after the decimal point. The output</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 19882px"><NOBR>looks like 
this:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 149px; POSITION: absolute; TOP: 19922px"><NOBR>0 
−17.8</NOBR></DIV>
<DIV style="LEFT: 141px; POSITION: absolute; TOP: 19938px"><NOBR>20 
−6.7</NOBR></DIV>
<DIV style="LEFT: 141px; POSITION: absolute; TOP: 19955px"><NOBR>40 
4.4</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 19971px"><NOBR>...</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 20008px"><NOBR>Width and 
precision may be omitted from a specification: <FONT face=Courier>%6f 
</FONT>says that the number is to be at least six</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 20028px"><NOBR>characters 
wide; <FONT face=Courier>%.2f </FONT>specifies two characters after the decimal 
point, but the width is not constrained; and</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 20048px"><NOBR>%f <FONT 
face=Times>merely says to print the number as floating 
point.</FONT></NOBR></DIV>
<DIV 
style="LEFT: 218px; POSITION: absolute; TOP: 20090px"><NOBR>%6d</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 289px; POSITION: absolute; TOP: 20089px"><NOBR>print as 
decimal integer, at least 6 characters wide</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 218px; POSITION: absolute; TOP: 20116px"><NOBR>%f</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 289px; POSITION: absolute; TOP: 20115px"><NOBR>print as 
floating point</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 218px; POSITION: absolute; TOP: 20143px"><NOBR>%6f</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 289px; POSITION: absolute; TOP: 20142px"><NOBR>print as 
floating point, at least 6 characters wide</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 218px; POSITION: absolute; TOP: 20169px"><NOBR>%.2f</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 289px; POSITION: absolute; TOP: 20168px"><NOBR>print as 
floating point, 2 characters after decimal point</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 218px; POSITION: absolute; TOP: 20195px"><NOBR>%6.2f</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 289px; POSITION: absolute; TOP: 20194px"><NOBR>print as 
floating point, at least 6 wide and 2 after decimal point </NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 20218px"><NOBR>Among others, 
<FONT face=Courier>printf </FONT>also recognizes <FONT face=Courier>%o 
</FONT>for octal, <FONT face=Courier>%x </FONT>for hexadecimal, <FONT 
face=Courier>%c </FONT>for character, <FONT face=Courier>%s </FONT>for 
character</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 20238px"><NOBR>string and 
<FONT face=Courier>%% </FONT>for itself.</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 19225px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 20305px"><NOBR>1.2 Variables 
and Arithmetic Expressions</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 20305px"><NOBR>17</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 20371px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=18><B>Page 18</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 20463px"><NOBR><I><B>Exercise 
1−3. </B></I>Modify the temperature conversion program to print a heading above 
the table.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 20503px"><NOBR><I><B>Exercise 
1−4. </B></I>Write a program to print the corresponding Celsius to Fahrenheit 
table.</NOBR></DIV></SPAN></FONT><FONT face=Times size=4><SPAN 
style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 20544px"><NOBR><B>1.3 The for 
statement</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 20591px"><NOBR>There are 
plenty of different ways to write a program for a particular task. Let's try a 
variation on the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 20611px"><NOBR>temperature 
converter.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 20650px"><NOBR>#include 
&lt;stdio.h&gt;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 20683px"><NOBR>/* print 
Fahrenheit−Celsius table */</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 20699px"><NOBR>main()</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 20716px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 20732px"><NOBR>int 
fahr;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 20765px"><NOBR>for (fahr = 0; 
fahr &lt;= 300; fahr = fahr + 20)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 20782px"><NOBR>printf("%3d 
%6.1f\n", fahr, (5.0/9.0)*(fahr−32));</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 20798px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 20835px"><NOBR>This produces 
the same answers, but it certainly looks different. One major change is the 
elimination of most</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 20855px"><NOBR>of the 
variables; only <FONT face=Courier>fahr </FONT>remains, and we have made it an 
<FONT face=Courier>int</FONT>. The lower and upper limits and the 
step</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 20875px"><NOBR>size appear 
only as constants in the <FONT face=Courier>for </FONT>statement, itself a new 
construction, and the expression that computes</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 20894px"><NOBR>the Celsius 
temperature now appears as the third argument of <FONT face=Courier>printf 
</FONT>instead of a separate assignment</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 20914px"><NOBR>statement.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 20954px"><NOBR>This last 
change is an instance of a general rule − in any context where it is permissible 
to use the value of</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 20974px"><NOBR>some type, you 
can use a more complicated expression of that type. Since the third argument of 
<FONT face=Courier>printf </FONT>must</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 20993px"><NOBR>be a 
floating−point value to match the <FONT face=Courier>%6.1f</FONT>, any 
floating−point expression can occur here.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 21033px"><NOBR>The <FONT 
face=Courier>for </FONT>statement is a loop, a generalization of the <FONT 
face=Courier>while</FONT>. If you compare it to the earlier <FONT 
face=Courier>while</FONT>, its</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 21053px"><NOBR>operation 
should be clear. Within the parentheses, there are three parts, separated by 
semicolons. The first</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 21073px"><NOBR>part, the 
initialization</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 21112px"><NOBR>fahr = 
0</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 21148px"><NOBR>is done once, 
before the loop proper is entered. The second part is the test or condition that 
controls the loop:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 21188px"><NOBR>fahr &lt;= 
300</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 21224px"><NOBR>This condition 
is evaluated; if it is true, the body of the loop (here a single <FONT 
face=Courier>ptintf</FONT>) is executed. Then the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 21244px"><NOBR>increment 
step</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 21284px"><NOBR>fahr = fahr + 
20</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 21320px"><NOBR>is executed, 
and the condition re−evaluated. The loop terminates if the condition has become 
false. As with</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 21340px"><NOBR>the <FONT 
face=Courier>while</FONT>, the body of the loop can be a single statement or a 
group of statements enclosed in braces. The</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 21360px"><NOBR>initialization, 
condition and increment can be any expressions.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 21399px"><NOBR>The choice 
between <FONT face=Courier>while </FONT>and <FONT face=Courier>for </FONT>is 
arbitrary, based on which seems clearer. The <FONT face=Courier>for </FONT>is 
usually</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 21419px"><NOBR>appropriate for 
loops in which the initialization and increment are single statements and 
logically related,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 21439px"><NOBR>since it is 
more compact than <FONT face=Courier>while </FONT>and it keeps the loop control 
statements together in one place.</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 20413px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 21493px"><NOBR>1.3 The for 
statement</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 21493px"><NOBR>18</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 21559px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=19><B>Page 19</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 21651px"><NOBR><I><B>Exercise 
1−5. </B></I>Modify the temperature conversion program to print the table in 
reverse order, that is, from 300</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 21671px"><NOBR>degrees to 
0.</NOBR></DIV></SPAN></FONT><FONT face=Times size=4><SPAN 
style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 21712px"><NOBR><B>1.4 Symbolic 
Constants</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 21759px"><NOBR>A final 
observation before we leave temperature conversion forever. It's bad practice to 
bury ``magic</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 21779px"><NOBR>numbers'' like 
300 and 20 in a program; they convey little information to someone who might 
have to read the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 21799px"><NOBR>program later, 
and they are hard to change in a systematic way. One way to deal with magic 
numbers is to</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 21818px"><NOBR>give them 
meaningful names. A <FONT face=Courier>#define </FONT>line defines a <I>symbolic 
name or symbolic constant </I>to be a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 21838px"><NOBR>particular 
string of characters:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 128px; POSITION: absolute; TOP: 21879px"><NOBR>#define 
<I><FONT face=Times>name replacement 
list</FONT></I></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 21917px"><NOBR>Thereafter, any 
occurrence of <I>name </I>(not in quotes and not part of another name) will be 
replaced by the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 21937px"><NOBR>corresponding 
<I>replacement text</I>. The <I>name </I>has the same form as a variable name: a 
sequence of letters and</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 21957px"><NOBR>digits that 
begins with a letter. The <I>replacement text </I>can be any sequence of 
characters; it is not limited to</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 21977px"><NOBR>numbers.</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 22016px"><NOBR>#include 
&lt;stdio.h&gt;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 22049px"><NOBR>#define LOWER 0 
/* lower limit of table */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 22066px"><NOBR>#define UPPER 
300 /* upper limit */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 22082px"><NOBR>#define STEP 20 
/* step size */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 22115px"><NOBR>/* print 
Fahrenheit−Celsius table */</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 22132px"><NOBR>main()</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 22148px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 22165px"><NOBR>int 
fahr;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 22198px"><NOBR>for (fahr = 
LOWER; fahr &lt;= UPPER; fahr = fahr + STEP)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 22214px"><NOBR>printf("%3d 
%6.1f\n", fahr, (5.0/9.0)*(fahr−32));</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 22231px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 22267px"><NOBR>The quantities 
<FONT face=Courier>LOWER</FONT>, <FONT face=Courier>UPPER </FONT>and <FONT 
face=Courier>STEP </FONT>are symbolic constants, not variables, so they do not 
appear in</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 22287px"><NOBR>declarations. 
Symbolic constant names are conventionally written in upper case so they can ber 
readily</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 22307px"><NOBR>distinguished 
from lower case variable names. Notice that there is no semicolon at the end of 
a <FONT face=Courier>#define</FONT></NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 22327px"><NOBR>line.</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=4><SPAN style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 22368px"><NOBR><B>1.5 
Character Input and Output</B></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 22414px"><NOBR>We are going to 
consider a family of related programs for processing character data. You will 
find that many</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 22434px"><NOBR>programs are 
just expanded versions of the prototypes that we discuss here.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 22474px"><NOBR>The model of 
input and output supported by the standard library is very simple. Text input or 
output,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 22494px"><NOBR>regardless of 
where it originates or where it goes to, is dealt with as streams of characters. 
A <I>text stream </I>is a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 22513px"><NOBR>sequence of 
characters divided into lines; each line consists of zero or more characters 
followed by a newline</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 22533px"><NOBR>character. It 
is the responsibility of the library to make each input or output stream confirm 
this model; the C</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 22553px"><NOBR>programmer 
using the library need not worry about how lines are represented outside the 
program.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 22593px"><NOBR>The standard 
library provides several functions for reading or writing one character at a 
time, of which</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 22613px"><NOBR>getchar <FONT 
face=Times>and </FONT>putchar <FONT face=Times>are the simplest. Each time it is 
called, </FONT>getchar <FONT face=Times>reads the </FONT><I><FONT 
face=Times>next input character</FONT></I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 22632px"><NOBR>from a text 
stream and returns that as its value. That is, after</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 21601px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 22681px"><NOBR>1.4 Symbolic 
Constants</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 22681px"><NOBR>19</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 22747px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=20><B>Page 20</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 22839px"><NOBR>c = 
getchar();</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 22876px"><NOBR>the variable 
<FONT face=Courier>c </FONT>contains the next character of input. The characters 
normally come from the keyboard; input</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 22895px"><NOBR>from files is 
discussed in <A 
href="#138"></A><FONT 
face=Times color=#0000ff><A 
href="#138">Chapter 
7</A></FONT><A 
href="#138"></A>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 22935px"><NOBR>The function 
<FONT face=Courier>putchar </FONT>prints a character each time it is 
called:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 22974px"><NOBR>putchar(c);</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 23011px"><NOBR>prints the 
contents of the integer variable <FONT face=Courier>c </FONT>as a character, 
usually on the screen. Calls to <FONT face=Courier>putchar 
</FONT>and</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 23032px"><NOBR>printf <FONT 
face=Times>may be interleaved; the output will appear in the order in which the 
calls are made.</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 23071px"><NOBR><B>1.5.1 File 
Copying</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 23114px"><NOBR>Given <FONT 
face=Courier>getchar </FONT>and <FONT face=Courier>putchar</FONT>, you can write 
a surprising amount of useful code without knowing anything</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 23134px"><NOBR>more about 
input and output. The simplest <B><SPAN class=goohl2>example</SPAN></B> is a 
program that copies its input to its output one</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 23153px"><NOBR>character at a 
time:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 23193px"><NOBR><I>read a 
character</I></NOBR></DIV>
<DIV style="LEFT: 141px; POSITION: absolute; TOP: 23209px"><NOBR>while 
(<I>charater is not end−of−file indicator</I>)</NOBR></DIV>
<DIV style="LEFT: 174px; POSITION: absolute; TOP: 23226px"><NOBR><I>output the 
character just read</I></NOBR></DIV>
<DIV style="LEFT: 174px; POSITION: absolute; TOP: 23242px"><NOBR><I>read a 
character</I></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 23279px"><NOBR>Converting this 
into C gives:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 23318px"><NOBR>#include 
&lt;stdio.h&gt;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 23351px"><NOBR>/* copy input 
to output; 1st version */</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 23368px"><NOBR>main()</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 23384px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 23401px"><NOBR>int 
c;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 23434px"><NOBR>c = 
getchar();</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 23450px"><NOBR>while (c != 
EOF) {</NOBR></DIV>
<DIV 
style="LEFT: 199px; POSITION: absolute; TOP: 23467px"><NOBR>putchar(c);</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 23483px"><NOBR>c = 
getchar();</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 23500px"><NOBR>}</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 23516px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 23553px"><NOBR>The relational 
operator <FONT face=Courier>!= </FONT>means ``not equal to''.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 23592px"><NOBR>What appears to 
be a character on the keyboard or screen is of course, like everything else, 
stored internally</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 23612px"><NOBR>just as a bit 
pattern. The type <FONT face=Courier>char </FONT>is specifically meant for 
storing such character data, but any integer type</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 23632px"><NOBR>can be used. We 
used <FONT face=Courier>int </FONT>for a subtle but important 
reason.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 23671px"><NOBR>The problem is 
distinguishing the end of input from valid data. The solution is that <FONT 
face=Courier>getchar </FONT>returns a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 23691px"><NOBR>distinctive 
value when there is no more input, a value that cannot be confused with any real 
character. This</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 23711px"><NOBR>value is called 
<FONT face=Courier>EOF</FONT>, for ``end of file''. We must declare <FONT 
face=Courier>c </FONT>to be a type big enough to hold any value 
that</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 23732px"><NOBR>getchar <FONT 
face=Times>returns. We can't use </FONT>char <FONT face=Times>since </FONT>c 
<FONT face=Times>must be big enough to hold </FONT>EOF <FONT face=Times>in 
addition to any possible</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 23752px"><NOBR>char<FONT 
face=Times>. Therefore we use </FONT>int<FONT face=Times>.</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 23791px"><NOBR>EOF <FONT 
face=Times>is an integer defined in &lt;stdio.h&gt;, but the specific numeric 
value doesn't matter as long as it is not 
the</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 23810px"><NOBR>same as any 
<FONT face=Courier>char </FONT>value. By using the symbolic constant, we are 
assured that nothing in the program depends</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 23830px"><NOBR>on the specific 
numeric value.</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 22789px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 23869px"><NOBR>1.5.1 File 
Copying</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 23869px"><NOBR>20</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 23935px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=21><B>Page 21</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 24027px"><NOBR>The program for 
copying would be written more concisely by experienced C programmers. In C, 
any</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 24047px"><NOBR>assignment, 
such as</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 24086px"><NOBR>c = 
getchar();</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 24123px"><NOBR>is an 
expression and has a value, which is the value of the left hand side after the 
assignment. This means that</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 24143px"><NOBR>a assignment 
can appear as part of a larger expression. If the assignment of a character to 
<FONT face=Courier>c </FONT>is put inside the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 24163px"><NOBR>test part of a 
<FONT face=Courier>while </FONT>loop, the copy program can be written this 
way:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 24202px"><NOBR>#include 
&lt;stdio.h&gt;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 24235px"><NOBR>/* copy input 
to output; 2nd version */</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 24251px"><NOBR>main()</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 24268px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 24284px"><NOBR>int 
c;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 24317px"><NOBR>while ((c = 
getchar()) != EOF)</NOBR></DIV>
<DIV 
style="LEFT: 199px; POSITION: absolute; TOP: 24334px"><NOBR>putchar(c);</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 24350px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 24387px"><NOBR>The <FONT 
face=Courier>while </FONT>gets a character, assigns it to <FONT 
face=Courier>c</FONT>, and then tests whether the character was the end−of−file 
signal. If</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 24407px"><NOBR>it was not, the 
body of the <FONT face=Courier>while </FONT>is executed, printing the character. 
The <FONT face=Courier>while </FONT>then repeats. When the end</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 24427px"><NOBR>of the input is 
finally reached, the <FONT face=Courier>while </FONT>terminates and so does 
<FONT face=Courier>main</FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 24466px"><NOBR>This version 
centralizes the input − there is now only one reference to <FONT 
face=Courier>getchar </FONT>− and shrinks the program.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 24486px"><NOBR>The resulting 
program is more compact, and, once the idiom is mastered, easier to read. You'll 
see this style</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 24506px"><NOBR>often. (It's 
possible to get carried away and create impenetrable code, however, a tendency 
that we will try to</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 24526px"><NOBR>curb.)</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 24565px"><NOBR>The parentheses 
around the assignment, within the condition are necessary. The <I>precedence 
</I>of <FONT face=Courier>!= </FONT>is higher</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 24585px"><NOBR>than that of 
<FONT face=Courier>=</FONT>, which means that in the absence of parentheses the 
relational test <FONT face=Courier>!= </FONT>would be done before 
the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 24605px"><NOBR>assignment 
<FONT face=Courier>=</FONT>. So the statement</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 24644px"><NOBR>c = getchar() 
!= EOF</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 24681px"><NOBR>is equivalent 
to</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 24720px"><NOBR>c = (getchar() 
!= EOF)</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 24757px"><NOBR>This has the 
undesired effect of setting <FONT face=Courier>c </FONT>to 0 or 1, depending on 
whether or not the call of <FONT face=Courier>getchar 
</FONT>returned</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 24776px"><NOBR>end of file. 
(More on this in <FONT face=Times color=#0000ff><A 
href="#36">Chapter 
2</A></FONT><A 
href="#36"></A>.)</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 24816px"><NOBR><I><B>Exercsise 
1−6. </B></I>Verify that the expression <FONT face=Courier>getchar() != EOF 
</FONT>is 0 or 1.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 24856px"><NOBR><I><B>Exercise 
1−7. </B></I>Write a program to print the value of <FONT 
face=Courier>EOF</FONT>.</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 24895px"><NOBR><B>1.5.2 
Character Counting</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 24939px"><NOBR>The next 
program counts characters; it is similar to the copy 
program.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 24978px"><NOBR>#include 
&lt;stdio.h&gt;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 25011px"><NOBR>/* count 
characters in input; 1st version */</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 23977px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 25057px"><NOBR>1.5.2 Character 
Counting</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 25057px"><NOBR>21</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 25123px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=22><B>Page 22</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 25215px"><NOBR>main()</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 25232px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 25248px"><NOBR>long 
nc;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 25281px"><NOBR>nc = 
0;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 25298px"><NOBR>while 
(getchar() != EOF)</NOBR></DIV>
<DIV 
style="LEFT: 199px; POSITION: absolute; TOP: 25314px"><NOBR>++nc;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 25331px"><NOBR>printf("%ld\n", 
nc);</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 25347px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 25384px"><NOBR>The 
statement</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 25423px"><NOBR>++nc;</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 25459px"><NOBR>presents a new 
operator, <FONT face=Courier>++</FONT>, which means <I>increment by one</I>. You 
could instead write <FONT face=Courier>nc = nc + 1 
</FONT>but</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 25480px"><NOBR>++nc <FONT 
face=Times>is more concise and often more efficient. There is a corresponding 
operator </FONT>−− <FONT face=Times>to decrement by 1. 
The</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 25499px"><NOBR>operators <FONT 
face=Courier>++ </FONT>and <FONT face=Courier>−− </FONT>can be either prefix 
operators (<FONT face=Courier>++nc</FONT>) or postfix operators (<FONT 
face=Courier>nc++</FONT>); these two forms have</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 25519px"><NOBR>different 
values in expressions, as will be shown in <FONT face=Times color=#0000ff><A 
href="#36">Chapter 
2</A></FONT><A 
href="#36"></A>, 
but <FONT face=Courier>++nc </FONT>and <FONT face=Courier>nc++ </FONT>both 
increment <FONT face=Courier>nc</FONT>. For</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 25539px"><NOBR>the moment we 
will will stick to the prefix form.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 25578px"><NOBR>The character 
counting program accumulates its count in a <FONT face=Courier>long 
</FONT>variable instead of an int. <FONT face=Courier>long </FONT>integers 
are</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 25598px"><NOBR>at least 32 
bits. Although on some machines, <FONT face=Courier>int </FONT>and <FONT 
face=Courier>long </FONT>are the same size, on others an <FONT face=Courier>int 
</FONT>is 16 bits,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 25618px"><NOBR>with a maximum 
value of 32767, and it would take relatively little input to overflow an <FONT 
face=Courier>int </FONT>counter. The</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 25638px"><NOBR>conversion 
specification <FONT face=Courier>%ld </FONT>tells <FONT face=Courier>printf 
</FONT>that the corresponding argument is a <FONT face=Courier>long 
</FONT>integer.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 25677px"><NOBR>It may be 
possible to cope with even bigger numbers by using a <FONT face=Courier>double 
</FONT>(double precision <FONT face=Courier>float</FONT>). We will</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 25697px"><NOBR>also use a 
<FONT face=Courier>for </FONT>statement instead of a <FONT 
face=Courier>while</FONT>, to illustrate another way to write the 
loop.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 141px; POSITION: absolute; TOP: 25736px"><NOBR>#include 
&lt;stdio.h&gt;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 25769px"><NOBR>/* count 
characters in input; 2nd version */</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 25786px"><NOBR>main()</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 25802px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 25819px"><NOBR>double 
nc;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 25852px"><NOBR>for (nc = 0; 
gechar() != EOF; ++nc)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 25868px"><NOBR>;</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 25885px"><NOBR>printf("%.0f\n", 
nc);</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 25901px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 25939px"><NOBR>printf <FONT 
face=Times>uses </FONT>%f <FONT face=Times>for both </FONT>float <FONT 
face=Times>and </FONT>double<FONT face=Times>; </FONT>%.0f <FONT 
face=Times>suppresses the printing of the decimal point and 
the</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 25958px"><NOBR>fraction part, 
which is zero.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 25997px"><NOBR>The body of 
this <FONT face=Courier>for </FONT>loop is empty, because all the work is done 
in the test and increment parts. But the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 26017px"><NOBR>grammatical 
rules of C require that a <FONT face=Courier>for </FONT>statement have a body. 
The isolated semicolon, called a <I>null</I></NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 26037px"><NOBR><I>statement</I>, is 
there to satisfy that requirement. We put it on a separate line to make it 
visible.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 26077px"><NOBR>Before we leave 
the character counting program, observe that if the input contains no 
characters, the <FONT face=Courier>while</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 26096px"><NOBR>or <FONT 
face=Courier>for </FONT>test fails on the very first call to <FONT 
face=Courier>getchar</FONT>, and the program produces zero, the right answer. 
This is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 26116px"><NOBR>important. One 
of the nice things about <FONT face=Courier>while </FONT>and <FONT 
face=Courier>for </FONT>is that they test at the top of the loop, 
before</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 26136px"><NOBR>proceeding with 
the body. If there is nothing to do, nothing is done, even if that means never 
going through</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 26156px"><NOBR>the loop body. 
Programs should act intelligently when given zero−length input. The <FONT 
face=Courier>while </FONT>and <FONT face=Courier>for</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 26176px"><NOBR>statements help 
ensure that programs do reasonable things with boundary conditions.</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 25165px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 26245px"><NOBR>1.5.2 Character 
Counting</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 26245px"><NOBR>22</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 26311px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=23><B>Page 23</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 26404px"><NOBR><B>1.5.3 Line 
Counting</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 26447px"><NOBR>The next 
program counts input lines. As we mentioned above, the standard library ensures 
that an input text</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 26467px"><NOBR>stream appears 
as a sequence of lines, each terminated by a newline. Hence, counting lines is 
just counting</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 26486px"><NOBR>newlines:</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 26526px"><NOBR>#include 
&lt;stdio.h&gt;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 26559px"><NOBR>/* count lines 
in input */</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 26575px"><NOBR>main()</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 26592px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 26608px"><NOBR>int c, 
nl;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 26641px"><NOBR>nl = 
0;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 26658px"><NOBR>while ((c = 
getchar()) != EOF)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 26674px"><NOBR>if (c == 
'\n')</NOBR></DIV>
<DIV 
style="LEFT: 232px; POSITION: absolute; TOP: 26691px"><NOBR>++nl;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 26707px"><NOBR>printf("%d\n", 
nl);</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 26724px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 26760px"><NOBR>The body of the 
<FONT face=Courier>while </FONT>now consists of an <FONT face=Courier>if</FONT>, 
which in turn controls the increment <FONT face=Courier>++nl</FONT>. The <FONT 
face=Courier>if </FONT>statement</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 26780px"><NOBR>tests the 
parenthesized condition, and if the condition is true, executes the statement 
(or group of statements in</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 26800px"><NOBR>braces) that 
follows. We have again indented to show what is controlled by what.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 26839px"><NOBR>The double 
equals sign <FONT face=Courier>== </FONT>is the C notation for ``is equal to'' 
(like Pascal's single <FONT face=Courier>= </FONT>or Fortran's <FONT 
face=Courier>.EQ.</FONT>). This</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 26859px"><NOBR>symbol is used 
to distinguish the equality test from the single <FONT face=Courier>= 
</FONT>that C uses for assignment. A word of caution:</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 26879px"><NOBR>newcomers to C 
occasionally write <FONT face=Courier>= </FONT>when they mean <FONT 
face=Courier>==</FONT>. As we will see in <FONT face=Times color=#0000ff><A 
href="#36">Chapter 
2</A></FONT><A 
href="#36"></A>, 
the result is usually a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 26899px"><NOBR>legal 
expression, so you will get no warning.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 26938px"><NOBR>A character 
written between single quotes represents an integer value equal to the numerical 
value of the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 26958px"><NOBR>character in 
the machine's character set. This is called a <I>character constant</I>, 
although it is just another way to</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 26978px"><NOBR>write a small 
integer. So, for <B><SPAN class=goohl2>example</SPAN></B>, <FONT 
face=Courier>'A' </FONT>is a character constant; in the ASCII character set its 
value is 65,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 26998px"><NOBR>the internal 
representation of the character <FONT face=Courier>A</FONT>. Of course, <FONT 
face=Courier>'A' </FONT>is to be preferred over <FONT face=Courier>65</FONT>: 
its meaning is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 27018px"><NOBR>obvious, and it 
is independent of a particular character set.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 27057px"><NOBR>The escape 
sequences used in string constants are also legal in character constants, so 
<FONT face=Courier>'\n' </FONT>stands for the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 27077px"><NOBR>value of the 
newline character, which is 10 in ASCII. You should note carefully that <FONT 
face=Courier>'\n' </FONT>is a single</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 27097px"><NOBR>character, and 
in expressions is just an integer; on the other hand, <FONT face=Courier>'\n' 
</FONT>is a string constant that happens to</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 27117px"><NOBR>contain only 
one character. The topic of strings versus characters is discussed further in <A 
href="#36"></A><FONT 
face=Times color=#0000ff><A 
href="#36">Chapter 
2</A></FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 27156px"><NOBR><I><B>Exercise 
1−8. </B></I>Write a program to count blanks, tabs, and newlines.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 27196px"><NOBR><I><B>Exercise 
1−9. </B></I>Write a program to copy its input to its output, replacing each 
string of one or more blanks by a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 27216px"><NOBR>single 
blank.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 27255px"><NOBR><I><B>Exercise 
1−10. </B></I>Write a program to copy its input to its output, replacing each 
tab by <FONT face=Courier>\t</FONT>, each backspace 
by</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 27276px"><NOBR>\b<FONT 
face=Times>, and each backslash by </FONT>\\<FONT face=Times>. This makes tabs 
and backspaces visible in an unambiguous 
way.</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 27315px"><NOBR><B>1.5.4 Word 
Counting</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 27358px"><NOBR>The fourth in 
our series of useful programs counts lines, words, and characters, with the 
loose definition that a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 27378px"><NOBR>word is any 
sequence of characters that does not contain a blank, tab or newline. This is a 
bare−bones version</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 26353px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 27433px"><NOBR>1.5.3 Line 
Counting</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 27433px"><NOBR>23</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 27499px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=24><B>Page 24</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 27591px"><NOBR>of the UNIX 
program <FONT face=Courier>wc</FONT>.</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 27631px"><NOBR>#include 
&lt;stdio.h&gt;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 27664px"><NOBR>#define IN 1 /* 
inside a word */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 27680px"><NOBR>#define OUT 0 
/* outside a word */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 27713px"><NOBR>/* count lines, 
words, and characters in input */</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 27730px"><NOBR>main()</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 27746px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 27763px"><NOBR>int c, nl, nw, 
nc, state;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 27796px"><NOBR>state = 
OUT;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 27812px"><NOBR>nl = nw = nc = 
0;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 27829px"><NOBR>while ((c = 
getchar()) != EOF) {</NOBR></DIV>
<DIV 
style="LEFT: 199px; POSITION: absolute; TOP: 27845px"><NOBR>++nc;</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 27862px"><NOBR>if (c == 
'\n')</NOBR></DIV>
<DIV 
style="LEFT: 232px; POSITION: absolute; TOP: 27878px"><NOBR>++nl;</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 27895px"><NOBR>if (c == ' ' || 
c == '\n' || c = '\t')</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 27911px"><NOBR>state = 
OUT;</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 27928px"><NOBR>else if (state 
== OUT) {</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 27944px"><NOBR>state = 
IN;</NOBR></DIV>
<DIV 
style="LEFT: 232px; POSITION: absolute; TOP: 27961px"><NOBR>++nw;</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 27977px"><NOBR>}</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 27994px"><NOBR>}</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 28010px"><NOBR>printf("%d %d 
%d\n", nl, nw, nc);</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 28027px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 28063px"><NOBR>Every time the 
program encounters the first character of a word, it counts one more word. The 
variable</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 28084px"><NOBR>state <FONT 
face=Times>records whether the program is currently in a word or not; initially 
it is ``not in a word'', which is</FONT></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 28103px"><NOBR>assigned the 
value <FONT face=Courier>OUT</FONT>. We prefer the symbolic constants <FONT 
face=Courier>IN </FONT>and <FONT face=Courier>OUT </FONT>to the literal values 1 
and 0 because</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 28123px"><NOBR>they make the 
program more readable. In a program as tiny as this, it makes little difference, 
but in larger</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 28142px"><NOBR>programs, the 
increase in clarity is well worth the modest extra effort to write it this way 
from the beginning.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 28162px"><NOBR>You'll also 
find that it's easier to make extensive changes in programs where magic numbers 
appear only as</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 28182px"><NOBR>symbolic 
constants.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 28222px"><NOBR>The 
line</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 28261px"><NOBR>nl = nw = nc = 
0;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 28297px"><NOBR>sets all three 
variables to zero. This is not a special case, but a consequence of the fact 
that an assignment is an</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 28317px"><NOBR>expression with 
the value and assignments associated from right to left. It's as if we had 
written</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 28357px"><NOBR>nl = (nw = (nc 
= 0));</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 28393px"><NOBR>The operator 
<FONT face=Courier>|| </FONT>means OR, so the 
line</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 28433px"><NOBR>if (c == ' ' || 
c == '\n' || c = '\t')</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 28469px"><NOBR>says ``if <FONT 
face=Courier>c </FONT>is a blank <I>or </I><FONT face=Courier>c </FONT>is a 
newline <I>or </I><FONT face=Courier>c </FONT>is a tab''. (Recall that the 
escape sequence <FONT face=Courier>\t </FONT>is a visible</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 28489px"><NOBR>representation 
of the tab character.) There is a corresponding operator <FONT 
face=Courier>&amp;&amp; </FONT>for AND; its precedence is just</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 28509px"><NOBR>higher than 
<FONT face=Courier>||</FONT>. Expressions connected by <FONT 
face=Courier>&amp;&amp; </FONT>or <FONT face=Courier>|| </FONT>are evaluated 
left to right, and it is guaranteed that</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 28528px"><NOBR>evaluation will 
stop as soon as the truth or falsehood is known. If <FONT face=Courier>c 
</FONT>is a blank, there is no need to test whether</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 28548px"><NOBR>it is a newline 
or tab, so these tests are not made. This isn't particularly important here, but 
is significant in</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 28568px"><NOBR>more 
complicated situations, as we will soon see.</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 27541px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 28621px"><NOBR>1.5.3 Line 
Counting</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 28621px"><NOBR>24</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 28687px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=25><B>Page 25</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 28779px"><NOBR>The <B><SPAN 
class=goohl2>example</SPAN></B> also shows an <FONT face=Courier>else</FONT>, 
which specifies an alternative action if the condition part of an <FONT 
face=Courier>if</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 28799px"><NOBR>statement is 
false. The general form is</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 28838px"><NOBR>if 
(<I>expression</I>)</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 28855px"><NOBR><I>statement</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 240px; POSITION: absolute; TOP: 28856px"><NOBR><I>1</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 28871px"><NOBR>else</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 28888px"><NOBR><I>statement</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 240px; POSITION: absolute; TOP: 28889px"><NOBR><I>2</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 28924px"><NOBR>One and only 
one of the two statements associated with an <FONT face=Courier>if−else 
</FONT>is performed. If the <I>expression </I>is true,</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 28944px"><NOBR><I>statement</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 171px; POSITION: absolute; TOP: 28950px"><NOBR><I>1</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 181px; POSITION: absolute; TOP: 28944px"><NOBR>is executed; if 
not, <I>statement</I></NOBR></DIV></SPAN></FONT><FONT face=Times size=2><SPAN 
style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 370px; POSITION: absolute; TOP: 28950px"><NOBR><I>2</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 380px; POSITION: absolute; TOP: 28944px"><NOBR>is executed. 
Each <I>statement </I>can be a single statement or several in</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 28964px"><NOBR>braces. In the 
word count program, the one after the <FONT face=Courier>else </FONT>is an <FONT 
face=Courier>if </FONT>that controls two statements in braces.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 29004px"><NOBR><I><B>Exercise 
1−11. </B></I>How would you test the word count program? What kinds of input are 
most likely to uncover</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 29023px"><NOBR>bugs if there 
are any?</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 29063px"><NOBR><I><B>Exercise 
1−12. </B></I>Write a program that prints its input one word per 
line.</NOBR></DIV></SPAN></FONT><FONT face=Times size=4><SPAN 
style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 29104px"><NOBR><B>1.6 
Arrays</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 29151px"><NOBR>Let is write a 
program to count the number of occurrences of each digit, of white space 
characters (blank, tab,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 29171px"><NOBR>newline), and 
of all other characters. This is artificial, but it permits us to illustrate 
several aspects of C in one</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 29191px"><NOBR>program.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 29230px"><NOBR>There are 
twelve categories of input, so it is convenient to use an array to hold the 
number of occurrences of</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 29250px"><NOBR>each digit, 
rather than ten individual variables. Here is one version of the 
program:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 29289px"><NOBR>#include 
&lt;stdio.h&gt;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 29322px"><NOBR>/* count 
digits, white space, others */</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 29339px"><NOBR>main()</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 29355px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 29372px"><NOBR>int c, i, 
nwhite, nother;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 29388px"><NOBR>int 
ndigit[10];</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 29421px"><NOBR>nwhite = nother 
= 0;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 29438px"><NOBR>for (i = 0; i 
&lt; 10; ++i)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 29454px"><NOBR>ndigit[i] = 
0;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 29487px"><NOBR>while ((c = 
getchar()) != EOF)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 29504px"><NOBR>if (c &gt;= '0' 
&amp;c &lt;= '9')</NOBR></DIV>
<DIV 
style="LEFT: 232px; POSITION: absolute; TOP: 29520px"><NOBR>++ndigit[c−'0'];</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 29537px"><NOBR>else if (c == ' 
' || c == '\n' || c == '\t')</NOBR></DIV>
<DIV 
style="LEFT: 232px; POSITION: absolute; TOP: 29553px"><NOBR>++nwhite;</NOBR></DIV>
<DIV 
style="LEFT: 199px; POSITION: absolute; TOP: 29570px"><NOBR>else</NOBR></DIV>
<DIV 
style="LEFT: 232px; POSITION: absolute; TOP: 29586px"><NOBR>++nother;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 29619px"><NOBR>printf("digits 
=");</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 29636px"><NOBR>for (i = 0; i 
&lt; 10; ++i)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 29652px"><NOBR>printf(" %d", 
ndigit[i]);</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 29669px"><NOBR>printf(", white 
space = %d, other = %d\n",</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 29685px"><NOBR>nwhite, 
nother);</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 29702px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 29738px"><NOBR>The output of 
this program on itself is</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 28729px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 29809px"><NOBR>1.6 
Arrays</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 29809px"><NOBR>25</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 29875px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=26><B>Page 26</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 29967px"><NOBR>digits = 9 3 0 
0 0 0 0 0 0 1, white space = 123, other = 345</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 30004px"><NOBR>The 
declaration</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 30043px"><NOBR>int 
ndigit[10];</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 30079px"><NOBR>declares <FONT 
face=Courier>ndigit </FONT>to be an array of 10 integers. Array subscripts 
always start at zero in C, so the elements are</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 30100px"><NOBR>ndigit[0], 
ndigit[1], ..., ndigit[9]<FONT face=Times>. This is reflected in the </FONT>for 
<FONT face=Times>loops that initialize 
and</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 30119px"><NOBR>print the 
array.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 30159px"><NOBR>A subscript can 
be any integer expression, which includes integer variables like <FONT 
face=Courier>i</FONT>, and integer constants.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 30198px"><NOBR>This particular 
program relies on the properties of the character representation of the digits. 
For <B><SPAN class=goohl2>example</SPAN></B>, the</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 30218px"><NOBR>test</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 30257px"><NOBR>if (c &gt;= '0' 
&amp;c &lt;= '9')</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 30294px"><NOBR>determines 
whether the character in <FONT face=Courier>c </FONT>is a digit. If it is, the 
numeric value of that digit is</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 30333px"><NOBR>c − 
'0'</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 30370px"><NOBR>This works only 
if <FONT face=Courier>'0', '1', ..., '9' </FONT>have consecutive increasing 
values. Fortunately, this is true for</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 30390px"><NOBR>all character 
sets.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 30429px"><NOBR>By definition, 
<FONT face=Courier>char</FONT>s are just small integers, so <FONT 
face=Courier>char </FONT>variables and constants are identical to <FONT 
face=Courier>int</FONT>s in</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 30449px"><NOBR>arithmetic 
expressions. This is natural and convenient; for <B><SPAN 
class=goohl2>example</SPAN></B> <FONT face=Courier>c−'0' </FONT>is an integer 
expression with a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 30469px"><NOBR>value between 0 
and 9 corresponding to the character <FONT face=Courier>'0' </FONT>to <FONT 
face=Courier>'9' </FONT>stored in <FONT face=Courier>c</FONT>, and thus a valid 
subscript for</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 30489px"><NOBR>the array <FONT 
face=Courier>ndigit</FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 30528px"><NOBR>The decision as 
to whether a character is a digit, white space, or something else is made with 
the sequence</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 30568px"><NOBR>if (c &gt;= '0' 
&amp;c &lt;= '9')</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 30584px"><NOBR>++ndigit[c−'0'];</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 30601px"><NOBR>else if (c == ' 
' || c == '\n' || c == '\t')</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 30617px"><NOBR>++nwhite;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 30634px"><NOBR>else</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 30650px"><NOBR>++nother;</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 30687px"><NOBR>The 
pattern</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 30726px"><NOBR>if 
(<I>condition</I></NOBR></DIV></SPAN></FONT><FONT face=Courier size=2><SPAN 
style="FONT-SIZE: 9px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 240px; POSITION: absolute; TOP: 30728px"><NOBR><I>1</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 247px; POSITION: absolute; TOP: 30726px"><NOBR>)</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 30743px"><NOBR><I>statement</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 240px; POSITION: absolute; TOP: 30744px"><NOBR><I>1</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 30759px"><NOBR>else if 
(<I>condition</I></NOBR></DIV></SPAN></FONT><FONT face=Courier size=2><SPAN 
style="FONT-SIZE: 9px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 282px; POSITION: absolute; TOP: 30761px"><NOBR><I>2</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 289px; POSITION: absolute; TOP: 30759px"><NOBR>)</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 30776px"><NOBR><I>statement</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 240px; POSITION: absolute; TOP: 30777px"><NOBR><I>2</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 30792px"><NOBR>...</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 30809px"><NOBR>...</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 30825px"><NOBR>else</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 30842px"><NOBR><I>statement</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 240px; POSITION: absolute; TOP: 30843px"><NOBR><I>n</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 30878px"><NOBR>occurs 
frequently in programs as a way to express a multi−way decision. The 
<I>conditions </I>are evaluated in</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 30898px"><NOBR>order from the 
top until some <I>condition </I>is satisfied; at that point the corresponding 
<I>statement </I>part is executed,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 30918px"><NOBR>and the entire 
construction is finished. (Any <I>statement </I>can be several statements 
enclosed in braces.) If none</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 30937px"><NOBR>of the 
conditions is satisfied, the <I>statement </I>after the final <FONT 
face=Courier>else </FONT>is executed if it is present. If the final <FONT 
face=Courier>else</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 30957px"><NOBR>and 
<I>statement </I>are omitted, as in the word count program, no action takes 
place. There can be any number of</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 29917px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 30997px"><NOBR>1.6 
Arrays</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 30997px"><NOBR>26</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 31063px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=27><B>Page 27</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 31156px"><NOBR>else if<FONT 
face=Times>(</FONT><I><FONT face=Times>condition</FONT></I><FONT 
face=Times>)</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 128px; POSITION: absolute; TOP: 31175px"><NOBR><I>statement</I></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 31215px"><NOBR>groups between 
the initial <FONT face=Courier>if </FONT>and the final <FONT 
face=Courier>else</FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 31254px"><NOBR>As a matter of 
style, it is advisable to format this construction as we have shown; if each 
<FONT face=Courier>if </FONT>were indented</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 31274px"><NOBR>past the 
previous <FONT face=Courier>else</FONT>, a long sequence of decisions would 
march off the right side of the page.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 31314px"><NOBR>The <FONT 
face=Courier>switch </FONT>statement, to be discussed in <FONT face=Times 
color=#0000ff><A 
href="#64">Chapter 
4</A></FONT>, provides another way to write a multi−way branch that</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 31333px"><NOBR>is particulary 
suitable when the condition is whether some integer or character expression 
matches one of a set</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 31353px"><NOBR>of constants. 
For contrast, we will present a <FONT face=Courier>switch </FONT>version of this 
program in <A 
href="#56"></A><FONT 
face=Times color=#0000ff><A 
href="#56">Section 
3.4</A></FONT><A 
href="#56"></A>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 31393px"><NOBR><I><B>Exercise 
1−13. </B></I>Write a program to print a histogram of the lengths of words in 
its input. It is easy to draw the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 31413px"><NOBR>histogram with 
the bars horizontal; a vertical orientation is more challenging.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 31452px"><NOBR><I><B>Exercise 
1−14. </B></I>Write a program to print a histogram of the frequencies of 
different characters in its input.</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=4><SPAN style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 31493px"><NOBR><B>1.7 
Functions</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 31540px"><NOBR>In C, a 
function is equivalent to a subroutine or function in Fortran, or a procedure or 
function in Pascal. A</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 31560px"><NOBR>function 
provides a convenient way to encapsulate some computation, which can then be 
used without</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 31580px"><NOBR>worrying about 
its implementation. With properly designed functions, it is possible to ignore 
<I>how </I>a job is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 31600px"><NOBR>done; knowing 
<I>what </I>is done is sufficient. C makes the sue of functions easy, convinient 
and efficient; you will</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 31619px"><NOBR>often see a 
short function defined and called only once, just because it clarifies some 
piece of code.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 31659px"><NOBR>So far we have 
used only functions like <FONT face=Courier>printf</FONT>, <FONT 
face=Courier>getchar </FONT>and <FONT face=Courier>putchar </FONT>that have been 
provided for us;</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 31679px"><NOBR>now it's time 
to write a few of our own. Since C has no exponentiation operator like the <FONT 
face=Courier>** </FONT>of Fortran, let us</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 31699px"><NOBR>illustrate the 
mechanics of function definition by writing a function <FONT 
face=Courier>power(m,n) </FONT>to raise an integer <FONT face=Courier>m 
</FONT>to a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 31718px"><NOBR>positive 
integer power <FONT face=Courier>n</FONT>. That is, the value of <FONT 
face=Courier>power(2,5) </FONT>is 32. This function is not a 
practical</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 31738px"><NOBR>exponentiation 
routine, since it handles only positive powers of small integers, but it's good 
enough for</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 31758px"><NOBR>illustration.(The 
standard library contains a function <FONT face=Courier>pow(x,y) </FONT>that 
computes <I>x</I></NOBR></DIV></SPAN></FONT><FONT face=Times size=2><SPAN 
style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 644px; POSITION: absolute; TOP: 31754px"><NOBR><I>y</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 649px; POSITION: absolute; TOP: 31758px"><NOBR>.)</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 31798px"><NOBR>Here is the 
function <FONT face=Courier>power </FONT>and a main program to exercise it, so 
you can see the whole structure at once.</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 31837px"><NOBR>#include 
&lt;stdio.h&gt;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 31870px"><NOBR>int power(int 
m, int n);</NOBR></DIV>
<DIV style="LEFT: 141px; POSITION: absolute; TOP: 31903px"><NOBR>/* test power 
function */</NOBR></DIV>
<DIV 
style="LEFT: 141px; POSITION: absolute; TOP: 31919px"><NOBR>main()</NOBR></DIV>
<DIV style="LEFT: 141px; POSITION: absolute; TOP: 31936px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 174px; POSITION: absolute; TOP: 31952px"><NOBR>int 
i;</NOBR></DIV>
<DIV style="LEFT: 174px; POSITION: absolute; TOP: 31985px"><NOBR>for (i = 0; i 
&lt; 10; ++i)</NOBR></DIV>
<DIV style="LEFT: 207px; POSITION: absolute; TOP: 32002px"><NOBR>printf("%d %d 
%d\n", i, power(2,i), power(−3,i));</NOBR></DIV>
<DIV style="LEFT: 174px; POSITION: absolute; TOP: 32018px"><NOBR>return 
0;</NOBR></DIV>
<DIV style="LEFT: 141px; POSITION: absolute; TOP: 32035px"><NOBR>}</NOBR></DIV>
<DIV style="LEFT: 141px; POSITION: absolute; TOP: 32068px"><NOBR>/* power: raise 
base to n−th power; n &gt;= 0 */</NOBR></DIV>
<DIV style="LEFT: 141px; POSITION: absolute; TOP: 32084px"><NOBR>int power(int 
base, int n)</NOBR></DIV>
<DIV style="LEFT: 141px; POSITION: absolute; TOP: 32101px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 174px; POSITION: absolute; TOP: 32117px"><NOBR>int i, 
p;</NOBR></DIV>
<DIV style="LEFT: 174px; POSITION: absolute; TOP: 32150px"><NOBR>p = 
1;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 31105px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 32185px"><NOBR>1.7 
Functions</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 32185px"><NOBR>27</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 32251px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=28><B>Page 28</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 174px; POSITION: absolute; TOP: 32343px"><NOBR>for (i = 1; i 
&lt;= n; ++i)</NOBR></DIV>
<DIV style="LEFT: 207px; POSITION: absolute; TOP: 32360px"><NOBR>p = p * 
base;</NOBR></DIV>
<DIV style="LEFT: 174px; POSITION: absolute; TOP: 32376px"><NOBR>return 
p;</NOBR></DIV>
<DIV 
style="LEFT: 141px; POSITION: absolute; TOP: 32393px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 32429px"><NOBR>A function 
definition has this form:</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 32468px"><NOBR>return−type 
function−name(parameter declarations, if any)</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 32485px"><NOBR>{</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 32501px"><NOBR>declarations</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 32518px"><NOBR>statements</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 32534px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 32571px"><NOBR>Function 
definitions can appear in any order, and in one source file or several, although 
no function can be</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 32591px"><NOBR>split between 
files. If the source program appears in several files, you may have to say more 
to compile and</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 32611px"><NOBR>load it than if 
it all appears in one, but that is an operating system matter, not a language 
attribute. For the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 32630px"><NOBR>moment, we will 
assume that both functions are in the same file, so whatever you have learned 
about running</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 32650px"><NOBR>C programs will 
still work.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 32690px"><NOBR>The function 
<FONT face=Courier>power </FONT>is called twice by <FONT 
face=Courier>main</FONT>, in the line</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 32729px"><NOBR>printf("%d %d 
%d\n", i, power(2,i), power(−3,i));</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 32766px"><NOBR>Each call 
passes two arguments to <FONT face=Courier>power</FONT>, which each time returns 
an integer to be formatted and printed. In</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 32785px"><NOBR>an expression, 
<FONT face=Courier>power(2,i) </FONT>is an integer just as <FONT face=Courier>2 
</FONT>and <FONT face=Courier>i </FONT>are. (Not all functions produce an 
integer value; we</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 32805px"><NOBR>will take this 
up in <FONT face=Times color=#0000ff><A 
href="#64">Chapter 
4</A></FONT><A 
href="#64"></A>.)</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 32845px"><NOBR>The first line 
of <FONT face=Courier>power </FONT>itself,</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 141px; POSITION: absolute; TOP: 32884px"><NOBR>int power(int 
base, int n)</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 32921px"><NOBR>declares the 
parameter types and names, and the type of the result that the function returns. 
The names used</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 32941px"><NOBR>by <FONT 
face=Courier>power </FONT>for its parameters are local to <FONT 
face=Courier>power</FONT>, and are not visible to any other function: other 
routines can</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 32960px"><NOBR>use the same 
names without conflict. This is also true of the variables <FONT face=Courier>i 
</FONT>and <FONT face=Courier>p</FONT>: the <FONT face=Courier>i </FONT>in <FONT 
face=Courier>power </FONT>is unrelated to</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 32980px"><NOBR>the <FONT 
face=Courier>i </FONT>in <FONT face=Courier>main</FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 33020px"><NOBR>We will 
generally use <I>parameter </I>for a variable named in the parenthesized list in 
a function. The terms <I>formal</I></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 33040px"><NOBR><I>argument 
</I>and <I>actual argument </I>are sometimes used for the same 
distinction.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 33079px"><NOBR>The value that 
<FONT face=Courier>power </FONT>computes is returned to <FONT face=Courier>main 
</FONT>by the <FONT face=Courier>return</FONT>: statement. Any expression may 
follow</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 33100px"><NOBR>return<FONT 
face=Times>:</FONT></NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 33138px"><NOBR>return 
<I>expression</I>;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 33175px"><NOBR>A function need 
not return a value; a return statement with no expression causes control, but no 
useful value,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 33195px"><NOBR>to be returned 
to the caller, as does ``falling off the end'' of a function by reaching the 
terminating right brace.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 33214px"><NOBR>And the calling 
function can ignore a value returned by a function.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 33254px"><NOBR>You may have 
noticed that there is a <FONT face=Courier>return </FONT>statement at the end of 
<FONT face=Courier>main</FONT>. Since <FONT face=Courier>main </FONT>is a 
function like</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 33274px"><NOBR>any other, it 
may return a value to its caller, which is in effect the environment in which 
the program was</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 33294px"><NOBR>executed. 
Typically, a return value of zero implies normal termination; non−zero values 
signal unusual or</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 33313px"><NOBR>erroneous 
termination conditions. In the interests of simplicity, we have omitted <FONT 
face=Courier>return </FONT>statements from our</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 33334px"><NOBR>main <FONT 
face=Times>functions up to this point, but we will include them hereafter, as a 
reminder that programs should return</FONT></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 32293px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 33373px"><NOBR>1.7 
Functions</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 33373px"><NOBR>28</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 33439px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=29><B>Page 29</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 33531px"><NOBR>status to their 
environment.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 33571px"><NOBR>The 
declaration</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 141px; POSITION: absolute; TOP: 33610px"><NOBR>int power(int 
base, int n);</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 33647px"><NOBR>just before 
<FONT face=Courier>main </FONT>says that <FONT face=Courier>power </FONT>is a 
function that expects two <FONT face=Courier>int </FONT>arguments and returns an 
<FONT face=Courier>int</FONT>. This</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 33667px"><NOBR>declaration, 
which is called a <I>function prototype</I>, has to agree with the definition 
and uses of <FONT face=Courier>power</FONT>. It is an</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 33686px"><NOBR>error if the 
definition of a function or any uses of it do not agree with its 
prototype.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 33726px"><NOBR>parameter names 
need not agree. Indeed, parameter names are optional in a function prototype, so 
for the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 33746px"><NOBR>prototype we 
could have written</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 141px; POSITION: absolute; TOP: 33785px"><NOBR>int power(int, 
int);</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 33822px"><NOBR>Well−chosen 
names are good documentation however, so we will often use them.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 33861px"><NOBR>A note of 
history: the biggest change between ANSI C and earlier versions is how functions 
are declared and</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 33881px"><NOBR>defined. In the 
original definition of C, the <FONT face=Courier>power </FONT>function would 
have been written like this:</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 33920px"><NOBR>/* power: raise 
base to n−th power; n &gt;= 0 */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 33937px"><NOBR>/* (old−style 
version) */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 33953px"><NOBR>power(base, 
n)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 33970px"><NOBR>int base, 
n;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 33986px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 34003px"><NOBR>int i, 
p;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 34036px"><NOBR>p = 
1;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 34052px"><NOBR>for (i = 1; i 
&lt;= n; ++i)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 34069px"><NOBR>p = p * 
base;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 34085px"><NOBR>return 
p;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 34102px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 34138px"><NOBR>The parameters 
are named between the parentheses, and their types are declared before opening 
the left brace;</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 34158px"><NOBR>undeclared 
parameters are taken as <FONT face=Courier>int</FONT>. (The body of the function 
is the same as before.)</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 34198px"><NOBR>The declaration 
of <FONT face=Courier>power </FONT>at the beginning of the program would have 
looked like this:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 141px; POSITION: absolute; TOP: 34237px"><NOBR>int 
power();</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 34274px"><NOBR>No parameter 
list was permitted, so the compiler could not readily check that <FONT 
face=Courier>power </FONT>was being called</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 34294px"><NOBR>correctly. 
Indeed, since by default <FONT face=Courier>power </FONT>would have been assumed 
to return an <FONT face=Courier>int</FONT>, the entire declaration</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 34313px"><NOBR>might well have 
been omitted.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 34353px"><NOBR>The new syntax 
of function prototypes makes it much easier for a compiler to detect errors in 
the number of</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 34373px"><NOBR>arguments or 
their types. The old style of declaration and definition still works in ANSI C, 
at least for a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 34393px"><NOBR>transition 
period, but we strongly recommend that you use the new form when you have a 
compiler that</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 34412px"><NOBR>supports 
it.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 34452px"><NOBR><I><B>Exercise 
1.15. </B></I>Rewrite the temperature conversion program of <FONT face=Times 
color=#0000ff><A 
href="#13">Section 
1.2 </A></FONT>to use a function for conversion.</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 33481px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 34561px"><NOBR>1.7 
Functions</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 34561px"><NOBR>29</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 34627px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=30><B>Page 30</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=4><SPAN style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 34721px"><NOBR><B>1.8 
Arguments − Call by Value</B></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 34768px"><NOBR>One aspect of C 
functions may be unfamiliar to programmers who are used to some other 
languages,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 34787px"><NOBR>particulary 
Fortran. In C, all function arguments are passed ``by value.'' This means that 
the called function is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 34807px"><NOBR>given the 
values of its arguments in temporary variables rather than the originals. This 
leads to some different</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 34827px"><NOBR>properties than 
are seen with ``call by reference'' languages like Fortran or with <FONT 
face=Courier>var </FONT>parameters in Pascal, in</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 34847px"><NOBR>which the 
called routine has access to the original argument, not a local 
copy.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 34886px"><NOBR>Call by value 
is an asset, however, not a liability. It usually leads to more compact programs 
with fewer</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 34906px"><NOBR>extraneous 
variables, because parameters can be treated as conveniently initialized local 
variables in the called</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 34926px"><NOBR>routine. For 
<B><SPAN class=goohl2>example</SPAN></B>, here is a version of <FONT 
face=Courier>power </FONT>that makes use of this 
property.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 34965px"><NOBR>/* power: raise 
base to n−th power; n &gt;= 0; version 2 */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 34982px"><NOBR>int power(int 
base, int n)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 34998px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 35015px"><NOBR>int 
p;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 35048px"><NOBR>for (p = 1; n 
&gt; 0; −−n)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 35064px"><NOBR>p = p * 
base;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 35081px"><NOBR>return 
p;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 35097px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 35134px"><NOBR>The parameter 
<FONT face=Courier>n </FONT>is used as a temporary variable, and is counted down 
(a <FONT face=Courier>for </FONT>loop that runs backwards) until</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 35154px"><NOBR>it becomes 
zero; there is no longer a need for the variable <FONT face=Courier>i</FONT>. 
Whatever is done to <FONT face=Courier>n </FONT>inside <FONT face=Courier>power 
</FONT>has no</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 35173px"><NOBR>effect on the 
argument that <FONT face=Courier>power </FONT>was originally called 
with.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 35213px"><NOBR>When necessary, 
it is possible to arrange for a function to modify a variable in a calling 
routine. The caller</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 35233px"><NOBR>must provide 
the <I>address </I>of the variable to be set (technically a <I>pointer </I>to 
the variable), and the called</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 35253px"><NOBR>function must 
declare the parameter to be a pointer and access the variable indirectly through 
it. We will cover</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 35272px"><NOBR>pointers in <A 
href="#86"></A><FONT 
face=Times color=#0000ff><A 
href="#86">Chapter 
5</A></FONT><A 
href="#86"></A>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 35312px"><NOBR>The story is 
different for arrays. When the name of an array is used as an argument, the 
value passed to the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 35332px"><NOBR>function is the 
location or address of the beginning of the array − there is no copying of array 
elements. By</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 35352px"><NOBR>subscripting 
this value, the function can access and alter any argument of the array. This is 
the topic of the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 35371px"><NOBR>next 
section.</NOBR></DIV></SPAN></FONT><FONT face=Times size=4><SPAN 
style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 35413px"><NOBR><B>1.9 
Character Arrays</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 35459px"><NOBR>The most common 
type of array in C is the array of characters. To illustrate the use of 
character arrays and</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 35479px"><NOBR>functions to 
manipulate them, let's write a program that reads a set of text lines and prints 
the longest. The</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 35499px"><NOBR>outline is 
simple enough:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 35538px"><NOBR>while 
(<I>there's another line</I>)</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 35555px"><NOBR>if (<I>it's 
longer than the previous longest</I>)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 35571px"><NOBR>(<I>save 
it</I>)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 35588px"><NOBR>(<I>save its 
length</I>)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 35604px"><NOBR><I>print 
longest line</I></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 35641px"><NOBR>This outline 
makes it clear that the program divides naturally into pieces. One piece gets a 
new line, another</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 35661px"><NOBR>saves it, and 
the rest controls the process.</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 34669px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 35749px"><NOBR>1.8 Arguments − 
Call by Value</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 35749px"><NOBR>30</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 35815px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=31><B>Page 31</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 35907px"><NOBR>Since things 
divide so nicely, it would be well to write them that way too. Accordingly, let 
us first write a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 35927px"><NOBR>separate 
function <FONT face=Courier>getline </FONT>to fetch the next line of input. We 
will try to make the function useful in other</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 35947px"><NOBR>contexts. At 
the minimum, <FONT face=Courier>getline </FONT>has to return a signal about 
possible end of file; a more useful design</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 35967px"><NOBR>would be to 
return the length of the line, or zero if end of file is encountered. Zero is an 
acceptable</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 35986px"><NOBR>end−of−file 
return because it is never a valid line length. Every text line has at least one 
character; even a line</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 36006px"><NOBR>containing only 
a newline has length 1.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 36046px"><NOBR>When we find a 
line that is longer than the previous longest line, it must be saved somewhere. 
This suggests a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 36066px"><NOBR>second 
function, <FONT face=Courier>copy</FONT>, to copy the new line to a safe 
place.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 36105px"><NOBR>Finally, we 
need a main program to control <FONT face=Courier>getline </FONT>and <FONT 
face=Courier>copy</FONT>. Here is the result.</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 36145px"><NOBR>#include 
&lt;stdio.h&gt;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 36161px"><NOBR>#define MAXLINE 
1000 /* maximum input line length */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 36194px"><NOBR>int 
getline(char line[], int maxline);</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 36211px"><NOBR>void copy(char 
to[], char from[]);</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 36244px"><NOBR>/* print the 
longest input line */</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 36260px"><NOBR>main()</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 36277px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 36293px"><NOBR>int len; /* 
current line length */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 36310px"><NOBR>int max; /* 
maximum length seen so far */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 36326px"><NOBR>char 
line[MAXLINE]; /* current input line */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 36343px"><NOBR>char 
longest[MAXLINE]; /* longest line saved here */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 36376px"><NOBR>max = 
0;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 36392px"><NOBR>while ((len = 
getline(line, MAXLINE)) &gt; 0)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 36409px"><NOBR>if (len &gt; 
max) {</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 36425px"><NOBR>max = 
len;</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 36442px"><NOBR>copy(longest, 
line);</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 36458px"><NOBR>}</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 36475px"><NOBR>if (max &gt; 0) 
/* there was a line */</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 36491px"><NOBR>printf("%s", 
longest);</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 36508px"><NOBR>return 
0;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 36524px"><NOBR>}</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 36557px"><NOBR>/* getline: 
read a line into s, return length */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 36574px"><NOBR>int 
getline(char s[],int lim)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 36590px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 36607px"><NOBR>int c, 
i;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 36640px"><NOBR>for (i=0; i 
&lt; lim−1 &amp;(c=getchar())!=EOF &amp;c!='\n'; ++i)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 36656px"><NOBR>s[i] = 
c;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 36673px"><NOBR>if (c == '\n') 
{</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 36689px"><NOBR>s[i] = 
c;</NOBR></DIV>
<DIV 
style="LEFT: 199px; POSITION: absolute; TOP: 36706px"><NOBR>++i;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 36722px"><NOBR>}</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 36739px"><NOBR>s[i] = 
'\0';</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 36755px"><NOBR>return 
i;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 36772px"><NOBR>}</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 36805px"><NOBR>/* copy: copy 
'from' into 'to'; assume to is big enough */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 36821px"><NOBR>void copy(char 
to[], char from[])</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 36838px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 36854px"><NOBR>int 
i;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 36887px"><NOBR>i = 
0;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 36904px"><NOBR>while ((to[i] = 
from[i]) != '\0')</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 35857px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 36937px"><NOBR>1.8 Arguments − 
Call by Value</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 36937px"><NOBR>31</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 37003px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=32><B>Page 32</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 199px; POSITION: absolute; TOP: 37095px"><NOBR>++i;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 37112px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 37148px"><NOBR>The functions 
<FONT face=Courier>getline </FONT>and <FONT face=Courier>copy </FONT>are 
declared at the beginning of the program, which we assume is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 37168px"><NOBR>contained in 
one file.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 37208px"><NOBR>main <FONT 
face=Times>and </FONT>getline <FONT face=Times>communicate through a pair of 
arguments and a returned value. In </FONT>getline<FONT face=Times>, 
the</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 37227px"><NOBR>arguments are 
declared by the line</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 37267px"><NOBR>int 
getline(char s[], int lim);</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 37303px"><NOBR>which specifies 
that the first argument, <FONT face=Courier>s</FONT>, is an array, and the 
second, <FONT face=Courier>lim</FONT>, is an integer. The purpose 
of</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 37323px"><NOBR>supplying the 
size of an array in a declaration is to set aside storage. The length of an 
array <FONT face=Courier>s </FONT>is not necessary</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 37343px"><NOBR>in <FONT 
face=Courier>getline </FONT>since its size is set in <FONT 
face=Courier>main</FONT>. <FONT face=Courier>getline </FONT>uses <FONT 
face=Courier>return </FONT>to send a value back to the caller, just 
as</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 37363px"><NOBR>the function 
<FONT face=Courier>power </FONT>did. This line also declares that <FONT 
face=Courier>getline </FONT>returns an <FONT face=Courier>int</FONT>; since 
<FONT face=Courier>int </FONT>is the default return</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 37382px"><NOBR>type, it could 
be omitted.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 37422px"><NOBR>Some functions 
return a useful value; others, like <FONT face=Courier>copy</FONT>, are used 
only for their effect and return no value. The</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 37442px"><NOBR>return type of 
<FONT face=Courier>copy </FONT>is <FONT face=Courier>void</FONT>, which states 
explicitly that no value is returned.</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 37482px"><NOBR>getline <FONT 
face=Times>puts the character </FONT>'\0' <FONT face=Times>(the </FONT><I><FONT 
face=Times>null character</FONT></I><FONT face=Times>, whose value is zero) at 
the end of the array it is</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 37501px"><NOBR>creating, to 
mark the end of the string of characters. This conversion is also used by the C 
language: when a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 37521px"><NOBR>string constant 
like</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 37560px"><NOBR>"hello\n"</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 37597px"><NOBR>appears in a C 
program, it is stored as an array of characters containing the characters in the 
string and</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 37617px"><NOBR>terminated with 
a <FONT face=Courier>'\0' </FONT>to mark the end.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 37747px"><NOBR>The <FONT 
face=Courier>%s </FONT>format specification in <FONT face=Courier>printf 
</FONT>expects the corresponding argument to be a string represented in 
this</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 37767px"><NOBR>form. <FONT 
face=Courier>copy </FONT>also relies on the fact that its input argument is 
terminated with a <FONT face=Courier>'\0'</FONT>, and copies this 
character</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 37787px"><NOBR>into the 
output.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 37826px"><NOBR>It is worth 
mentioning in passing that even a program as small as this one presents some 
sticky design</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 37846px"><NOBR>problems. For 
<B><SPAN class=goohl2>example</SPAN></B>, what should <FONT face=Courier>main 
</FONT>do if it encounters a line which is bigger than its limit? <FONT 
face=Courier>getline</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 37866px"><NOBR>works safely, 
in that it stops collecting when the array is full, even if no newline has been 
seen. By testing the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 37886px"><NOBR>length and the 
last character returned, <FONT face=Courier>main </FONT>can determine whether 
the line was too long, and then cope as it</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 37905px"><NOBR>wishes. In the 
interests of brevity, we have ignored this issue.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 37945px"><NOBR>There is no way 
for a user of <FONT face=Courier>getline </FONT>to know in advance how long an 
input line might be, so <FONT face=Courier>getline</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 37965px"><NOBR>checks for 
overflow. On the other hand, the user of <FONT face=Courier>copy </FONT>already 
knows (or can find out) how big the strings</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 37985px"><NOBR>are, so we have 
chosen not to add error checking to it.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 38024px"><NOBR><I><B>Exercise 
1−16. </B></I>Revise the main routine of the longest−line program so it will 
correctly print the length of</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 38044px"><NOBR>arbitrary long 
input lines, and as much as possible of the text.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 38084px"><NOBR><I><B>Exercise 
1−17. </B></I>Write a program to print all input lines that are longer than 80 
characters.</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 37045px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 38125px"><NOBR>1.8 Arguments − 
Call by Value</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 38125px"><NOBR>32</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 38191px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=33><B>Page 33</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 38283px"><NOBR><I><B>Exercise 
1−18. </B></I>Write a program to remove trailing blanks and tabs from each line 
of input, and to delete</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 38303px"><NOBR>entirely blank 
lines.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 38343px"><NOBR><I><B>Exercise 
1−19. </B></I>Write a function <FONT face=Courier>reverse(s) </FONT>that 
reverses the character string <FONT face=Courier>s</FONT>. Use it to write a 
program</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 38362px"><NOBR>that reverses 
its input a line at a time.</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=4><SPAN style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 38404px"><NOBR><B>1.10 
External Variables and Scope</B></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 38450px"><NOBR>The variables 
in <FONT face=Courier>main</FONT>, such as <FONT face=Courier>line</FONT>, <FONT 
face=Courier>longest</FONT>, etc., are private or local to <FONT 
face=Courier>main</FONT>. Because they are</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 38470px"><NOBR>declared within 
<FONT face=Courier>main</FONT>, no other function can have direct access to 
them. The same is true of the variables in</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 38490px"><NOBR>other 
functions; for <B><SPAN class=goohl2>example</SPAN></B>, the variable <FONT 
face=Courier>i </FONT>in <FONT face=Courier>getline </FONT>is unrelated to the 
<FONT face=Courier>i </FONT>in copy. Each local variable in</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 38510px"><NOBR>a function 
comes into existence only when the function is called, and disappears when the 
function is exited.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 38530px"><NOBR>This is why 
such variables are usually known as <I>automatic </I>variables, following 
terminology in other</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 38549px"><NOBR>languages. We 
will use the term automatic henceforth to refer to these local variables. (<A 
href="#64"></A><FONT 
face=Times color=#0000ff><A 
href="#64">Chapter 
4 </A></FONT>discusses</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 38569px"><NOBR>the <FONT 
face=Courier>static </FONT>storage class, in which local variables do retain 
their values between calls.)</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 38609px"><NOBR>Because 
automatic variables come and go with function invocation, they do not retain 
their values from one</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 38629px"><NOBR>call to the 
next, and must be explicitly set upon each entry. If they are not set, they will 
contain garbage.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 38668px"><NOBR>As an 
alternative to automatic variables, it is possible to define variables that are 
<I>external </I>to all functions, that</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 38688px"><NOBR>is, variables 
that can be accessed by name by any function. (This mechanism is rather like 
Fortran COMMON</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 38708px"><NOBR>or Pascal 
variables declared in the outermost block.) Because external variables are 
globally accessible, they</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 38728px"><NOBR>can be used 
instead of argument lists to communicate data between functions. Furthermore, 
because external</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 38747px"><NOBR>variables 
remain in existence permanently, rather than appearing and disappearing as 
functions are called and</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 38767px"><NOBR>exited, they 
retain their values even after the functions that set them have 
returned.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 38807px"><NOBR>An external 
variable must be <I>defined</I>, exactly once, outside of any function; this 
sets aside storage for it. The</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 38827px"><NOBR>variable must 
also be <I>declared </I>in each function that wants to access it; this states 
the type of the variable. The</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 38846px"><NOBR>declaration may 
be an explicit <FONT face=Courier>extern </FONT>statement or may be implicit 
from context. To make the discussion</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 38866px"><NOBR>concrete, let 
us rewrite the longest−line program with <FONT face=Courier>line</FONT>, <FONT 
face=Courier>longest</FONT>, and <FONT face=Courier>max </FONT>as external 
variables. This</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 38886px"><NOBR>requires 
changing the calls, declarations, and bodies of all three 
functions.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 38925px"><NOBR>#include 
&lt;stdio.h&gt;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 38958px"><NOBR>#define MAXLINE 
1000 /* maximum input line size */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 38991px"><NOBR>int max; /* 
maximum length seen so far */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 39008px"><NOBR>char 
line[MAXLINE]; /* current input line */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 39024px"><NOBR>char 
longest[MAXLINE]; /* longest line saved here */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 39057px"><NOBR>int 
getline(void);</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 39074px"><NOBR>void 
copy(void);</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 39107px"><NOBR>/* print 
longest input line; specialized version */</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 39123px"><NOBR>main()</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 39140px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 39156px"><NOBR>int 
len;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 39173px"><NOBR>extern int 
max;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 39189px"><NOBR>extern char 
longest[];</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 39222px"><NOBR>max = 
0;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 39239px"><NOBR>while ((len = 
getline()) &gt; 0)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 39255px"><NOBR>if (len &gt; 
max) {</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 39272px"><NOBR>max = 
len;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 38233px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 39313px"><NOBR>1.10 External 
Variables and Scope</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 39313px"><NOBR>33</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 39379px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=34><B>Page 34</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 232px; POSITION: absolute; TOP: 39471px"><NOBR>copy();</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 39488px"><NOBR>}</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 39504px"><NOBR>if (max &gt; 0) 
/* there was a line */</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 39521px"><NOBR>printf("%s", 
longest);</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 39537px"><NOBR>return 
0;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 39554px"><NOBR>}</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 39587px"><NOBR>/* getline: 
specialized version */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 39603px"><NOBR>int 
getline(void)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 39620px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 39636px"><NOBR>int c, 
i;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 39653px"><NOBR>extern char 
line[];</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 39686px"><NOBR>for (i = 0; i 
&lt; MAXLINE − 1</NOBR></DIV>
<DIV 
style="LEFT: 207px; POSITION: absolute; TOP: 39702px"><NOBR>&amp;(c=getchar)) != 
EOF &amp;c != '\n'; ++i)</NOBR></DIV>
<DIV style="LEFT: 240px; POSITION: absolute; TOP: 39719px"><NOBR>line[i] = 
c;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 39735px"><NOBR>if (c == '\n') 
{</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 39752px"><NOBR>line[i] = 
c;</NOBR></DIV>
<DIV 
style="LEFT: 199px; POSITION: absolute; TOP: 39768px"><NOBR>++i;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 39785px"><NOBR>}</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 39801px"><NOBR>line[i] = 
'\0';</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 39818px"><NOBR>return 
i;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 39834px"><NOBR>}</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 39867px"><NOBR>/* copy: 
specialized version */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 39884px"><NOBR>void 
copy(void)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 39900px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 39917px"><NOBR>int 
i;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 39933px"><NOBR>extern char 
line[], longest[];</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 39966px"><NOBR>i = 
0;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 39983px"><NOBR>while 
((longest[i] = line[i]) != '\0')</NOBR></DIV>
<DIV 
style="LEFT: 199px; POSITION: absolute; TOP: 39999px"><NOBR>++i;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 40016px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 40052px"><NOBR>The external 
variables in <FONT face=Courier>main</FONT>, <FONT face=Courier>getline 
</FONT>and <FONT face=Courier>copy </FONT>are defined by the first lines of the 
<B><SPAN class=goohl2>example</SPAN></B> above,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 40072px"><NOBR>which state 
their type and cause storage to be allocated for them. Syntactically, external 
definitions are just</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 40092px"><NOBR>like 
definitions of local variables, but since they occur outside of functions, the 
variables are external. Before</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 40111px"><NOBR>a function can 
use an external variable, the name of the variable must be made known to the 
function; the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 40131px"><NOBR>declaration is 
the same as before except for the added keyword <FONT 
face=Courier>extern</FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 40171px"><NOBR>In certain 
circumstances, the <FONT face=Courier>extern </FONT>declaration can be omitted. 
If the definition of the external variable</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 40191px"><NOBR>occurs in the 
source file before its use in a particular function, then there is no need for 
an <FONT face=Courier>extern</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 40210px"><NOBR>declaration in 
the function. The <FONT face=Courier>extern </FONT>declarations in <FONT 
face=Courier>main</FONT>, <FONT face=Courier>getline </FONT>and <FONT 
face=Courier>copy </FONT>are thus redundant. In</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 40230px"><NOBR>fact, common 
practice is to place definitions of all external variables at the beginning of 
the source file, and</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 40250px"><NOBR>then omit all 
extern declarations.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 40290px"><NOBR>If the program 
is in several source files, and a variable is defined in <I>file1 </I>and used 
in <I>file2 </I>and <I>file3</I>, then</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 40310px"><NOBR>extern <FONT 
face=Times>declarations are needed in </FONT><I><FONT face=Times>file2 
</FONT></I><FONT face=Times>and </FONT><I><FONT face=Times>file3 
</FONT></I><FONT face=Times>to connect the occurrences of the variable. The 
usual</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 40329px"><NOBR>practice is to 
collect <FONT face=Courier>extern </FONT>declarations of variables and functions 
in a separate file, historically called a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 40349px"><NOBR><I>header</I>, 
that is included by <FONT face=Courier>#include </FONT>at the front of each 
source file. The suffix <FONT face=Courier>.h </FONT>is conventional 
for</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 40369px"><NOBR>header names. 
The functions of the standard library, for <B><SPAN 
class=goohl2>example</SPAN></B>, are declared in headers like <FONT 
face=Courier>&lt;stdio.h&gt;</FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 40389px"><NOBR>This topic is 
discussed at length in <A 
href="#64"></A><FONT 
face=Times color=#0000ff><A 
href="#64">Chapter 
4</A></FONT>, and the library itself in <FONT face=Times color=#0000ff><A 
href="#138">Chapter 
7 </A></FONT>and <A 
href="#221"></A><FONT 
face=Times color=#0000ff><A 
href="#221">Appendix 
B</A></FONT><A 
href="#221"></A>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 40428px"><NOBR>Since the 
specialized versions of <FONT face=Courier>getline </FONT>and <FONT 
face=Courier>copy </FONT>have no arguments, logic would suggest that 
their</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 40448px"><NOBR>prototypes at 
the beginning of the file should be <FONT face=Courier>getline() </FONT>and 
<FONT face=Courier>copy()</FONT>. But for compatibility with older</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 39421px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 40501px"><NOBR>1.10 External 
Variables and Scope</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 40501px"><NOBR>34</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 40567px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=35><B>Page 35</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 40659px"><NOBR>C programs the 
standard takes an empty list as an old−style declaration, and turns off all 
argument list</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 40679px"><NOBR>checking; the 
word <FONT face=Courier>void </FONT>must be used for an explicitly empty list. 
We will discuss this further in <A 
href="#64"></A><FONT 
face=Times color=#0000ff><A 
href="#64">Chapter 
4</A></FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 40719px"><NOBR>You should note 
that we are using the words <I>definition </I>and <I>declaration </I>carefully 
when we refer to external</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 40738px"><NOBR>variables in 
this section.``Definition'' refers to the place where the variable is created or 
assigned storage;</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 40758px"><NOBR>``declaration'' 
refers to places where the nature of the variable is stated but no storage is 
allocated.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 40798px"><NOBR>By the way, 
there is a tendency to make everything in sight an <FONT face=Courier>extern 
</FONT>variable because it appears to</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 40818px"><NOBR>simplify 
communications − argument lists are short and variables are always there when 
you want them. But</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 40837px"><NOBR>external 
variables are always there even when you don't want them. Relying too heavily on 
external variables</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 40857px"><NOBR>is fraught with 
peril since it leads to programs whose data connections are not all obvious − 
variables can be</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 40877px"><NOBR>changed in 
unexpected and even inadvertent ways, and the program is hard to modify. The 
second version of</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 40897px"><NOBR>the 
longest−line program is inferior to the first, partly for these reasons, and 
partly because it destroys the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 40917px"><NOBR>generality of 
two useful functions by writing into them the names of the variables they 
manipulate.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 40956px"><NOBR>At this point 
we have covered what might be called the conventional core of C. With this 
handful of building</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 40976px"><NOBR>blocks, it's 
possible to write useful programs of considerable size, and it would probably be 
a good idea if you</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 40996px"><NOBR>paused long 
enough to do so. These exercises suggest programs of somewhat greater complexity 
than the ones</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 41016px"><NOBR>earlier in this 
chapter.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 41055px"><NOBR><I><B>Exercise 
1−20. </B></I>Write a program <FONT face=Courier>detab </FONT>that replaces tabs 
in the input with the proper number of blanks to</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 41075px"><NOBR>space to the 
next tab stop. Assume a fixed set of tab stops, say every <I>n </I>columns. 
Should <I>n </I>be a variable or a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 41095px"><NOBR>symbolic 
parameter?</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 41134px"><NOBR><I><B>Exercise 
1−21. </B></I>Write a program <FONT face=Courier>entab </FONT>that replaces 
strings of blanks by the minimum number of tabs and</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 41154px"><NOBR>blanks to 
achieve the same spacing. Use the same tab stops as for <FONT 
face=Courier>detab</FONT>. When either a tab or a single blank</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 41174px"><NOBR>would suffice 
to reach a tab stop, which should be given preference?</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 41214px"><NOBR><I><B>Exercise 
1−22. </B></I>Write a program to ``fold'' long input lines into two or more 
shorter lines after the last</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 41233px"><NOBR>non−blank 
character that occurs before the <I>n</I>−th column of input. Make sure your 
program does something</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 41253px"><NOBR>intelligent 
with very long lines, and if there are no blanks or tabs before the specified 
column.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 41293px"><NOBR><I><B>Exercise 
1−23. </B></I>Write a program to remove all comments from a C program. Don't 
forget to handle quoted</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 41313px"><NOBR>strings and 
character constants properly. C comments don't nest.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 41352px"><NOBR><I><B>Exercise 
1−24. </B></I>Write a program to check a C program for rudimentary syntax errors 
like unmatched</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 41372px"><NOBR>parentheses, 
brackets and braces. Don't forget about quotes, both single and double, escape 
sequences, and</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 41392px"><NOBR>comments. (This 
program is hard if you do it in full 
generality.)</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff 
size=3><SPAN style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 311px; POSITION: absolute; TOP: 41434px"><NOBR><A 
href="#8">Back 
to Introduction </A><FONT face=Times color=#000000>−− </FONT><A 
href="#1">Index 
</A><FONT face=Times color=#000000>−− </FONT><A 
href="#36">Chapter 
2</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 40609px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 41689px"><NOBR>1.10 External 
Variables and Scope</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 41689px"><NOBR>35</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 41755px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=36><B>Page 36</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 320px; POSITION: absolute; TOP: 41870px"><NOBR><A 
href="#11">Back 
to Chapter 1 </A><FONT face=Times color=#000000>−− </FONT><A 
href="#1">Index 
</A><FONT face=Times color=#000000>−− </FONT><A 
href="#53">Chapter 
3</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=4><SPAN 
style="FONT-SIZE: 26px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 41915px"><NOBR><B>Chapter 2 − 
Types, Operators and Expressions</B></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 41967px"><NOBR>Variables and 
constants are the basic data objects manipulated in a program. Declarations list 
the variables to</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 41986px"><NOBR>be used, and 
state what type they have and perhaps what their initial values are. Operators 
specify what is to</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 42006px"><NOBR>be done to 
them. Expressions combine variables and constants to produce new values. The 
type of an object</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 42026px"><NOBR>determines the 
set of values it can have and what operations can be performed on it. These 
building blocks are</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 42046px"><NOBR>the topics of 
this chapter.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 42085px"><NOBR>The ANSI 
standard has made many small changes and additions to basic types and 
expressions. There are</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 42105px"><NOBR>now <FONT 
face=Courier>signed </FONT>and <FONT face=Courier>unsigned </FONT>forms of all 
integer types, and notations for unsigned constants and</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 42125px"><NOBR>hexadecimal 
character constants. Floating−point operations may be done in single precision; 
there is also a</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 42146px"><NOBR>long <FONT 
face=Times>double type for extended precision. String constants may be 
concatenated at compile time.</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 42165px"><NOBR>Enumerations 
have become part of the language, formalizing a feature of long standing. 
Objects may be</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 42184px"><NOBR>declared <FONT 
face=Courier>const</FONT>, which prevents them from being changed. The rules for 
automatic coercions among</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 42204px"><NOBR>arithmetic 
types have been augmented to handle the richer set of 
types.</NOBR></DIV></SPAN></FONT><FONT face=Times size=4><SPAN 
style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 42245px"><NOBR><B>2.1 Variable 
Names</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 42292px"><NOBR>Although we 
didn't say so in <FONT face=Times color=#0000ff><A 
href="#11">Chapter 
1</A></FONT>, there are some restrictions on the names of variables and 
symbolic</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 42312px"><NOBR>constants. 
Names are made up of letters and digits; the first character must be a letter. 
The underscore ``<FONT face=Courier>_</FONT>''</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 42332px"><NOBR>counts as a 
letter; it is sometimes useful for improving the readability of long variable 
names. Don't begin</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 42352px"><NOBR>variable names 
with underscore, however, since library routines often use such names. Upper and 
lower case</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 42371px"><NOBR>letters are 
distinct, so <FONT face=Courier>x </FONT>and <FONT face=Courier>X </FONT>are two 
different names. Traditional C practice is to use lower case for 
variable</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 42391px"><NOBR>names, and all 
upper case for symbolic constants.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 42431px"><NOBR>At least the 
first 31 characters of an internal name are significant. For function names and 
external variables,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 42451px"><NOBR>the number may 
be less than 31, because external names may be used by assemblers and loaders 
over which</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 42470px"><NOBR>the language 
has no control. For external names, the standard guarantees uniqueness only for 
6 characters and</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 42490px"><NOBR>a single case. 
Keywords like <FONT face=Courier>if</FONT>, <FONT face=Courier>else</FONT>, 
<FONT face=Courier>int</FONT>, <FONT face=Courier>float</FONT>, etc., are 
reserved: you can't use them as variable</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 42510px"><NOBR>names. They 
must be in lower case.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 42550px"><NOBR>It's wise to 
choose variable names that are related to the purpose of the variable, and that 
are unlikely to get</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 42569px"><NOBR>mixed up 
typographically. We tend to use short names for local variables, especially loop 
indices, and longer</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 42589px"><NOBR>names for 
external variables.</NOBR></DIV></SPAN></FONT><FONT face=Times size=4><SPAN 
style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 42630px"><NOBR><B>2.2 Data 
Types and Sizes</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 42677px"><NOBR>There are only 
a few basic data types in C:</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 174px; POSITION: absolute; TOP: 42720px"><NOBR>int</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 239px; POSITION: absolute; TOP: 42719px"><NOBR>an integer, 
typically reflecting the natural size of integers on the host 
machine</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 174px; POSITION: absolute; TOP: 42746px"><NOBR>float <FONT 
face=Times>single−precision floating point</FONT></NOBR></DIV>
<DIV style="LEFT: 174px; POSITION: absolute; TOP: 42772px"><NOBR>double <FONT 
face=Times>double−precision floating 
point</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 42795px"><NOBR>In addition, 
there are a number of qualifiers that can be applied to these basic types. <FONT 
face=Courier>short </FONT>and <FONT face=Courier>long </FONT>apply</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 42815px"><NOBR>to 
integers:</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 41797px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 42877px"><NOBR>Chapter 2 − 
Types, Operators and Expressions</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 42877px"><NOBR>36</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 42943px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=37><B>Page 37</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 43035px"><NOBR>short int 
sh;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 43052px"><NOBR>long int 
counter;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 43088px"><NOBR>The word <FONT 
face=Courier>int </FONT>can be omitted in such declarations, and typically it 
is.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 43128px"><NOBR>The intent is 
that <FONT face=Courier>short </FONT>and <FONT face=Courier>long </FONT>should 
provide different lengths of integers where practical; <FONT face=Courier>int 
</FONT>will</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 43147px"><NOBR>normally be the 
natural size for a particular machine. <FONT face=Courier>short </FONT>is often 
16 bits long, and <FONT face=Courier>int </FONT>either 16 or 32</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 43167px"><NOBR>bits. Each 
compiler is free to choose appropriate sizes for its own hardware, subject only 
to the the restriction</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 43187px"><NOBR>that <FONT 
face=Courier>short</FONT>s and ints are at least 16 bits, <FONT 
face=Courier>long</FONT>s are at least 32 bits, and <FONT face=Courier>short 
</FONT>is no longer than <FONT face=Courier>int</FONT>, which</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 43207px"><NOBR>is no longer 
than <FONT face=Courier>long</FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 43246px"><NOBR>The qualifier 
<FONT face=Courier>signed </FONT>or <FONT face=Courier>unsigned </FONT>may be 
applied to <FONT face=Courier>char </FONT>or any integer. <FONT 
face=Courier>unsigned </FONT>numbers are</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 43266px"><NOBR>always positive 
or zero, and obey the laws of arithmetic modulo 
<I>2</I></NOBR></DIV></SPAN></FONT><FONT face=Times size=2><SPAN 
style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 543px; POSITION: absolute; TOP: 43262px"><NOBR><I>n</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 549px; POSITION: absolute; TOP: 43266px"><NOBR>, where <I>n 
</I>is the number of bits in the type.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 43286px"><NOBR>So, for 
instance, if <FONT face=Courier>char</FONT>s are 8 bits, <FONT 
face=Courier>unsigned char </FONT>variables have values between 0 and 255, 
while</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 43307px"><NOBR>signed 
char<FONT face=Times>s have values between −128 and 127 (in a two's complement 
machine.) Whether plain </FONT>char<FONT 
face=Times>s</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 43326px"><NOBR>are signed or 
unsigned is machine−dependent, but printable characters are always 
positive.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 43365px"><NOBR>The type <FONT 
face=Courier>long double </FONT>specifies extended−precision floating point. As 
with integers, the sizes of</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 43385px"><NOBR>floating−point 
objects are implementation−defined; <FONT face=Courier>float</FONT>, <FONT 
face=Courier>double </FONT>and <FONT face=Courier>long double </FONT>could 
represent</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 43405px"><NOBR>one, two or 
three distinct sizes.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 43444px"><NOBR>The standard 
headers <FONT face=Courier>&lt;limits.h&gt; </FONT>and <FONT 
face=Courier>&lt;float.h&gt; </FONT>contain symbolic constants for all of these 
sizes, along</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 43464px"><NOBR>with other 
properties of the machine and compiler. These are discussed in <FONT face=Times 
color=#0000ff><A 
href="#221">Appendix 
B</A></FONT><A 
href="#221"></A>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 43504px"><NOBR><I><B>Exercise 
2−1. </B></I>Write a program to determine the ranges of <FONT 
face=Courier>char</FONT>, <FONT face=Courier>short</FONT>, <FONT 
face=Courier>int</FONT>, and <FONT face=Courier>long </FONT>variables, 
both</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 43525px"><NOBR>signed <FONT 
face=Times>and </FONT>unsigned<FONT face=Times>, by printing appropriate values 
from standard headers and by direct 
computation.</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 43543px"><NOBR>Harder if you 
compute them: determine the ranges of the various floating−point 
types.</NOBR></DIV></SPAN></FONT><FONT face=Times size=4><SPAN 
style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 43585px"><NOBR><B>2.3 
Constants</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 43631px"><NOBR>An integer 
constant like <FONT face=Courier>1234 </FONT>is an <FONT 
face=Courier>int</FONT>. A <FONT face=Courier>long </FONT>constant is written 
with a terminal <FONT face=Courier>l </FONT>(ell) or <FONT 
face=Courier>L</FONT>, as in</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 43652px"><NOBR>123456789L<FONT 
face=Times>; an integer constant too big to fit into an </FONT>int <FONT 
face=Times>will also be taken as a long. Unsigned 
constants</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 43671px"><NOBR>are written 
with a terminal <FONT face=Courier>u </FONT>or <FONT face=Courier>U</FONT>, and 
the suffix <FONT face=Courier>ul </FONT>or <FONT face=Courier>UL 
</FONT>indicates <FONT face=Courier>unsigned long</FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 43711px"><NOBR>Floating−point 
constants contain a decimal point (<FONT face=Courier>123.4</FONT>) or an 
exponent (<FONT face=Courier>1e−2</FONT>) or both; their type 
is</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 43731px"><NOBR>double<FONT 
face=Times>, unless suffixed. The suffixes </FONT>f <FONT face=Times>or </FONT>F 
<FONT face=Times>indicate a </FONT>float <FONT face=Times>constant; </FONT>l 
<FONT face=Times>or </FONT>L <FONT face=Times>indicate a </FONT>long double<FONT 
face=Times>.</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 43770px"><NOBR>The value of an 
integer can be specified in octal or hexadecimal instead of decimal. A leading 
<FONT face=Courier>0 </FONT>(zero) on an</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 43790px"><NOBR>integer 
constant means octal; a leading <FONT face=Courier>0x </FONT>or <FONT 
face=Courier>0X </FONT>means hexadecimal. For <B><SPAN 
class=goohl2>example</SPAN></B>, decimal 31 can be written</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 43810px"><NOBR>as <FONT 
face=Courier>037 </FONT>in octal and <FONT face=Courier>0x1f </FONT>or <FONT 
face=Courier>0x1F </FONT>in hex. Octal and hexadecimal constants may also be 
followed by <FONT face=Courier>L </FONT>to</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 43829px"><NOBR>make them <FONT 
face=Courier>long </FONT>and <FONT face=Courier>U </FONT>to make them <FONT 
face=Courier>unsigned</FONT>: <FONT face=Courier>0XFUL </FONT>is an <I>unsigned 
long </I>constant with value 15</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 43849px"><NOBR>decimal.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 43889px"><NOBR>A <FONT 
face=Courier>character constant </FONT>is an integer, written as one character 
within single quotes, such as <FONT face=Courier>'x'</FONT>. The</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 43909px"><NOBR>value of a 
character constant is the numeric value of the character in the machine's 
character set. For <B><SPAN class=goohl2>example</SPAN></B>,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 43928px"><NOBR>in the ASCII 
character set the character constant <FONT face=Courier>'0' </FONT>has the value 
48, which is unrelated to the numeric</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 43948px"><NOBR>value 0. If we 
write <FONT face=Courier>'0' </FONT>instead of a numeric value like 48 that 
depends on the character set, the program is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 43968px"><NOBR>independent of 
the particular value and easier to read. Character constants participate in 
numeric operations</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 43988px"><NOBR>just as any 
other integers, although they are most often used in comparisons with other 
characters.</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 42985px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 44065px"><NOBR>2.3 
Constants</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 44065px"><NOBR>37</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 44131px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=38><B>Page 38</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 44223px"><NOBR>Certain 
characters can be represented in character and string constants by escape 
sequences like <FONT face=Courier>\n </FONT>(newline);</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 44243px"><NOBR>these sequences 
look like two characters, but represent only one. In addition, an arbitrary 
byte−sized bit</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 44263px"><NOBR>pattern can be 
specified by</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 44302px"><NOBR>'\<I>ooo</I>'</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 44339px"><NOBR>where <I>ooo 
</I>is one to three octal digits (0...7) or by</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 44378px"><NOBR>'\x<I>hh</I>'</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 44415px"><NOBR>where <I>hh 
</I>is one or more hexadecimal digits (<FONT face=Courier>0...9, a...f, 
A...F</FONT>). So we might write</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 44454px"><NOBR>#define VTAB 
'\013' /* ASCII vertical tab */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 44471px"><NOBR>#define BELL 
'\007' /* ASCII bell character */</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 44507px"><NOBR>or, in 
hexadecimal,</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 44546px"><NOBR>#define VTAB 
'\xb' /* ASCII vertical tab */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 44563px"><NOBR>#define BELL 
'\x7' /* ASCII bell character */</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 44599px"><NOBR>The complete 
set of escape sequences is</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 306px; POSITION: absolute; TOP: 44642px"><NOBR>\b <FONT 
face=Times>backspace</FONT></NOBR></DIV>
<DIV style="LEFT: 457px; POSITION: absolute; TOP: 44642px"><NOBR>\? <FONT 
face=Times>question mark</FONT></NOBR></DIV>
<DIV style="LEFT: 306px; POSITION: absolute; TOP: 44668px"><NOBR>\f <FONT 
face=Times>formfeed</FONT></NOBR></DIV>
<DIV style="LEFT: 467px; POSITION: absolute; TOP: 44668px"><NOBR>\' <FONT 
face=Times>single quote</FONT></NOBR></DIV>
<DIV style="LEFT: 306px; POSITION: absolute; TOP: 44695px"><NOBR>\n <FONT 
face=Times>newline</FONT></NOBR></DIV>
<DIV style="LEFT: 457px; POSITION: absolute; TOP: 44695px"><NOBR>\" <FONT 
face=Times>double quote</FONT></NOBR></DIV>
<DIV style="LEFT: 306px; POSITION: absolute; TOP: 44721px"><NOBR>\r <FONT 
face=Times>carriage return</FONT></NOBR></DIV>
<DIV style="LEFT: 457px; POSITION: absolute; TOP: 44721px"><NOBR>\<I><FONT 
face=Times>ooo</FONT></I><FONT face=Times>octal number</FONT></NOBR></DIV>
<DIV style="LEFT: 306px; POSITION: absolute; TOP: 44747px"><NOBR>\t <FONT 
face=Times>horizontal tab</FONT></NOBR></DIV>
<DIV style="LEFT: 457px; POSITION: absolute; TOP: 44747px"><NOBR>\x<I><FONT 
face=Times>hh</FONT></I><FONT face=Times>hexadecimal number </FONT></NOBR></DIV>
<DIV style="LEFT: 306px; POSITION: absolute; TOP: 44773px"><NOBR>\v <FONT 
face=Times>vertical tab</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 44797px"><NOBR>The character 
constant <FONT face=Courier>'\0' </FONT>represents the character with value 
zero, the null character. <FONT face=Courier>'\0' </FONT>is often</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 44816px"><NOBR>written instead 
of <FONT face=Courier>0 </FONT>to emphasize the character nature of some 
expression, but the numeric value is just 0.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 44856px"><NOBR>A <I>constant 
expression </I>is an expression that involves only constants. Such expressions 
may be evaluated at</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 44876px"><NOBR>during 
compilation rather than run−time, and accordingly may be used in any place that 
a constant can occur,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 44896px"><NOBR>as 
in</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 44935px"><NOBR>#define MAXLINE 
1000</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 44951px"><NOBR>char 
line[MAXLINE+1];</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 44988px"><NOBR>or</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 45027px"><NOBR>#define LEAP 1 
/* in leap years */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 45044px"><NOBR>int 
days[31+28+LEAP+31+30+31+30+31+31+30+31+30+31];</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 45080px"><NOBR>A <I>string 
constant</I>, or <I>string literal</I>, is a sequence of zero or more characters 
surrounded by double quotes, as in</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 45120px"><NOBR>"I am a 
string"</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 45156px"><NOBR>or</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 45196px"><NOBR>"" /* the empty 
string */</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 44173px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 45253px"><NOBR>2.3 
Constants</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 45253px"><NOBR>38</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 45319px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=39><B>Page 39</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 45411px"><NOBR>The quotes are 
not part of the string, but serve only to delimit it. The same escape sequences 
used in character</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 45431px"><NOBR>constants apply 
in strings; <FONT face=Courier>\" </FONT>represents the double−quote character. 
String constants can be concatenated at</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 45451px"><NOBR>compile 
time:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 45490px"><NOBR>"hello, " 
"world"</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 45527px"><NOBR>is equivalent 
to</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 45566px"><NOBR>"hello, 
world"</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 45603px"><NOBR>This is useful 
for splitting up long strings across several source lines.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 45642px"><NOBR>Technically, a 
string constant is an array of characters. The internal representation of a 
string has a null</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 45662px"><NOBR>character <FONT 
face=Courier>'\0' </FONT>at the end, so the physical storage required is one 
more than the number of characters written</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 45682px"><NOBR>between the 
quotes. This representation means that there is no limit to how long a string 
can be, but programs</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 45702px"><NOBR>must scan a 
string completely to determine its length. The standard library function <FONT 
face=Courier>strlen(s) </FONT>returns the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 45721px"><NOBR>length of its 
character string argument <FONT face=Courier>s</FONT>, excluding the terminal 
<FONT face=Courier>'\0'</FONT>. Here is our 
version:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 45761px"><NOBR>/* strlen: 
return length of s */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 45777px"><NOBR>int strlen(char 
s[])</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 45794px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 45810px"><NOBR>int 
i;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 45843px"><NOBR>while (s[i] != 
'\0')</NOBR></DIV>
<DIV 
style="LEFT: 199px; POSITION: absolute; TOP: 45860px"><NOBR>++i;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 45876px"><NOBR>return 
i;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 45893px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 45930px"><NOBR>strlen <FONT 
face=Times>and other string functions are declared in the standard header 
</FONT>&lt;string.h&gt;<FONT face=Times>.</FONT></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 45969px"><NOBR>Be careful to 
distinguish between a character constant and a string that contains a single 
character: <FONT face=Courier>'x' </FONT>is not</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 45989px"><NOBR>the same as 
<FONT face=Courier>"x"</FONT>. The former is an integer, used to produce the 
numeric value of the letter <I>x </I>in the machine's</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 46009px"><NOBR>character set. 
The latter is an array of characters that contains one character (the letter 
<I>x</I>) and a <FONT face=Courier>'\0'</FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 46048px"><NOBR>There is one 
other kind of constant, the <I>enumeration constant</I>. An enumeration is a 
list of constant integer</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 46068px"><NOBR>values, as 
in</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 46107px"><NOBR>enum boolean { 
NO, YES };</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 46144px"><NOBR>The first name 
in an <FONT face=Courier>enum </FONT>has value 0, the next 1, and so on, unless 
explicit values are specified. If not all</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 46164px"><NOBR>values are 
specified, unspecified values continue the progression from the last specified 
value, as the second</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 46183px"><NOBR>of these 
examples:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 46223px"><NOBR>enum escapes { 
BELL = '\a', BACKSPACE = '\b', TAB = '\t',</NOBR></DIV>
<DIV style="LEFT: 257px; POSITION: absolute; TOP: 46239px"><NOBR>NEWLINE = '\n', 
VTAB = '\v', RETURN = '\r' };</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 46272px"><NOBR>enum months { 
JAN = 1, FEB, MAR, APR, MAY, JUN,</NOBR></DIV>
<DIV style="LEFT: 249px; POSITION: absolute; TOP: 46289px"><NOBR>JUL, AUG, SEP, 
OCT, NOV, DEC };</NOBR></DIV>
<DIV style="LEFT: 298px; POSITION: absolute; TOP: 46305px"><NOBR>/* FEB = 2, MAR 
= 3, etc. */</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 46342px"><NOBR>Names in 
different enumerations must be distinct. Values need not be distinct in the same 
enumeration.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 46381px"><NOBR>Enumerations 
provide a convenient way to associate constant values with names, an alternative 
to <FONT face=Courier>#define</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 46401px"><NOBR>with the 
advantage that the values can be generated for you. Although variables of <FONT 
face=Courier>enum </FONT>types may be</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 45361px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 46441px"><NOBR>2.3 
Constants</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 46441px"><NOBR>39</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 46507px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=40><B>Page 40</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 46599px"><NOBR>declared, 
compilers need not check that what you store in such a variable is a valid value 
for the enumeration.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 46619px"><NOBR>Nevertheless, 
enumeration variables offer the chance of checking and so are often better than 
<FONT face=Courier>#define</FONT>s. In</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 46639px"><NOBR>addition, a 
debugger may be able to print values of enumeration variables in their symbolic 
form.</NOBR></DIV></SPAN></FONT><FONT face=Times size=4><SPAN 
style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 46680px"><NOBR><B>2.4 
Declarations</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 46727px"><NOBR>All variables 
must be declared before use, although certain declarations can be made 
implicitly by content. A</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 46747px"><NOBR>declaration 
specifies a type, and contains a list of one or more variables of that type, as 
in</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 46786px"><NOBR>int lower, 
upper, step;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 46802px"><NOBR>char c, 
line[1000];</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 46839px"><NOBR>Variables can 
be distributed among declarations in any fashion; the lists above could well be 
written as</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 46878px"><NOBR>int 
lower;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 46895px"><NOBR>int 
upper;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 46911px"><NOBR>int 
step;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 46928px"><NOBR>char 
c;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 46944px"><NOBR>char 
line[1000];</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 46981px"><NOBR>The latter form 
takes more space, but is convenient for adding a comment to each declaration for 
subsequent</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 47001px"><NOBR>modifications.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 47040px"><NOBR>A variable may 
also be initialized in its declaration. If the name is followed by an equals 
sign and an</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 47060px"><NOBR>expression, the 
expression serves as an initializer, as in</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 47099px"><NOBR>char esc = 
'\\';</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 47116px"><NOBR>int i = 
0;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 47132px"><NOBR>int limit = 
MAXLINE+1;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 47149px"><NOBR>float eps = 
1.0e−5;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 47185px"><NOBR>If the variable 
in question is not automatic, the initialization is done once only, 
conceptionally before the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 47205px"><NOBR>program starts 
executing, and the initializer must be a constant expression. An explicitly 
initialized automatic</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 47225px"><NOBR>variable is 
initialized each time the function or block it is in is entered; the initializer 
may be any expression.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 47245px"><NOBR>External and 
static variables are initialized to zero by default. Automatic variables for 
which is no explicit</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 47265px"><NOBR>initializer 
have undefined (i.e., garbage) values.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 47304px"><NOBR>The qualifier 
<FONT face=Courier>const </FONT>can be applied to the declaration of any 
variable to specify that its value will not be</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 47324px"><NOBR>changed. For an 
array, the <FONT face=Courier>const </FONT>qualifier says that the elements will 
not be altered.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 47363px"><NOBR>const double e 
= 2.71828182845905;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 47380px"><NOBR>const char 
msg[] = "warning: ";</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 47416px"><NOBR>The <FONT 
face=Courier>const </FONT>declaration can also be used with array arguments, to 
indicate that the function does not change</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 47436px"><NOBR>that 
array:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 47476px"><NOBR>int 
strlen(const char[]);</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 47512px"><NOBR>The result is 
implementation−defined if an attempt is made to change a <FONT 
face=Courier>const</FONT>.</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 46549px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 47629px"><NOBR>2.4 
Declarations</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 47629px"><NOBR>40</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 47695px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=41><B>Page 41</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=4><SPAN style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 47789px"><NOBR><B>2.5 
Arithmetic Operators</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 47836px"><NOBR>The binary 
arithmetic operators are <FONT face=Courier>+</FONT>, <FONT 
face=Courier>−</FONT>, <FONT face=Courier>*</FONT>, <FONT face=Courier>/</FONT>, 
and the modulus operator <FONT face=Courier>%</FONT>. Integer division truncates 
any</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 47855px"><NOBR>fractional 
part. The expression</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 47895px"><NOBR>x % 
y</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 47931px"><NOBR>produces the 
remainder when <FONT face=Courier>x </FONT>is divided by <FONT 
face=Courier>y</FONT>, and thus is zero when <FONT face=Courier>y </FONT>divides 
<FONT face=Courier>x </FONT>exactly. For <B><SPAN 
class=goohl2>example</SPAN></B>, a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 47951px"><NOBR>year is a leap 
year if it is divisible by 4 but not by 100, except that years divisible by 400 
<I>are </I>leap years.</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 47971px"><NOBR>Therefore</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 48010px"><NOBR>if ((year % 4 
== 0 &amp;year % 100 != 0) || year % 400 == 0)</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 48027px"><NOBR>printf("%d is a 
leap year\n", year);</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 48043px"><NOBR>else</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 48060px"><NOBR>printf("%d is 
not a leap year\n", year);</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 48096px"><NOBR>The <FONT 
face=Courier>% </FONT>operator cannot be applied to a <FONT face=Courier>float 
</FONT>or <FONT face=Courier>double</FONT>. The direction of truncation for 
<FONT face=Courier>/ </FONT>and the sign of</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 48116px"><NOBR>the result for 
<FONT face=Courier>% </FONT>are machine−dependent for negative operands, as is 
the action taken on overflow or</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 48136px"><NOBR>underflow.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 48175px"><NOBR>The binary 
<FONT face=Courier>+ </FONT>and <FONT face=Courier>− </FONT>operators have the 
same precedence, which is lower than the precedence of <FONT 
face=Courier>*</FONT>, <FONT face=Courier>/ </FONT>and <FONT 
face=Courier>%</FONT>,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 48195px"><NOBR>which is in 
turn lower than unary <FONT face=Courier>+ </FONT>and <FONT 
face=Courier>−</FONT>. Arithmetic operators associate left to 
right.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 48235px"><NOBR>Table 2.1 at 
the end of this chapter summarizes precedence and associativity for all 
operators.</NOBR></DIV></SPAN></FONT><FONT face=Times size=4><SPAN 
style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 48276px"><NOBR><B>2.6 
Relational and Logical Operators</B></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 48323px"><NOBR>The relational 
operators are</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 48362px"><NOBR>&gt; &gt;= &lt; 
&lt;=</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 48399px"><NOBR>They all have 
the same precedence. Just below them in precedence are the equality 
operators:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 48438px"><NOBR>== 
!=</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 48475px"><NOBR>Relational 
operators have lower precedence than arithmetic operators, so an expression like 
<FONT face=Courier>i &lt; lim−1 </FONT>is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 48494px"><NOBR>taken as <FONT 
face=Courier>i &lt; (lim−1)</FONT>, as would be expected.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 48534px"><NOBR>More 
interesting are the logical operators <FONT face=Courier>and ||. Expressions 
connected by &amp;&amp; or || are</FONT></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 48555px"><NOBR>evaluated left 
to right, and evaluation stops as soon as the truth or</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 48574px"><NOBR>falsehood of 
the result is known. Most C programs rely on these</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 48594px"><NOBR>properties. For 
<B><SPAN class=goohl2>example</SPAN></B>, here is a loop from the input function 
getline</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 48614px"><NOBR>that we wrote 
in <A 
href="#11"></A><FONT 
face=Courier color=#0000ff><A 
href="#11">Chapter 
1</A></FONT>:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 48653px"><NOBR>for (i=0; i 
&lt; lim−1 &amp;(c=getchar()) != '\n' &amp;c != EOF; ++i)</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 48669px"><NOBR>s[i] = 
c;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 48706px"><NOBR>Before reading 
a new character it is necessary to check that there is room to store it in the 
array <FONT face=Courier>s</FONT>, so the test</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 48726px"><NOBR>i &lt; lim−1 
<I><FONT face=Times>must </FONT></I><FONT face=Times>be made first. Moreover, if 
this test fails, we must not go on and read another 
character.</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 48765px"><NOBR>Similarly, it 
would be unfortunate if <FONT face=Courier>c </FONT>were tested against <FONT 
face=Courier>EOF </FONT>before <FONT face=Courier>getchar </FONT>is called; 
therefore the call</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 47737px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 48817px"><NOBR>2.5 Arithmetic 
Operators</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 48817px"><NOBR>41</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 48883px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=42><B>Page 42</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 48975px"><NOBR>and assignment 
must occur before the character in <FONT face=Courier>c </FONT>is 
tested.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 49015px"><NOBR>The precedence 
of <FONT face=Courier>&amp;&amp; </FONT>is higher than that of <FONT 
face=Courier>||</FONT>, and both are lower than relational and equality 
operators, so</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 49035px"><NOBR>expressions 
like</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 49074px"><NOBR>i &lt; lim−1 
&amp;(c=getchar()) != '\n' &amp;c != EOF</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 49111px"><NOBR>need no extra 
parentheses. But since the precedence of <FONT face=Courier>!= </FONT>is higher 
than assignment, parentheses are needed</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 49130px"><NOBR>in</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 49170px"><NOBR>(c=getchar()) 
!= '\n'</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 49206px"><NOBR>to achieve the 
desired result of assignment to <FONT face=Courier>c </FONT>and then comparison 
with <FONT face=Courier>'\n'</FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 49246px"><NOBR>By definition, 
the numeric value of a relational or logical expression is 1 if the relation is 
true, and 0 if the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 49266px"><NOBR>relation is 
false.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 49305px"><NOBR>The unary 
negation operator <FONT face=Courier>! </FONT>converts a non−zero operand into 
0, and a zero operand in 1. A common use of</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 49326px"><NOBR>! <FONT 
face=Times>is in constructions like</FONT></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 49364px"><NOBR>if 
(!valid)</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 49401px"><NOBR>rather 
than</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 49440px"><NOBR>if (valid == 
0)</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 49477px"><NOBR>It's hard to 
generalize about which form is better. Constructions like <FONT 
face=Courier>!valid </FONT>read nicely (``if not valid''), but</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 49497px"><NOBR>more 
complicated ones can be hard to understand.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 49536px"><NOBR><I><B>Exercise 
2−2. </B></I>Write a loop equivalent to the <FONT face=Courier>for </FONT>loop 
above without using <FONT face=Courier>&amp;&amp; </FONT>or <FONT 
face=Courier>||</FONT>.</NOBR></DIV></SPAN></FONT><FONT face=Times size=4><SPAN 
style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 49577px"><NOBR><B>2.7 Type 
Conversions</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 49624px"><NOBR>When an 
operator has operands of different types, they are converted to a common type 
according to a small</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 49644px"><NOBR>number of 
rules. In general, the only automatic conversions are those that convert a 
``narrower'' operand into a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 49664px"><NOBR>``wider'' one 
without losing information, such as converting an integer into floating point in 
an expression like</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 49684px"><NOBR>f + i<FONT 
face=Times>. Expressions that don't make sense, like using a </FONT>float <FONT 
face=Times>as a subscript, are disallowed. 
Expressions</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 49703px"><NOBR>that might lose 
information, like assigning a longer integer type to a shorter, or a 
floating−point type to an</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 49723px"><NOBR>integer, may 
draw a warning, but they are not illegal.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 49763px"><NOBR>A <FONT 
face=Courier>char </FONT>is just a small integer, so <FONT 
face=Courier>char</FONT>s may be freely used in arithmetic expressions. This 
permits</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 49783px"><NOBR>considerable 
flexibility in certain kinds of character transformations. One is exemplified by 
this naive</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 49802px"><NOBR>implementation 
of the function <FONT face=Courier>atoi</FONT>, which converts a string of 
digits into its numeric equivalent.</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 49842px"><NOBR>/* atoi: 
convert s to integer */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 49858px"><NOBR>int atoi(char 
s[])</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 49875px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 49891px"><NOBR>int i, 
n;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 49924px"><NOBR>n = 
0;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 49941px"><NOBR>for (i = 0; 
s[i] &gt;= '0' &amp;s[i] &lt;= '9'; ++i)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 49957px"><NOBR>n = 10 * n + 
(s[i] − '0');</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 48925px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 50005px"><NOBR>2.7 Type 
Conversions</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 50005px"><NOBR>42</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 50071px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=43><B>Page 43</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 50163px"><NOBR>return 
n;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 50180px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 50216px"><NOBR>As we discussed 
in <A 
href="#11"></A><FONT 
face=Times color=#0000ff><A 
href="#11">Chapter 
1</A></FONT><A 
href="#11"></A>, 
the expression</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 141px; POSITION: absolute; TOP: 50255px"><NOBR>s[i] − 
'0'</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 50292px"><NOBR>gives the 
numeric value of the character stored in <FONT face=Courier>s[i]</FONT>, because 
the values of <FONT face=Courier>'0'</FONT>, <FONT face=Courier>'1'</FONT>, 
etc., form a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 50312px"><NOBR>contiguous 
increasing sequence.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 50351px"><NOBR>Another 
<B><SPAN class=goohl2>example</SPAN></B> of <FONT face=Courier>char </FONT>to 
<FONT face=Courier>int </FONT>conversion is the function <FONT 
face=Courier>lower</FONT>, which maps a single character to lower</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 50371px"><NOBR>case <I>for the 
ASCII character set</I>. If the character is not an upper case letter, <FONT 
face=Courier>lower </FONT>returns it unchanged.</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 50411px"><NOBR>/* lower: 
convert c to lower case; ASCII only */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 50427px"><NOBR>int lower(int 
c)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 50444px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 50460px"><NOBR>if (c &gt;= 'A' 
&amp;c &lt;= 'Z')</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 50477px"><NOBR>return c + 'a' 
− 'A';</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 50493px"><NOBR>else</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 50510px"><NOBR>return 
c;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 50526px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 50563px"><NOBR>This works for 
ASCII because corresponding upper case and lower case letters are a fixed 
distance apart as</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 50582px"><NOBR>numeric values 
and each alphabet is contiguous −− there is nothing but letters between <FONT 
face=Courier>A </FONT>and <FONT face=Courier>Z</FONT>. This latter</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 50602px"><NOBR>observation is 
not true of the EBCDIC character set, however, so this code would convert more 
than just</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 50622px"><NOBR>letters in 
EBCDIC.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 50662px"><NOBR>The standard 
header <FONT face=Courier>&lt;ctype.h&gt;</FONT>, described in <A 
href="#221"></A><FONT 
face=Times color=#0000ff><A 
href="#221">Appendix 
B</A></FONT><A 
href="#221"></A>, 
defines a family of functions that provide tests</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 50681px"><NOBR>and conversions 
that are independent of character set. For <B><SPAN 
class=goohl2>example</SPAN></B>, the function <FONT face=Courier>tolower 
</FONT>is a portable</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 50701px"><NOBR>replacement for 
the function <FONT face=Courier>lower </FONT>shown above. Similarly, the 
test</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 50741px"><NOBR>c &gt;= '0' 
&amp;c &lt;= '9'</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 50777px"><NOBR>can be replaced 
by</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 50816px"><NOBR>isdigit(c)</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 50853px"><NOBR>We will use the 
<FONT face=Courier>&lt;ctype.h&gt; </FONT>functions from now on.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 50893px"><NOBR>There is one 
subtle point about the conversion of characters to integers. The language does 
not specify</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 50912px"><NOBR>whether 
variables of type <FONT face=Courier>char </FONT>are signed or unsigned 
quantities. When a <FONT face=Courier>char </FONT>is converted to an <FONT 
face=Courier>int</FONT>, can</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 50932px"><NOBR>it ever produce 
a negative integer? The answer varies from machine to machine, reflecting 
differences in</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 50952px"><NOBR>architecture. 
On some machines a <FONT face=Courier>char </FONT>whose leftmost bit is 1 will 
be converted to a negative integer (``sign</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 50972px"><NOBR>extension''). 
On others, a <FONT face=Courier>char </FONT>is promoted to an int by adding 
zeros at the left end, and thus is always</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 50992px"><NOBR>positive.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 51031px"><NOBR>The definition 
of C guarantees that any character in the machine's standard printing character 
set will never be</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 51051px"><NOBR>negative, so 
these characters will always be positive quantities in expressions. But 
arbitrary bit patterns stored</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 51071px"><NOBR>in character 
variables may appear to be negative on some machines, yet positive on others. 
For portability,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 51091px"><NOBR>specify <FONT 
face=Courier>signed </FONT>or <FONT face=Courier>unsigned </FONT>if 
non−character data is to be stored in <FONT face=Courier>char 
</FONT>variables.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 51130px"><NOBR>Relational 
expressions like <FONT face=Courier>i &gt; j </FONT>and logical expressions 
connected by <FONT face=Courier>&amp;&amp; </FONT>and <FONT face=Courier>|| 
</FONT>are defined to have value</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 51150px"><NOBR>1 if true, and 
0 if false. Thus the assignment</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 50113px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 51193px"><NOBR>2.7 Type 
Conversions</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 51193px"><NOBR>43</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 51259px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=44><B>Page 44</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 51351px"><NOBR>d = c &gt;= '0' 
&amp;c &lt;= '9'</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 51388px"><NOBR>sets <FONT 
face=Courier>d </FONT>to 1 if <FONT face=Courier>c </FONT>is a digit, and 0 if 
not. However, functions like <FONT face=Courier>isdigit </FONT>may return any 
non−zero value for</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 51407px"><NOBR>true. In the 
test part of <FONT face=Courier>if</FONT>, <FONT face=Courier>while</FONT>, 
<FONT face=Courier>for</FONT>, etc., ``true'' just means ``non−zero'', so this 
makes no difference.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 51447px"><NOBR>Implicit 
arithmetic conversions work much as expected. In general, if an operator like 
<FONT face=Courier>+ </FONT>or <FONT face=Courier>* </FONT>that takes 
two</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 51467px"><NOBR>operands (a 
binary operator) has operands of different types, the ``lower'' type is 
<I>promoted </I>to the ``higher''</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 51487px"><NOBR>type before the 
operation proceeds. The result is of the integer type. <FONT face=Times 
color=#0000ff><A 
href="#175">Section 
6 of</A> Appendix A states the</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times 
color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 51506px"><NOBR><A 
href="#175">conversion 
rules precisely. If there are no </A><FONT face=Courier><A 
href="#175">unsigned 
</A></FONT><A 
href="#175">operands, 
however, the following informal set of rules</A></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 51526px"><NOBR><A 
href="#175">will 
suffice:</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 51566px"><NOBR>If either 
operand is <FONT face=Courier>long double</FONT>, convert the other to <FONT 
face=Courier>long double</FONT>.</NOBR></DIV></SPAN></FONT><FONT face=Symbol 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 51560px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 51586px"><NOBR>Otherwise, if 
either operand is <FONT face=Courier>double</FONT>, convert the other to <FONT 
face=Courier>double</FONT>.</NOBR></DIV></SPAN></FONT><FONT face=Symbol 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 51580px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 51605px"><NOBR>Otherwise, if 
either operand is <FONT face=Courier>float</FONT>, convert the other to <FONT 
face=Courier>float</FONT>.</NOBR></DIV></SPAN></FONT><FONT face=Symbol 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 51600px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 51625px"><NOBR>Otherwise, 
convert <FONT face=Courier>char </FONT>and <FONT face=Courier>short </FONT>to 
<FONT face=Courier>int</FONT>.</NOBR></DIV></SPAN></FONT><FONT face=Symbol 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 51620px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 51645px"><NOBR>Then, if either 
operand is <FONT face=Courier>long</FONT>, convert the other to <FONT 
face=Courier>long</FONT>.</NOBR></DIV></SPAN></FONT><FONT face=Symbol 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 51640px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 51685px"><NOBR>Notice that 
<FONT face=Courier>float</FONT>s in an expression are not automatically 
converted to <FONT face=Courier>double</FONT>; this is a change from 
the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 51704px"><NOBR>original 
definition. In general, mathematical functions like those in <FONT 
face=Courier>&lt;math.h&gt; </FONT>will use double precision. The</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 51724px"><NOBR>main reason for 
using <FONT face=Courier>float </FONT>is to save storage in large arrays, or, 
less often, to save time on machines where</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 51744px"><NOBR>double−precision 
arithmetic is particularly expensive.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 51784px"><NOBR>Conversion 
rules are more complicated when <FONT face=Courier>unsigned </FONT>operands are 
involved. The problem is that</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 51803px"><NOBR>comparisons 
between signed and unsigned values are machine−dependent, because they depend on 
the sizes</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 51823px"><NOBR>of the various 
integer types. For <B><SPAN class=goohl2>example</SPAN></B>, suppose that <FONT 
face=Courier>int </FONT>is 16 bits and <FONT face=Courier>long </FONT>is 32 
bits. Then <FONT face=Courier>−1L &lt; 1U</FONT>,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 51843px"><NOBR>because <FONT 
face=Courier>1U</FONT>, which is an <FONT face=Courier>unsigned int</FONT>, is 
promoted to a <FONT face=Courier>signed long</FONT>. But <FONT face=Courier>−1L 
&gt; 1UL </FONT>because <FONT face=Courier>−1L</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 51863px"><NOBR>is promoted to 
<FONT face=Courier>unsigned long </FONT>and thus appears to be a large positive 
number.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 51902px"><NOBR>Conversions 
take place across assignments; the value of the right side is converted to the 
type of the left,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 51922px"><NOBR>which is the 
type of the result.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 51962px"><NOBR>A character is 
converted to an integer, either by sign extension or not, as described 
above.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 52001px"><NOBR>Longer integers 
are converted to shorter ones or to <FONT face=Courier>char</FONT>s by dropping 
the excess high−order bits. Thus in</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 52041px"><NOBR>int 
i;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 52057px"><NOBR>char 
c;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 52090px"><NOBR>i = 
c;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 52107px"><NOBR>c = 
i;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 52143px"><NOBR>the value of 
<FONT face=Courier>c </FONT>is unchanged. This is true whether or not sign 
extension is involved. Reversing the order of</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 52163px"><NOBR>assignments 
might lose information, however.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 52203px"><NOBR>If <FONT 
face=Courier>x </FONT>is <FONT face=Courier>float </FONT>and <FONT 
face=Courier>i </FONT>is <FONT face=Courier>int</FONT>, then <FONT 
face=Courier>x = i </FONT>and <FONT face=Courier>i = x </FONT>both cause 
conversions; <FONT face=Courier>float </FONT>to <FONT face=Courier>int 
</FONT>causes</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 52222px"><NOBR>truncation of 
any fractional part. When a <FONT face=Courier>double </FONT>is converted to 
<FONT face=Courier>float</FONT>, whether the value is rounded or</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 52242px"><NOBR>truncated is 
implementation dependent.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 52282px"><NOBR>Since an 
argument of a function call is an expression, type conversion also takes place 
when arguments are</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 52302px"><NOBR>passed to 
functions. In the absence of a function prototype, <FONT face=Courier>char 
</FONT>and <FONT face=Courier>short </FONT>become int, and <FONT 
face=Courier>float</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 52321px"><NOBR>becomes <FONT 
face=Courier>double</FONT>. This is why we have declared function arguments to 
be <FONT face=Courier>int </FONT>and <FONT face=Courier>double </FONT>even when 
the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 52341px"><NOBR>function is 
called with <FONT face=Courier>char </FONT>and <FONT 
face=Courier>float</FONT>.</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 51301px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 52381px"><NOBR>2.7 Type 
Conversions</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 52381px"><NOBR>44</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 52447px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=45><B>Page 45</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 52539px"><NOBR>Finally, 
explicit type conversions can be forced (``coerced'') in any expression, with a 
unary operator called a</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 52560px"><NOBR>cast<FONT 
face=Times>. In the construction</FONT></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 116px; POSITION: absolute; TOP: 52599px"><NOBR>(<I>type 
name</I>) <I>expression</I></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 52638px"><NOBR>the 
<I>expression </I>is converted to the named type by the conversion rules above. 
The precise meaning of a cast is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 52658px"><NOBR>as if the 
<I>expression </I>were assigned to a variable of the specified type, which is 
then used in place of the whole</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 52678px"><NOBR>construction. 
For <B><SPAN class=goohl2>example</SPAN></B>, the library routine <FONT 
face=Courier>sqrt </FONT>expects a <FONT face=Courier>double </FONT>argument, 
and will produce nonsense</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 52698px"><NOBR>if 
inadvertently handled something else. (<FONT face=Courier>sqrt </FONT>is 
declared in <FONT face=Courier>&lt;math.h&gt;</FONT>.) So if <FONT 
face=Courier>n </FONT>is an integer, we can use</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 52737px"><NOBR>sqrt((double) 
n)</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 52774px"><NOBR>to convert the 
value of <FONT face=Courier>n </FONT>to <FONT face=Courier>double </FONT>before 
passing it to <FONT face=Courier>sqrt</FONT>. Note that the cast produces the 
<I>value </I>of <FONT face=Courier>n </FONT>in</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 52793px"><NOBR>the proper 
type; <FONT face=Courier>n </FONT>itself is not altered. The cast operator has 
the same high precedence as other unary</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 52813px"><NOBR>operators, as 
summarized in the table at the end of this chapter.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 52853px"><NOBR>If arguments 
are declared by a function prototype, as the normally should be, the declaration 
causes automatic</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 52873px"><NOBR>coercion of any 
arguments when the function is called. Thus, given a function prototype for 
<FONT face=Courier>sqrt</FONT>:</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 52912px"><NOBR>double 
sqrt(double)</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 52948px"><NOBR>the 
call</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 52988px"><NOBR>root2 = 
sqrt(2)</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 53024px"><NOBR>coerces the 
integer <FONT face=Courier>2 </FONT>into the <FONT face=Courier>double 
</FONT>value <FONT face=Courier>2.0 </FONT>without any need for a 
cast.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 53064px"><NOBR>The standard 
library includes a portable implementation of a pseudo−random number generator 
and a function</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 53084px"><NOBR>for 
initializing the seed; the former illustrates a 
cast:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 53123px"><NOBR>unsigned long 
int next = 1;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 53156px"><NOBR>/* rand: return 
pseudo−random integer on 0..32767 */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 53173px"><NOBR>int 
rand(void)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 53189px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 53206px"><NOBR>next = next * 
1103515245 + 12345;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 53222px"><NOBR>return 
(unsigned int)(next/65536) % 32768;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 53239px"><NOBR>}</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 53272px"><NOBR>/* srand: set 
seed for rand() */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 53288px"><NOBR>void 
srand(unsigned int seed)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 53305px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 53321px"><NOBR>next = 
seed;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 53338px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 53374px"><NOBR><I><B>Exercise 
2−3. </B></I>Write a function <FONT face=Courier>htoi(s)</FONT>, which converts 
a string of hexadecimal digits (including an</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 53394px"><NOBR>optional <FONT 
face=Courier>0x </FONT>or <FONT face=Courier>0X</FONT>) into its equivalent 
integer value. The allowable digits are <FONT face=Courier>0 </FONT>through 
<FONT face=Courier>9</FONT>, <FONT face=Courier>a </FONT>through <FONT 
face=Courier>f</FONT>, and <FONT face=Courier>A</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 53414px"><NOBR>through <FONT 
face=Courier>F</FONT>.</NOBR></DIV></SPAN></FONT><FONT face=Times size=4><SPAN 
style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 53455px"><NOBR><B>2.8 
Increment and Decrement Operators</B></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 53502px"><NOBR>C provides two 
unusual operators for incrementing and decrementing variables. The increment 
operator <FONT face=Courier>++</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 53521px"><NOBR>adds 1 to its 
operand, while the decrement operator <FONT face=Courier>−− </FONT>subtracts 1. 
We have frequently used <FONT face=Courier>++ </FONT>to increment</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 52489px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 53569px"><NOBR>2.8 Increment 
and Decrement Operators</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 53569px"><NOBR>45</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 53635px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=46><B>Page 46</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 53727px"><NOBR>variables, as 
in</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 53767px"><NOBR>if (c == 
'\n')</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 53783px"><NOBR>++nl;</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 53820px"><NOBR>The unusual 
aspect is that <FONT face=Courier>++ </FONT>and <FONT face=Courier>−− </FONT>may 
be used either as prefix operators (before the variable, as in <FONT 
face=Courier>++n</FONT>),</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 53839px"><NOBR>or postfix 
operators (after the variable: <FONT face=Courier>n++</FONT>). In both cases, 
the effect is to increment <FONT face=Courier>n</FONT>. But the 
expression</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 53860px"><NOBR>++n <FONT 
face=Times>increments </FONT>n <I><FONT face=Times>before </FONT></I><FONT 
face=Times>its value is used, while </FONT>n++ <FONT face=Times>increments 
</FONT>n <I><FONT face=Times>after </FONT></I><FONT face=Times>its value has 
been used. This means</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 53879px"><NOBR>that in a 
context where the value is being used, not just the effect, <FONT 
face=Courier>++n </FONT>and <FONT face=Courier>n++ </FONT>are different. If 
<FONT face=Courier>n </FONT>is 5, then</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 53918px"><NOBR>x = 
n++;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 53955px"><NOBR>sets <FONT 
face=Courier>x </FONT>to 5, but</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 53994px"><NOBR>x = 
++n;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 54031px"><NOBR>sets <FONT 
face=Courier>x </FONT>to 6. In both cases, <FONT face=Courier>n </FONT>becomes 
6. The increment and decrement operators can only be applied to</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 54051px"><NOBR>variables; an 
expression like <FONT face=Courier>(i+j)++ </FONT>is illegal.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 54090px"><NOBR>In a context 
where no value is wanted, just the incrementing effect, as 
in</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 54130px"><NOBR>if (c == 
'\n')</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 54146px"><NOBR>nl++;</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 54183px"><NOBR>prefix and 
postfix are the same. But there are situations where one or the other is 
specifically called for. For</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 54202px"><NOBR>instance, 
consider the function <FONT face=Courier>squeeze(s,c)</FONT>, which removes all 
occurrences of the character <FONT face=Courier>c </FONT>from the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 54222px"><NOBR>string <FONT 
face=Courier>s</FONT>.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 54262px"><NOBR>/* squeeze: 
delete all c from s */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 54278px"><NOBR>void 
squeeze(char s[], int c)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 54295px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 158px; POSITION: absolute; TOP: 54311px"><NOBR>int i, 
j;</NOBR></DIV>
<DIV style="LEFT: 158px; POSITION: absolute; TOP: 54344px"><NOBR>for (i = j = 0; 
s[i] != '\0'; i++)</NOBR></DIV>
<DIV style="LEFT: 191px; POSITION: absolute; TOP: 54361px"><NOBR>if (s[i] != 
c)</NOBR></DIV>
<DIV style="LEFT: 224px; POSITION: absolute; TOP: 54377px"><NOBR>s[j++] = 
s[i];</NOBR></DIV>
<DIV style="LEFT: 158px; POSITION: absolute; TOP: 54394px"><NOBR>s[j] = 
'\0';</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 54410px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 54447px"><NOBR>Each time a 
non−<FONT face=Courier>c </FONT>occurs, it is copied into the current <FONT 
face=Courier>j </FONT>position, and only then is <FONT face=Courier>j 
</FONT>incremented to be ready</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 54466px"><NOBR>for the next 
character. This is exactly equivalent to</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 54506px"><NOBR>if (s[i] != c) 
{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 54522px"><NOBR>s[j] = 
s[i];</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 54539px"><NOBR>j++;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 54555px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 54592px"><NOBR>Another 
<B><SPAN class=goohl2>example</SPAN></B> of a similar construction comes from 
the <FONT face=Courier>getline </FONT>function that we wrote in <A 
href="#11"></A><FONT 
face=Times color=#0000ff><A 
href="#11">Chapter 
1</A></FONT>,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 54612px"><NOBR>where we can 
replace</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 54651px"><NOBR>if (c == '\n') 
{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 54668px"><NOBR>s[i] = 
c;</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 54684px"><NOBR>++i;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 54701px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 53677px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 54757px"><NOBR>2.8 Increment 
and Decrement Operators</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 54757px"><NOBR>46</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 54823px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=47><B>Page 47</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 54915px"><NOBR>by the more 
compact</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 54955px"><NOBR>if (c == 
'\n')</NOBR></DIV>
<DIV style="LEFT: 158px; POSITION: absolute; TOP: 54971px"><NOBR>s[i++] = 
c;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 55008px"><NOBR>As a third 
<B><SPAN class=goohl2>example</SPAN></B>, consider the standard function <FONT 
face=Courier>strcat(s,t)</FONT>, which concatenates the string <FONT 
face=Courier>t </FONT>to the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 55027px"><NOBR>end of string 
<FONT face=Courier>s</FONT>. <FONT face=Courier>strcat </FONT>assumes that there 
is enough space in <FONT face=Courier>s </FONT>to hold the combination. As we 
have written</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 55047px"><NOBR>it, <FONT 
face=Courier>strcat </FONT>returns no value; the standard library version 
returns a pointer to the resulting string.</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 55087px"><NOBR>/* strcat: 
concatenate t to end of s; s must be big enough */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 55103px"><NOBR>void 
strcat(char s[], char t[])</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 55120px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 55136px"><NOBR>int i, 
j;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 55169px"><NOBR>i = j = 
0;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 55186px"><NOBR>while (s[i] != 
'\0') /* find end of s */</NOBR></DIV>
<DIV 
style="LEFT: 199px; POSITION: absolute; TOP: 55202px"><NOBR>i++;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 55219px"><NOBR>while ((s[i++] 
= t[j++]) != '\0') /* copy t */</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 55235px"><NOBR>;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 55252px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 55288px"><NOBR>As each member 
is copied from <FONT face=Courier>t </FONT>to <FONT face=Courier>s</FONT>, the 
postfix <FONT face=Courier>++ </FONT>is applied to both <FONT face=Courier>i 
</FONT>and <FONT face=Courier>j </FONT>to make sure that they are 
in</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 55308px"><NOBR>position for 
the next pass through the loop.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 55348px"><NOBR><I><B>Exercise 
2−4. </B></I>Write an alternative version of <FONT face=Courier>squeeze(s1,s2) 
</FONT>that deletes each character in <FONT face=Courier>s1 
</FONT>that</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 55367px"><NOBR>matches any 
character in the <I>string </I><FONT face=Courier>s2</FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 55407px"><NOBR><I><B>Exercise 
2−5. </B></I>Write the function <FONT face=Courier>any(s1,s2)</FONT>, which 
returns the first location in a string <FONT face=Courier>s1 </FONT>where 
any</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 55427px"><NOBR>character from 
the string <FONT face=Courier>s2 </FONT>occurs, or <FONT face=Courier>−1 
</FONT>if <FONT face=Courier>s1 </FONT>contains no characters from <FONT 
face=Courier>s2</FONT>. (The standard library</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 55447px"><NOBR>function <FONT 
face=Courier>strpbrk </FONT>does the same job but returns a pointer to the 
location.)</NOBR></DIV></SPAN></FONT><FONT face=Times size=4><SPAN 
style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 55488px"><NOBR><B>2.9 Bitwise 
Operators</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 55534px"><NOBR>C provides six 
operators for bit manipulation; these may only be applied to integral operands, 
that is, <FONT face=Courier>char</FONT>,</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 55555px"><NOBR>short<FONT 
face=Times>, </FONT>int<FONT face=Times>, and </FONT>long<FONT face=Times>, 
whether signed or unsigned.</FONT></NOBR></DIV>
<DIV 
style="LEFT: 362px; POSITION: absolute; TOP: 55597px"><NOBR>|</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 409px; POSITION: absolute; TOP: 55596px"><NOBR>bitwise 
inclusive OR</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 362px; POSITION: absolute; TOP: 55623px"><NOBR>^</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 409px; POSITION: absolute; TOP: 55622px"><NOBR>bitwise 
exclusive OR</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 362px; POSITION: absolute; TOP: 55649px"><NOBR>&lt;&lt;</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 409px; POSITION: absolute; TOP: 55648px"><NOBR>left 
shift</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 362px; POSITION: absolute; TOP: 55676px"><NOBR>&gt;&gt;</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 409px; POSITION: absolute; TOP: 55675px"><NOBR>right 
shift</NOBR></DIV>
<DIV style="LEFT: 409px; POSITION: absolute; TOP: 55701px"><NOBR>one's 
complement (unary)</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 55725px"><NOBR>The bitwise AND 
operator <FONT face=Courier>is often used to mask off some set of bits, for 
<B><SPAN class=goohl2>example</SPAN></B></FONT></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 55765px"><NOBR>n = n 
0177;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 55801px"><NOBR>sets to zero 
all but the low−order 7 bits of <FONT face=Courier>n</FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 55841px"><NOBR>The bitwise OR 
operator <FONT face=Courier>| </FONT>is used to turn bits 
on:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 55880px"><NOBR>x = x | 
SET_ON;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 54865px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 55945px"><NOBR>2.9 Bitwise 
Operators</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 55945px"><NOBR>47</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 56011px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=48><B>Page 48</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 56103px"><NOBR>sets to one in 
<FONT face=Courier>x </FONT>the bits that are set to one in <FONT 
face=Courier>SET_ON</FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 56143px"><NOBR>The bitwise 
exclusive OR operator <FONT face=Courier>^ </FONT>sets a one in each bit 
position where its operands have different bits, and</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 56163px"><NOBR>zero where they 
are the same.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 56202px"><NOBR>One must 
distinguish the bitwise operators <FONT face=Courier>and | from the logical 
operators and ||,</FONT></NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 56223px"><NOBR>which imply 
left−to−right evaluation of a truth value. For <B><SPAN 
class=goohl2>example</SPAN></B>, if x</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 56243px"><NOBR>is 1 and y is 
2, then x y is zero while x &amp;y is one.</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 56281px"><NOBR>The shift 
operators <FONT face=Courier>&lt;&lt; </FONT>and <FONT face=Courier>&gt;&gt; 
</FONT>perform left and right shifts of their left operand by the number of bit 
positions</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 56301px"><NOBR>given by the 
right operand, which must be non−negative. Thus <FONT face=Courier>x &lt;&lt; 2 
</FONT>shifts the value of <FONT face=Courier>x </FONT>by two</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 56321px"><NOBR>positions, 
filling vacated bits with zero; this is equivalent to multiplication by 4. Right 
shifting an <FONT face=Courier>unsigned</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 56341px"><NOBR>quantity always 
fits the vacated bits with zero. Right shifting a signed quantity will fill with 
bit signs</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 56361px"><NOBR>(``arithmetic 
shift'') on some machines and with 0−bits (``logical shift'') on 
others.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 56400px"><NOBR>The unary 
operator yields the one's complement of an integer; that is, it converts each 
1−bit into a 0−bit and</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 56420px"><NOBR>vice versa. For 
<B><SPAN class=goohl2>example</SPAN></B></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 56459px"><NOBR>x = x 
077</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 56496px"><NOBR>sets the last 
six bits of <FONT face=Courier>x </FONT>to zero. Note that <FONT face=Courier>x 
077 </FONT>is independent of word length, and is thus preferable 
to,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 56516px"><NOBR>for <B><SPAN 
class=goohl2>example</SPAN></B>, <FONT face=Courier>x 0177700</FONT>, which 
assumes that <FONT face=Courier>x </FONT>is a 16−bit quantity. The portable form 
involves no extra</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 56536px"><NOBR>cost, since 
<FONT face=Courier>077 </FONT>is a constant expression that can be evaluated at 
compile time.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 56575px"><NOBR>As an 
illustration of some of the bit operators, consider the function <FONT 
face=Courier>getbits(x,p,n) </FONT>that returns the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 56595px"><NOBR>(right 
adjusted) <FONT face=Courier>n</FONT>−bit field of <FONT face=Courier>x 
</FONT>that begins at position <FONT face=Courier>p</FONT>. We assume that bit 
position 0 is at the right end and</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 56615px"><NOBR>that <FONT 
face=Courier>n </FONT>and <FONT face=Courier>p </FONT>are sensible positive 
values. For <B><SPAN class=goohl2>example</SPAN></B>, <FONT 
face=Courier>getbits(x,4,3) </FONT>returns the three bits in 
positions</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 56635px"><NOBR>4, 3 and 2, 
right−adjusted.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 56674px"><NOBR>/* getbits: get 
n bits from position p */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 56690px"><NOBR>unsigned 
getbits(unsigned x, int p, int n)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 56707px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 56723px"><NOBR>return (x 
&gt;&gt; (p+1−n)) (0 &lt;&lt; n);</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 56740px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 56776px"><NOBR>The expression 
<FONT face=Courier>x &gt;&gt; (p+1−n) </FONT>moves the desired field to the 
right end of the word. <FONT face=Courier>0 </FONT>is all 1−bits;</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 56796px"><NOBR>shifting it 
left <FONT face=Courier>n </FONT>positions with <FONT face=Courier>0&lt;&lt;n 
</FONT>places zeros in the rightmost <FONT face=Courier>n </FONT>bits; 
complementing that with makes</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 56816px"><NOBR>a mask with 
ones in the rightmost <FONT face=Courier>n </FONT>bits.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 56856px"><NOBR><I><B>Exercise 
2−6. </B></I>Write a function <FONT face=Courier>setbits(x,p,n,y) </FONT>that 
returns <FONT face=Courier>x </FONT>with the <FONT face=Courier>n </FONT>bits 
that begin at position <FONT face=Courier>p</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 56875px"><NOBR>set to the 
rightmost <FONT face=Courier>n </FONT>bits of <FONT face=Courier>y</FONT>, 
leaving the other bits unchanged.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 56915px"><NOBR><I><B>Exercise 
2−7. </B></I>Write a function <FONT face=Courier>invert(x,p,n) </FONT>that 
returns <FONT face=Courier>x </FONT>with the <FONT face=Courier>n </FONT>bits 
that begin at position <FONT face=Courier>p</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 56935px"><NOBR>inverted (i.e., 
1 changed into 0 and vice versa), leaving the others unchanged.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 56974px"><NOBR><I><B>Exercise 
2−8. </B></I>Write a function <FONT face=Courier>rightrot(x,n) </FONT>that 
returns the value of the integer <FONT face=Courier>x </FONT>rotated to the 
right</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 56994px"><NOBR>by <FONT 
face=Courier>n </FONT>positions.</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=4><SPAN style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 57035px"><NOBR><B>2.10 
Assignment Operators and Expressions</B></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 57082px"><NOBR>An expression 
such as</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 56053px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 57133px"><NOBR>2.10 Assignment 
Operators and Expressions</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 57133px"><NOBR>48</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 57199px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=49><B>Page 49</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 57291px"><NOBR>i = i + 
2</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 57328px"><NOBR>in which the 
variable on the left side is repeated immediately on the right, can be written 
in the compressed</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 57347px"><NOBR>form</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 57387px"><NOBR>i += 
2</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 57423px"><NOBR>The operator 
<FONT face=Courier>+= </FONT>is called an <I>assignment 
operator</I>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 57463px"><NOBR>Most binary 
operators (operators like <FONT face=Courier>+ </FONT>that have a left and right 
operand) have a corresponding assignment</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 57483px"><NOBR>operator 
<I>op</I><FONT face=Courier>=</FONT>, where <I>op </I>is one 
of</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 57522px"><NOBR>+ − * / % 
&lt;&lt; &gt;&gt; &amp; ^ |</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 57559px"><NOBR>If 
<I>expr</I></NOBR></DIV></SPAN></FONT><FONT face=Times size=2><SPAN 
style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 152px; POSITION: absolute; TOP: 57565px"><NOBR><I>1</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 57559px"><NOBR>and 
<I>expr</I></NOBR></DIV></SPAN></FONT><FONT face=Times size=2><SPAN 
style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 220px; POSITION: absolute; TOP: 57565px"><NOBR><I>2</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 229px; POSITION: absolute; TOP: 57559px"><NOBR>are 
expressions, then</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 57598px"><NOBR><I>expr</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 57599px"><NOBR><I>1</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 181px; POSITION: absolute; TOP: 57598px"><NOBR><I>op= 
expr</I></NOBR></DIV></SPAN></FONT><FONT face=Courier size=2><SPAN 
style="FONT-SIZE: 9px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 247px; POSITION: absolute; TOP: 57599px"><NOBR><I>2</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 57634px"><NOBR>is equivalent 
to</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 57674px"><NOBR><I>expr</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 57675px"><NOBR><I>1</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 181px; POSITION: absolute; TOP: 57674px"><NOBR>= 
(<I>expr</I></NOBR></DIV></SPAN></FONT><FONT face=Courier size=2><SPAN 
style="FONT-SIZE: 9px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 239px; POSITION: absolute; TOP: 57675px"><NOBR><I>1</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 246px; POSITION: absolute; TOP: 57674px"><NOBR>) <I>op 
</I>(<I>expr</I></NOBR></DIV></SPAN></FONT><FONT face=Courier size=2><SPAN 
style="FONT-SIZE: 9px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 329px; POSITION: absolute; TOP: 57675px"><NOBR><I>2</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 335px; POSITION: absolute; TOP: 57674px"><NOBR>)</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 57710px"><NOBR>except that 
<I>expr</I></NOBR></DIV></SPAN></FONT><FONT face=Times size=2><SPAN 
style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 213px; POSITION: absolute; TOP: 57716px"><NOBR><I>1</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 223px; POSITION: absolute; TOP: 57710px"><NOBR>is computed 
only once. Notice the parentheses around 
<I>expr</I></NOBR></DIV></SPAN></FONT><FONT face=Times size=2><SPAN 
style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 613px; POSITION: absolute; TOP: 57716px"><NOBR><I>2</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 619px; POSITION: absolute; TOP: 57710px"><NOBR>:</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 57750px"><NOBR>x *= y + 
1</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 57786px"><NOBR>means</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 57826px"><NOBR>x = x * (y + 
1)</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 57862px"><NOBR>rather 
than</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 57902px"><NOBR>x = x * y + 
1</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 57938px"><NOBR>As an <B><SPAN 
class=goohl2>example</SPAN></B>, the function <FONT face=Courier>bitcount 
</FONT>counts the number of 1−bits in its integer 
argument.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 57977px"><NOBR>/* bitcount: 
count 1 bits in x */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 57994px"><NOBR>int 
bitcount(unsigned x)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 58010px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 58027px"><NOBR>int 
b;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 58060px"><NOBR>for (b = 0; x 
!= 0; x &gt;&gt;= 1)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 58076px"><NOBR>if (x 
01)</NOBR></DIV>
<DIV 
style="LEFT: 232px; POSITION: absolute; TOP: 58093px"><NOBR>b++;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 58109px"><NOBR>return 
b;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 58126px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 58162px"><NOBR>Declaring the 
argument <FONT face=Courier>x </FONT>to be an <FONT face=Courier>unsigned 
</FONT>ensures that when it is right−shifted, vacated bits will be 
filled</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 58182px"><NOBR>with zeros, not 
sign bits, regardless of the machine the program is run on.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 58222px"><NOBR>Quite apart 
from conciseness, assignment operators have the advantage that they correspond 
better to the way</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 58242px"><NOBR>people think. 
We say ``add 2 to <FONT face=Courier>i</FONT>'' or ``increment <FONT 
face=Courier>i </FONT>by 2'', not ``take <FONT face=Courier>i</FONT>, add 2, 
then put the result back in <FONT face=Courier>i</FONT>''.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 58261px"><NOBR>Thus the 
expression <FONT face=Courier>i += 2 </FONT>is preferable to <FONT 
face=Courier>i = i+2</FONT>. In addition, for a complicated expression 
like</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 57241px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 58321px"><NOBR>2.10 Assignment 
Operators and Expressions</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 58321px"><NOBR>49</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 58387px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=50><B>Page 50</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 58479px"><NOBR>yyval[yypv[p3+p4] + 
yypv[p1]] += 2</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 58516px"><NOBR>the assignment 
operator makes the code easier to understand, since the reader doesn't have to 
check</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 58535px"><NOBR>painstakingly 
that two long expressions are indeed the same, or to wonder why they're not. And 
an assignment</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 58555px"><NOBR>operator may 
even help a compiler to produce efficient code.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 58595px"><NOBR>We have already 
seen that the assignment statement has a value and can occur in expressions; the 
most</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 58615px"><NOBR>common <B><SPAN 
class=goohl2>example</SPAN></B> is</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 58654px"><NOBR>while ((c = 
getchar()) != EOF)</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 58670px"><NOBR>...</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 58707px"><NOBR>The other 
assignment operators (<FONT face=Courier>+=</FONT>, <FONT 
face=Courier>−=</FONT>, etc.) can also occur in expressions, although this is 
less frequent.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 58747px"><NOBR>In all such 
expressions, the type of an assignment expression is the type of its left 
operand, and the value is the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 58766px"><NOBR>value after the 
assignment.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 58806px"><NOBR><I><B>Exercise 
2−9. </B></I>In a two's complement number system, <FONT face=Courier>x =(x−1) 
</FONT>deletes the rightmost 1−bit in <FONT face=Courier>x</FONT>. 
Explain</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 58826px"><NOBR>why. Use this 
observation to write a faster version of <FONT 
face=Courier>bitcount</FONT>.</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=4><SPAN style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 58867px"><NOBR><B>2.11 
Conditional Expressions</B></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 58914px"><NOBR>The 
statements</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 58953px"><NOBR>if (a &gt; 
b)</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 58970px"><NOBR>z = 
a;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 58986px"><NOBR>else</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 59003px"><NOBR>z = 
b;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 59039px"><NOBR>compute in 
<FONT face=Courier>z </FONT>the maximum of <FONT face=Courier>a </FONT>and <FONT 
face=Courier>b</FONT>. The <I>conditional expression</I>, written with the 
ternary operator ``<FONT face=Courier>?:</FONT>'',</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 59059px"><NOBR>provides an 
alternate way to write this and similar constructions. In the 
expression</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 59098px"><NOBR><I>expr</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 59100px"><NOBR><I>1</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 181px; POSITION: absolute; TOP: 59098px"><NOBR>? 
<I>expr</I></NOBR></DIV></SPAN></FONT><FONT face=Courier size=2><SPAN 
style="FONT-SIZE: 9px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 231px; POSITION: absolute; TOP: 59100px"><NOBR><I>2</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 246px; POSITION: absolute; TOP: 59098px"><NOBR>: 
<I>expr</I></NOBR></DIV></SPAN></FONT><FONT face=Courier size=2><SPAN 
style="FONT-SIZE: 9px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 295px; POSITION: absolute; TOP: 59100px"><NOBR><I>3</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 59135px"><NOBR>the expression 
<I>expr</I></NOBR></DIV></SPAN></FONT><FONT face=Times size=2><SPAN 
style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 236px; POSITION: absolute; TOP: 59141px"><NOBR><I>1</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 246px; POSITION: absolute; TOP: 59135px"><NOBR>is evaluated 
first. If it is non−zero (true), then the expression 
<I>expr</I></NOBR></DIV></SPAN></FONT><FONT face=Times size=2><SPAN 
style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 679px; POSITION: absolute; TOP: 59141px"><NOBR><I>2</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 689px; POSITION: absolute; TOP: 59135px"><NOBR>is evaluated, 
and that</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 59155px"><NOBR>is the value of 
the conditional expression. Otherwise 
<I>expr</I></NOBR></DIV></SPAN></FONT><FONT face=Times size=2><SPAN 
style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 488px; POSITION: absolute; TOP: 59161px"><NOBR><I>3</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 498px; POSITION: absolute; TOP: 59155px"><NOBR>is evaluated, 
and that is the value. Only one of</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 59174px"><NOBR><I>expr</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 137px; POSITION: absolute; TOP: 59180px"><NOBR><I>2</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 147px; POSITION: absolute; TOP: 59174px"><NOBR>and 
<I>expr</I></NOBR></DIV></SPAN></FONT><FONT face=Times size=2><SPAN 
style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 204px; POSITION: absolute; TOP: 59180px"><NOBR><I>3</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 214px; POSITION: absolute; TOP: 59174px"><NOBR>is evaluated. 
Thus to set <FONT face=Courier>z </FONT>to the maximum of <FONT face=Courier>a 
</FONT>and <FONT face=Courier>b</FONT>,</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 59214px"><NOBR>z = (a &gt; b) 
? a : b; /* z = max(a, b) */</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 59250px"><NOBR>It should be 
noted that the conditional expression is indeed an expression, and it can be 
used wherever any</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 59270px"><NOBR>other 
expression can be. If <I>expr</I></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 316px; POSITION: absolute; TOP: 59276px"><NOBR><I>2</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 326px; POSITION: absolute; TOP: 59270px"><NOBR>and 
<I>expr</I></NOBR></DIV></SPAN></FONT><FONT face=Times size=2><SPAN 
style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 383px; POSITION: absolute; TOP: 59276px"><NOBR><I>3</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 393px; POSITION: absolute; TOP: 59270px"><NOBR>are of 
different types, the type of the result is determined by the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 59290px"><NOBR>conversion 
rules discussed earlier in this chapter. For <B><SPAN 
class=goohl2>example</SPAN></B>, if <FONT face=Courier>f </FONT>is a <FONT 
face=Courier>float </FONT>and <FONT face=Courier>n </FONT>an <FONT 
face=Courier>int</FONT>, then the</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 59310px"><NOBR>expression</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 59349px"><NOBR>(n &gt; 0) ? f 
: n</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 59386px"><NOBR>is of type 
<FONT face=Courier>float </FONT>regardless of whether <FONT face=Courier>n 
</FONT>is positive.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 59425px"><NOBR>Parentheses are 
not necessary around the first expression of a conditional expression, since the 
precedence of</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 59446px"><NOBR>?: <FONT 
face=Times>is very low, just above assignment. They are advisable anyway, 
however, since they make the condition</FONT></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 59465px"><NOBR>part of the 
expression easier to see.</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 58429px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 59509px"><NOBR>2.11 
Conditional Expressions</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 59509px"><NOBR>50</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 59575px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=51><B>Page 51</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 59667px"><NOBR>The conditional 
expression often leads to succinct code. For <B><SPAN 
class=goohl2>example</SPAN></B>, this loop prints <FONT face=Courier>n 
</FONT>elements of an array,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 59687px"><NOBR>10 per line, 
with each column separated by one blank, and with each line (including the last) 
terminated by a</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 59707px"><NOBR>newline.</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 59746px"><NOBR>for (i = 0; i 
&lt; n; i++)</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 59763px"><NOBR>printf("%6d%c", 
a[i], (i%10==9 || i==n−1) ? '\n' : ' ');</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 59799px"><NOBR>A newline is 
printed after every tenth element, and after the <FONT face=Courier>n</FONT>−th. 
All other elements are followed by one</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 59819px"><NOBR>blank. This 
might look tricky, but it's more compact than the equivalent <FONT 
face=Courier>if−else</FONT>. Another good <B><SPAN 
class=goohl2>example</SPAN></B> is</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 59858px"><NOBR>printf("You 
have %d items%s.\n", n, n==1 ? "" : "s");</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 59895px"><NOBR><I><B>Exercise 
2−10. </B></I>Rewrite the function <FONT face=Courier>lower</FONT>, which 
converts upper case letters to lower case, with a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 59915px"><NOBR>conditional 
expression instead of <FONT 
face=Courier>if−else</FONT>.</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=4><SPAN style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 59956px"><NOBR><B>2.12 
Precedence and Order of Evaluation</B></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 60003px"><NOBR>Table 2.1 
summarizes the rules for precedence and associativity of all operators, 
including those that we have</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 60022px"><NOBR>not yet 
discussed. Operators on the same line have the same precedence; rows are in 
order of decreasing</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 60042px"><NOBR>precedence, so, 
for <B><SPAN class=goohl2>example</SPAN></B>, <FONT face=Courier>*</FONT>, <FONT 
face=Courier>/</FONT>, and <FONT face=Courier>% </FONT>all have the same 
precedence, which is higher than that of binary <FONT 
face=Courier>+</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 60062px"><NOBR>and <FONT 
face=Courier>−</FONT>. The ``operator'' <FONT face=Courier>() </FONT>refers to 
function call. The operators <FONT face=Courier>−&gt; </FONT>and <FONT 
face=Courier>. </FONT>are used to access members of</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 60082px"><NOBR>structures; 
they will be covered in <A 
href="#117"></A><FONT 
face=Times color=#0000ff><A 
href="#117">Chapter 
6</A></FONT><A 
href="#117"></A>, 
along with <FONT face=Courier>sizeof </FONT>(size of an object). <FONT 
face=Times color=#0000ff><A 
href="#86">Chapter 
5 </A></FONT>discusses <FONT face=Courier>*</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 60102px"><NOBR>(indirection 
through a pointer) and <FONT face=Courier>(address of an object), and 
</FONT><FONT face=Courier color=#0000ff><A 
href="#53">Chapter 
3 </A></FONT><FONT face=Courier>discusses</FONT></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 60122px"><NOBR>the comma 
operator.</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 60161px"><NOBR>Unary &amp; +, 
−, and * have higher precedence than the binary forms.</NOBR></DIV>
<DIV style="LEFT: 295px; POSITION: absolute; TOP: 60201px"><NOBR><I><B>Table 
2.1: </B>Precedence and Associativity of Operators</I></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 60240px"><NOBR>Note that the 
precedence of the bitwise operators <FONT face=Courier>&amp;</FONT>, <FONT 
face=Courier>^</FONT>, and <FONT face=Courier>| </FONT>falls below <FONT 
face=Courier>== </FONT>and <FONT face=Courier>!=</FONT>. This implies 
that</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 60260px"><NOBR>bit−testing 
expressions like</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 60299px"><NOBR>if ((x MASK) == 
0) ...</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 60337px"><NOBR>must be fully 
parenthesized to give proper results.</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 60376px"><NOBR>C, like most 
languages, does not specify the order in which the operands of an operator are 
evaluated. (The</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 60395px"><NOBR>exceptions are 
<FONT face=Courier>&amp;&amp;</FONT>, <FONT face=Courier>||</FONT>, <FONT 
face=Courier>?:</FONT>, and `<FONT face=Courier>,</FONT>'.) For <B><SPAN 
class=goohl2>example</SPAN></B>, in a statement 
like</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 60435px"><NOBR>x = f() + 
g();</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 60472px"><NOBR>f may be 
evaluated before g or vice versa; thus if either f or g alters a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 60492px"><NOBR>variable on 
which the other depends, x can depend on the order of</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 60512px"><NOBR>evaluation. 
Intermediate results can be stored in temporary variables to</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 60532px"><NOBR>ensure a 
particular sequence.</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 60570px"><NOBR>Similarly, the 
order in which function arguments are evaluated is not specified, so the 
statement</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 60610px"><NOBR>printf("%d 
%d\n", ++n, power(2, n)); /* WRONG */</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 60647px"><NOBR>can produce 
different results with different compilers, depending 
on</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 59617px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 60697px"><NOBR>2.12 Precedence 
and Order of Evaluation</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 60697px"><NOBR>51</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 60763px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=52><B>Page 52</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 60856px"><NOBR>whether n is 
incremented before power is called. The solution, of course,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 60876px"><NOBR>is to 
write</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 60914px"><NOBR>++n;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 60931px"><NOBR>printf("%d 
%d\n", n, power(2, n));</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 60968px"><NOBR>Function calls, 
nested assignment statements, and increment and decrement</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 60988px"><NOBR>operators cause 
``side effects'' − some variable is changed as a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 61008px"><NOBR>by−product of 
the evaluation of an expression. In any expression</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 61028px"><NOBR>involving side 
effects, there can be subtle dependencies on the order in</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 61048px"><NOBR>which variables 
taking part in the expression are updated. One unhappy</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 61067px"><NOBR>situation is 
typified by the statement</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 61106px"><NOBR>a[i] = 
i++;</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 61143px"><NOBR>The question is 
whether the subscript is the old value of i or the new.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 61163px"><NOBR>Compilers can 
interpret this in different ways, and generate different</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 61183px"><NOBR>answers 
depending on their interpretation. The standard intentionally</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 61203px"><NOBR>leaves most 
such matters unspecified. When side effects (assignment to</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 61222px"><NOBR>variables) take 
place within an expression is left to the discretion of</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 61242px"><NOBR>the compiler, 
since the best order depends strongly on machine</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 61262px"><NOBR>architecture. 
(The standard does specify that all side effects on</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 61282px"><NOBR>arguments take 
effect before a function is called, but that would not</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 61302px"><NOBR>help in the 
call to printf above.)</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 61340px"><NOBR>The moral is 
that writing code that depends on order of evaluation is a bad programming 
practice in any</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 61360px"><NOBR>language. 
Naturally, it is necessary to know what things to avoid, but if you don't know 
<I>how </I>they are done on</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 61380px"><NOBR>various 
machines, you won't be tempted to take advantage of a particular 
implementation.</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff 
size=3><SPAN style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 320px; POSITION: absolute; TOP: 61423px"><NOBR><A 
href="#11">Back 
to Chapter 1 </A><FONT face=Times color=#000000>−− </FONT><A 
href="#1">Index 
</A><FONT face=Times color=#000000>−− </FONT><A 
href="#53">Chapter 
3</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 60805px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 61885px"><NOBR>2.12 Precedence 
and Order of Evaluation</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 61885px"><NOBR>52</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 61951px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=53><B>Page 53</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 320px; POSITION: absolute; TOP: 62066px"><NOBR><A 
href="#36">Back 
to Chapter 2 </A><FONT face=Times color=#000000>−− </FONT><A 
href="#1">Index 
</A><FONT face=Times color=#000000>−− </FONT><A 
href="#64">Chapter 
4</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=4><SPAN 
style="FONT-SIZE: 26px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 62111px"><NOBR><B>Chapter 3 − 
Control Flow</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 62163px"><NOBR>The 
control−flow of a language specify the order in which computations are 
performed. We have already met</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 62182px"><NOBR>the most common 
control−flow constructions in earlier examples; here we will complete the set, 
and be more</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 62202px"><NOBR>precise about 
the ones discussed before.</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=4><SPAN style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 62243px"><NOBR><B><B><SPAN 
class=goohl1>3.1</SPAN></B> Statements and 
Blocks</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 62290px"><NOBR>An expression 
such as <FONT face=Courier>x = 0 </FONT>or <FONT face=Courier>i++ </FONT>or 
<FONT face=Courier>printf(...) </FONT>becomes a <I>statement </I>when it is 
followed by a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 62310px"><NOBR>semicolon, as 
in</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 62349px"><NOBR>x = 
0;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 62366px"><NOBR>i++;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 62382px"><NOBR>printf(...);</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 62419px"><NOBR>In C, the 
semicolon is a statement terminator, rather than a separator as it is in 
languages like Pascal.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 62458px"><NOBR>Braces <FONT 
face=Courier>{ </FONT>and <FONT face=Courier>} </FONT>are used to group 
declarations and statements together into a <I>compound statement</I>, or 
<I>block</I>, so</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 62478px"><NOBR>that they are 
syntactically equivalent to a single statement. The braces that surround the 
statements of a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 62498px"><NOBR>function are 
one obvious <B><SPAN class=goohl2>example</SPAN></B>; braces around multiple 
statements after an <FONT face=Courier>if</FONT>, <FONT 
face=Courier>else</FONT>, <FONT face=Courier>while</FONT>, or <FONT 
face=Courier>for </FONT>are</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 62518px"><NOBR>another. 
(Variables can be declared inside <I>any </I>block; we will talk about this in 
<FONT face=Times color=#0000ff><A 
href="#64">Chapter 
4</A></FONT><A 
href="#64"></A>.) 
There is no</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 62538px"><NOBR>semicolon after 
the right brace that ends a block.</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=4><SPAN style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 62579px"><NOBR><B>3.2 
If−Else</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 62626px"><NOBR>The <FONT 
face=Courier>if−else </FONT>statement is used to express decisions. Formally the 
syntax is</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 62665px"><NOBR>if 
(<I>expression</I>)</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 62682px"><NOBR><I>statement</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 240px; POSITION: absolute; TOP: 62683px"><NOBR><I>1</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 62698px"><NOBR>else</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 62715px"><NOBR><I>statement</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 240px; POSITION: absolute; TOP: 62716px"><NOBR><I>2</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 62751px"><NOBR>where the <FONT 
face=Courier>else </FONT>part is optional. The <I>expression </I>is evaluated; 
if it is true (that is, if <I>expression </I>has a non−zero</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 62771px"><NOBR>value), 
<I>statement</I></NOBR></DIV></SPAN></FONT><FONT face=Times size=2><SPAN 
style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 221px; POSITION: absolute; TOP: 62777px"><NOBR><I>1</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 231px; POSITION: absolute; TOP: 62771px"><NOBR>is executed. If 
it is false (<I>expression </I>is zero) and if there is an <FONT 
face=Courier>else </FONT>part, <I>statement</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 780px; POSITION: absolute; TOP: 62777px"><NOBR><I>2</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 790px; POSITION: absolute; TOP: 62771px"><NOBR>is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 62791px"><NOBR>executed 
instead.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 62830px"><NOBR>Since an <FONT 
face=Courier>if </FONT>tests the numeric value of an expression, certain coding 
shortcuts are possible. The most obvious</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 62850px"><NOBR>is 
writing</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 62889px"><NOBR>if 
(<I>expression</I>)</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 62926px"><NOBR>instead 
of</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 62965px"><NOBR>if 
(<I>expression </I>!= 0)</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 63002px"><NOBR>Sometimes this 
is natural and clear; at other times it can be cryptic.</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 61993px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 63073px"><NOBR>Chapter 3 − 
Control Flow</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 63073px"><NOBR>53</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 63139px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=54><B>Page 54</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 63231px"><NOBR>Because the 
<FONT face=Courier>else </FONT>part of an <FONT face=Courier>if−else </FONT>is 
optional,there is an ambiguity when an else if omitted from a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 63251px"><NOBR>nested <FONT 
face=Courier>if </FONT>sequence. This is resolved by associating the <FONT 
face=Courier>else </FONT>with the closest previous <FONT 
face=Courier>else</FONT>−less <FONT face=Courier>if</FONT>. For</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 63271px"><NOBR><B><SPAN 
class=goohl2>example</SPAN></B>, in</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 63310px"><NOBR>if (n &gt; 
0)</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 63327px"><NOBR>if (a &gt; 
b)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 63343px"><NOBR>z = 
a;</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 63360px"><NOBR>else</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 63376px"><NOBR>z = 
b;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 63413px"><NOBR>the <FONT 
face=Courier>else </FONT>goes to the inner <FONT face=Courier>if</FONT>, as we 
have shown by indentation. If that isn't what you want, braces must 
be</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 63433px"><NOBR>used to force 
the proper association:</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 63472px"><NOBR>if (n &gt; 0) 
{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 63488px"><NOBR>if (a &gt; 
b)</NOBR></DIV>
<DIV style="LEFT: 207px; POSITION: absolute; TOP: 63505px"><NOBR>z = 
a;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 63521px"><NOBR>}</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 63538px"><NOBR>else</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 63554px"><NOBR>z = 
b;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 63591px"><NOBR>The ambiguity 
is especially pernicious in situations like 
this:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 63630px"><NOBR>if (n &gt; 
0)</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 63647px"><NOBR>for (i = 0; i 
&lt; n; i++)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 63663px"><NOBR>if (s[i] &gt; 
0) {</NOBR></DIV>
<DIV 
style="LEFT: 232px; POSITION: absolute; TOP: 63680px"><NOBR>printf("...");</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 63696px"><NOBR>return 
i;</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 63713px"><NOBR>}</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 63729px"><NOBR>else /* WRONG 
*/</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 63746px"><NOBR>printf("error 
−− n is negative\n");</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 63782px"><NOBR>The indentation 
shows unequivocally what you want, but the compiler doesn't get the message, and 
associates</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 63802px"><NOBR>the <FONT 
face=Courier>else </FONT>with the inner <FONT face=Courier>if</FONT>. This kind 
of bug can be hard to find; it's a good idea to use braces when there 
are</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 63822px"><NOBR>nested <FONT 
face=Courier>if</FONT>s.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 63862px"><NOBR>By the way, 
notice that there is a semicolon after <FONT face=Courier>z = a 
</FONT>in</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 63901px"><NOBR>if (a &gt; 
b)</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 63917px"><NOBR>z = 
a;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 63934px"><NOBR>else</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 63950px"><NOBR>z = 
b;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 63987px"><NOBR>This is because 
grammatically, a <I>statement </I>follows the <FONT face=Courier>if</FONT>, and 
an expression statement like ``<FONT face=Courier>z = a;</FONT>'' 
is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 64007px"><NOBR>always 
terminated by a semicolon.</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=4><SPAN style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 64048px"><NOBR><B>3.3 
Else−If</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 64095px"><NOBR>The 
construction</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 64134px"><NOBR>if 
(<I>expression</I>)</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 64151px"><NOBR><I>statement</I></NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 64167px"><NOBR>else if 
(<I>expression</I>)</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 64184px"><NOBR><I>statement</I></NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 64200px"><NOBR>else if 
(<I>expression</I>)</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 64217px"><NOBR><I>statement</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 63181px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 64261px"><NOBR>3.3 
Else−If</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 64261px"><NOBR>54</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 64327px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=55><B>Page 55</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 64419px"><NOBR>else if 
(<I>expression</I>)</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 64436px"><NOBR><I>statement</I></NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 64452px"><NOBR>else</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 64469px"><NOBR><I>statement</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 64505px"><NOBR>occurs so often 
that it is worth a brief separate discussion. This sequence of <FONT 
face=Courier>if </FONT>statements is the most general</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 64525px"><NOBR>way of writing 
a multi−way decision. The <I>expressions </I>are evaluated in order; if an 
<I>expression </I>is true, the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 64545px"><NOBR><I>statement 
</I>associated with it is executed, and this terminates the whole chain. As 
always, the code for each</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 64564px"><NOBR><I>statement 
</I>is either a single statement, or a group of them in braces.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 64604px"><NOBR>The last <FONT 
face=Courier>else </FONT>part handles the ``none of the above'' or default case 
where none of the other conditions is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 64624px"><NOBR>satisfied. 
Sometimes there is no explicit action for the default; in that case the 
trailing</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 64663px"><NOBR>else</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 64680px"><NOBR><I>statement</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 64716px"><NOBR>can be omitted, 
or it may be used for error checking to catch an ``impossible'' 
condition.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 64756px"><NOBR>To illustrate a 
three−way decision, here is a binary search function that decides if a 
particular value <FONT face=Courier>x </FONT>occurs</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 64776px"><NOBR>in the sorted 
array <FONT face=Courier>v</FONT>. The elements of <FONT face=Courier>v 
</FONT>must be in increasing order. The function returns the position 
(a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 64795px"><NOBR>number between 
0 and <FONT face=Courier>n−1</FONT>) if <FONT face=Courier>x </FONT>occurs in 
<FONT face=Courier>v</FONT>, and −1 if not.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 64835px"><NOBR>Binary search 
first compares the input value <FONT face=Courier>x </FONT>to the middle element 
of the array <FONT face=Courier>v</FONT>. If <FONT face=Courier>x </FONT>is less 
than the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 64855px"><NOBR>middle value, 
searching focuses on the lower half of the table, otherwise on the upper half. 
In either case, the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 64875px"><NOBR>next step is to 
compare <FONT face=Courier>x </FONT>to the middle element of the selected half. 
This process of dividing the range in two</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 64894px"><NOBR>continues until 
the value is found or the range is empty.</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 64934px"><NOBR>/* <B><SPAN 
class=goohl0>binsearch</SPAN></B>: find x in v[0] &lt;= v[1] &lt;= ... &lt;= 
v[n−1] */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 64950px"><NOBR>int <B><SPAN 
class=goohl0>binsearch</SPAN></B>(int x, int v[], int n)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 64967px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 64983px"><NOBR>int low, high, 
mid;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 65016px"><NOBR>low = 
0;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 65033px"><NOBR>high = n − 
1;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 65049px"><NOBR>while (low 
&lt;= high) {</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 65066px"><NOBR>mid = 
(low+high)/2;</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 65082px"><NOBR>if (x &lt; 
v[mid])</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 65099px"><NOBR>high = mid + 
1;</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 65115px"><NOBR>else if (x &gt; 
v[mid])</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 65132px"><NOBR>low = mid + 
1;</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 65148px"><NOBR>else /* found 
match */</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 65165px"><NOBR>return 
mid;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 65181px"><NOBR>}</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 65198px"><NOBR>return −1; /* 
no match */</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 65214px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 65251px"><NOBR>The fundamental 
decision is whether <FONT face=Courier>x </FONT>is less than, greater than, or 
equal to the middle element <FONT face=Courier>v[mid] </FONT>at</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 65271px"><NOBR>each step; this 
is a natural for <FONT face=Courier>else−if</FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 65310px"><NOBR><I><B>Exercise 
3−1. </B></I>Our binary search makes two tests inside the loop, when one would 
suffice (at the price of</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 65330px"><NOBR>more tests 
outside.) Write a version with only one test inside the loop and measure the 
difference in run−time.</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 64369px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 65449px"><NOBR>3.3 
Else−If</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 65449px"><NOBR>55</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 65515px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=56><B>Page 56</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=4><SPAN style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 65609px"><NOBR><B>3.4 
Switch</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 65656px"><NOBR>The <FONT 
face=Courier>switch </FONT>statement is a multi−way decision that tests whether 
an expression matches one of a number of</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 65675px"><NOBR><I>constant 
</I>integer values, and branches accordingly.</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 65715px"><NOBR>switch 
(<I>expression</I>) {</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 65731px"><NOBR>case 
<I>const−expr</I>: <I>statements</I></NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 65748px"><NOBR>case 
<I>const−expr</I>: <I>statements</I></NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 65764px"><NOBR>default: 
<I>statements</I></NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 65781px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 65817px"><NOBR>Each case is 
labeled by one or more integer−valued constants or constant expressions. If a 
case matches the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 65837px"><NOBR>expression 
value, execution starts at that case. All case expressions must be different. 
The case labeled</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 65858px"><NOBR>default <FONT 
face=Times>is executed if none of the other cases are satisfied. A 
</FONT>default <FONT face=Times>is optional; if it isn't there and 
if</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 65877px"><NOBR>none of the 
cases match, no action at all takes place. Cases and the default clause can 
occur in any order.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 65916px"><NOBR>In <FONT 
face=Times color=#0000ff><A 
href="#11">Chapter 
1 </A></FONT>we wrote a program to count the occurrences of each digit, white 
space, and all other characters,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 65936px"><NOBR>using a 
sequence of <FONT face=Courier>if ... else if ... else</FONT>. Here is the same 
program with a <FONT face=Courier>switch</FONT>:</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 65975px"><NOBR>#include 
&lt;stdio.h&gt;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 66008px"><NOBR>main() /* count 
digits, white space, others */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 66025px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 66041px"><NOBR>int c, i, 
nwhite, nother, ndigit[10];</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 66074px"><NOBR>nwhite = nother 
= 0;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 66091px"><NOBR>for (i = 0; i 
&lt; 10; i++)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 66107px"><NOBR>ndigit[i] = 
0;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 66124px"><NOBR>while ((c = 
getchar()) != EOF) {</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 66140px"><NOBR>switch (c) 
{</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 66157px"><NOBR>case '0': case 
'1': case '2': case '3': case '4':</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 66173px"><NOBR>case '5': case 
'6': case '7': case '8': case '9':</NOBR></DIV>
<DIV 
style="LEFT: 232px; POSITION: absolute; TOP: 66190px"><NOBR>ndigit[c−'0']++;</NOBR></DIV>
<DIV 
style="LEFT: 232px; POSITION: absolute; TOP: 66206px"><NOBR>break;</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 66223px"><NOBR>case ' 
':</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 66239px"><NOBR>case 
'\n':</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 66256px"><NOBR>case 
'\t':</NOBR></DIV>
<DIV 
style="LEFT: 232px; POSITION: absolute; TOP: 66272px"><NOBR>nwhite++;</NOBR></DIV>
<DIV 
style="LEFT: 232px; POSITION: absolute; TOP: 66289px"><NOBR>break;</NOBR></DIV>
<DIV 
style="LEFT: 199px; POSITION: absolute; TOP: 66305px"><NOBR>default:</NOBR></DIV>
<DIV 
style="LEFT: 232px; POSITION: absolute; TOP: 66322px"><NOBR>nother++;</NOBR></DIV>
<DIV 
style="LEFT: 232px; POSITION: absolute; TOP: 66338px"><NOBR>break;</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 66355px"><NOBR>}</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 66371px"><NOBR>}</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 66388px"><NOBR>printf("digits 
=");</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 66404px"><NOBR>for (i = 0; i 
&lt; 10; i++)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 66421px"><NOBR>printf(" %d", 
ndigit[i]);</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 66437px"><NOBR>printf(", white 
space = %d, other = %d\n",</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 66454px"><NOBR>nwhite, 
nother);</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 66470px"><NOBR>return 
0;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 66487px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 66523px"><NOBR>The <FONT 
face=Courier>break </FONT>statement causes an immediate exit from the <FONT 
face=Courier>switch</FONT>. Because cases serve just as labels, 
after</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 66543px"><NOBR>the code for 
one case is done, execution <I>falls through </I>to the next unless you take 
explicit action to escape.</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 66564px"><NOBR>break <FONT 
face=Times>and </FONT>return <FONT face=Times>are the most common ways to leave 
a </FONT>switch<FONT face=Times>. A </FONT>break <FONT face=Times>statement can 
also be used to</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 66583px"><NOBR>force an 
immediate exit from <FONT face=Courier>while</FONT>, <FONT 
face=Courier>for</FONT>, and <FONT face=Courier>do </FONT>loops, as will be 
discussed later in this chapter.</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 65557px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 66637px"><NOBR>3.4 
Switch</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 66637px"><NOBR>56</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 66703px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=57><B>Page 57</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 66795px"><NOBR>Falling through 
cases is a mixed blessing. On the positive side, it allows several cases to be 
attached to a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 66815px"><NOBR>single action, 
as with the digits in this <B><SPAN class=goohl2>example</SPAN></B>. But it also 
implies that normally each case must end with a</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 66836px"><NOBR>break <FONT 
face=Times>to prevent falling through to the next. Falling through from one case 
to another is not robust, being</FONT></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 66855px"><NOBR>prone to 
disintegration when the program is modified. With the exception of multiple 
labels for a single</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 66874px"><NOBR>computation, 
fall−throughs should be used sparingly, and commented.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 66914px"><NOBR>As a matter of 
good form, put a <FONT face=Courier>break </FONT>after the last case (the <FONT 
face=Courier>default </FONT>here) even though it's logically</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 66934px"><NOBR>unnecessary. 
Some day when another case gets added at the end, this bit of defensive 
programming will save</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 66954px"><NOBR>you.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 66993px"><NOBR><I><B>Exercise 
3−2. </B></I>Write a function <FONT face=Courier>escape(s,t) </FONT>that 
converts characters like newline and tab into visible</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 67013px"><NOBR>escape 
sequences like <FONT face=Courier>\n </FONT>and <FONT face=Courier>\t </FONT>as 
it copies the string <FONT face=Courier>t </FONT>to <FONT face=Courier>s</FONT>. 
Use a <FONT face=Courier>switch</FONT>. Write a function for the 
other</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 67033px"><NOBR>direction as 
well, converting escape sequences into the real 
characters.</NOBR></DIV></SPAN></FONT><FONT face=Times size=4><SPAN 
style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 67074px"><NOBR><B>3.5 Loops − 
While and For</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 67121px"><NOBR>We have already 
encountered the <FONT face=Courier>while </FONT>and <FONT face=Courier>for 
</FONT>loops. In</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 67160px"><NOBR>while 
(<I>expression</I>)</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 67177px"><NOBR><I>statement</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 67213px"><NOBR>the 
<I>expression </I>is evaluated. If it is non−zero, <I>statement </I>is executed 
and <I>expression </I>is re−evaluated. This cycle</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 67233px"><NOBR>continues until 
<I>expression </I>becomes zero, at which point execution resumes after 
<I>statement</I>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 67273px"><NOBR>The <FONT 
face=Courier>for </FONT>statement</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 67312px"><NOBR>for 
(<I>expr</I></NOBR></DIV></SPAN></FONT><FONT face=Courier size=2><SPAN 
style="FONT-SIZE: 9px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 207px; POSITION: absolute; TOP: 67313px"><NOBR><I>1</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 214px; POSITION: absolute; TOP: 67312px"><NOBR>; 
<I>expr</I></NOBR></DIV></SPAN></FONT><FONT face=Courier size=2><SPAN 
style="FONT-SIZE: 9px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 264px; POSITION: absolute; TOP: 67313px"><NOBR><I>2</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 271px; POSITION: absolute; TOP: 67312px"><NOBR>; 
<I>expr</I></NOBR></DIV></SPAN></FONT><FONT face=Courier size=2><SPAN 
style="FONT-SIZE: 9px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 320px; POSITION: absolute; TOP: 67313px"><NOBR><I>3</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 327px; POSITION: absolute; TOP: 67312px"><NOBR>)</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 67328px"><NOBR><I>statement</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 67365px"><NOBR>is equivalent 
to</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 67404px"><NOBR><I>expr</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 67406px"><NOBR><I>1</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 173px; POSITION: absolute; TOP: 67404px"><NOBR>;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 67421px"><NOBR>while 
(<I>expr</I></NOBR></DIV></SPAN></FONT><FONT face=Courier size=2><SPAN 
style="FONT-SIZE: 9px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 224px; POSITION: absolute; TOP: 67422px"><NOBR><I>2</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 231px; POSITION: absolute; TOP: 67421px"><NOBR>) 
{</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 67437px"><NOBR><I>statement</I></NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 67454px"><NOBR><I>expr</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 199px; POSITION: absolute; TOP: 67455px"><NOBR><I>3</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 206px; POSITION: absolute; TOP: 67454px"><NOBR>;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 67470px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 67507px"><NOBR>except for the 
behaviour of <FONT face=Courier>continue</FONT>, which is described in <A 
href="#61"></A><FONT 
face=Times color=#0000ff><A 
href="#61">Section 
3.7</A></FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 67546px"><NOBR>Grammatically, 
the three components of a <FONT face=Courier>for </FONT>loop are expressions. 
Most commonly, <I>expr</I></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 713px; POSITION: absolute; TOP: 67552px"><NOBR><I>1</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 723px; POSITION: absolute; TOP: 67546px"><NOBR>and 
<I>expr</I></NOBR></DIV></SPAN></FONT><FONT face=Times size=2><SPAN 
style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 780px; POSITION: absolute; TOP: 67552px"><NOBR><I>3</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 790px; POSITION: absolute; TOP: 67546px"><NOBR>are</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 67566px"><NOBR>assignments or 
function calls and <I>expr</I></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 361px; POSITION: absolute; TOP: 67572px"><NOBR><I>2</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 371px; POSITION: absolute; TOP: 67566px"><NOBR>is a relational 
expression. Any of the three parts can be omitted,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 67586px"><NOBR>although the 
semicolons must remain. If <I>expr</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 407px; POSITION: absolute; TOP: 67592px"><NOBR><I>1</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 417px; POSITION: absolute; TOP: 67586px"><NOBR>or 
<I>expr</I></NOBR></DIV></SPAN></FONT><FONT face=Times size=2><SPAN 
style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 464px; POSITION: absolute; TOP: 67592px"><NOBR><I>3</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 474px; POSITION: absolute; TOP: 67586px"><NOBR>is omitted, it 
is simply dropped from the expansion. If</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 67606px"><NOBR>the test, 
<I>expr</I></NOBR></DIV></SPAN></FONT><FONT face=Times size=2><SPAN 
style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 193px; POSITION: absolute; TOP: 67612px"><NOBR><I>2</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 67606px"><NOBR>, is not 
present, it is taken as permanently true, so</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 67645px"><NOBR>for (;;) 
{</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 67662px"><NOBR>...</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 67678px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 67715px"><NOBR>is an 
``infinite'' loop, presumably to be broken by other means, such as a <FONT 
face=Courier>break </FONT>or <FONT face=Courier>return</FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 67754px"><NOBR>Whether to use 
<FONT face=Courier>while </FONT>or <FONT face=Courier>for </FONT>is largely a 
matter of personal preference. For <B><SPAN class=goohl2>example</SPAN></B>, 
in</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 66745px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 67825px"><NOBR>3.5 Loops − 
While and For</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 67825px"><NOBR>57</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 67891px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=58><B>Page 58</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 67983px"><NOBR>while ((c = 
getchar()) == ' ' || c == '\n' || c = '\t')</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 68000px"><NOBR>; /* skip white 
space characters */</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 68036px"><NOBR>there is no 
initialization or re−initialization, so the <FONT face=Courier>while </FONT>is 
most natural.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 68076px"><NOBR>The <FONT 
face=Courier>for </FONT>is preferable when there is a simple initialization and 
increment since it keeps the loop control</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 68095px"><NOBR>statements 
close together and visible at the top of the loop. This is most obvious 
in</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 68135px"><NOBR>for (i = 0; i 
&lt; n; i++)</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 68151px"><NOBR>...</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 68188px"><NOBR>which is the C 
idiom for processing the first <FONT face=Courier>n </FONT>elements of an array, 
the analog of the Fortran DO loop or the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 68208px"><NOBR>Pascal <FONT 
face=Courier>for</FONT>. The analogy is not perfect, however, since the index 
variable <FONT face=Courier>i </FONT>retains its value when the 
loop</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 68227px"><NOBR>terminates for 
any reason. Because the components of the <FONT face=Courier>for </FONT>are 
arbitrary expressions, <FONT face=Courier>for </FONT>loops are not</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 68247px"><NOBR>restricted to 
arithmetic progressions. Nonetheless, it is bad style to force unrelated 
computations into the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 68267px"><NOBR>initialization 
and increment of a <FONT face=Courier>for</FONT>, which are better reserved for 
loop control operations.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 68307px"><NOBR>As a larger 
<B><SPAN class=goohl2>example</SPAN></B>, here is another version of <FONT 
face=Courier>atoi </FONT>for converting a string to its numeric equivalent. 
This</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 68326px"><NOBR>one is slightly 
more general than the one in <A 
href="#53"></A><FONT 
face=Times color=#0000ff><A 
href="#53">Chapter 
2</A></FONT><A 
href="#53"></A>; 
it copes with optional leading white space and an</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 68346px"><NOBR>optional <FONT 
face=Courier>+ </FONT>or <FONT face=Courier>− </FONT>sign. (<A 
href="#64"></A><FONT 
face=Times color=#0000ff><A 
href="#64">Chapter 
4 </A></FONT>shows <FONT face=Courier>atof</FONT>, which does the same 
conversion for floating−point numbers.)</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 68386px"><NOBR>The structure 
of the program reflects the form of the input:</NOBR></DIV>
<DIV style="LEFT: 116px; POSITION: absolute; TOP: 68425px"><NOBR><I>skip white 
space, if any</I></NOBR></DIV>
<DIV style="LEFT: 116px; POSITION: absolute; TOP: 68445px"><NOBR><I>get sign, if 
any</I></NOBR></DIV>
<DIV style="LEFT: 116px; POSITION: absolute; TOP: 68465px"><NOBR><I>get integer 
part and convert it</I></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 68505px"><NOBR>Each step does 
its part, and leaves things in a clean state for the next. The whole process 
terminates on the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 68524px"><NOBR>first character 
that could not be part of a number.</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 68564px"><NOBR>#include 
&lt;ctype.h&gt;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 68597px"><NOBR>/* atoi: 
convert s to integer; version 2 */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 68613px"><NOBR>int atoi(char 
s[])</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 68630px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 68646px"><NOBR>int i, n, 
sign;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 68679px"><NOBR>for (i = 0; 
isspace(s[i]); i++) /* skip white space */</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 68696px"><NOBR>;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 68712px"><NOBR>sign = (s[i] == 
'−') ? −1 : 1;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 68729px"><NOBR>if (s[i] == '+' 
|| s[i] == '−') /* skip sign */</NOBR></DIV>
<DIV 
style="LEFT: 199px; POSITION: absolute; TOP: 68745px"><NOBR>i++;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 68762px"><NOBR>for (n = 0; 
isdigit(s[i]); i++)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 68778px"><NOBR>n = 10 * n + 
(s[i] − '0');</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 68795px"><NOBR>return sign * 
n;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 68811px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 68848px"><NOBR>The standard 
library provides a more elaborate function <FONT face=Courier>strtol </FONT>for 
conversion of strings to long integers;</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 68868px"><NOBR>see <A 
href="#230"></A><FONT 
face=Times color=#0000ff><A 
href="#230">Section 
5 of Appendix B</A></FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 68907px"><NOBR>The advantages 
of keeping loop control centralized are even more obvious when there are several 
nested</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 68927px"><NOBR>loops. The 
following function is a Shell sort for sorting an array of integers. The basic 
idea of this sorting</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 68947px"><NOBR>algorithm, 
which was invented in 1959 by D. L. Shell, is that in early stages, far−apart 
elements are</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 68967px"><NOBR>compared, 
rather than adjacent ones as in simpler interchange sorts. This tends to 
eliminate large amounts of</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 67933px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 69013px"><NOBR>3.5 Loops − 
While and For</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 69013px"><NOBR>58</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 69079px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=59><B>Page 59</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 69171px"><NOBR>disorder 
quickly, so later stages have less work to do. The interval between compared 
elements is gradually</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 69191px"><NOBR>decreased to 
one, at which point the sort effectively becomes an adjacent interchange 
method.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 69230px"><NOBR>/* shellsort: 
sort v[0]...v[n−1] into increasing order */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 69247px"><NOBR>void 
shellsort(int v[], int n)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 69263px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 69280px"><NOBR>int gap, i, j, 
temp;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 69313px"><NOBR>for (gap = n/2; 
gap &gt; 0; gap /= 2)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 69329px"><NOBR>for (i = gap; i 
&lt; n; i++)</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 69346px"><NOBR>for (j=i−gap; 
j&gt;=0 &amp;v[j]&gt;v[j+gap]; j−=gap) {</NOBR></DIV>
<DIV style="LEFT: 265px; POSITION: absolute; TOP: 69362px"><NOBR>temp = 
v[j];</NOBR></DIV>
<DIV style="LEFT: 265px; POSITION: absolute; TOP: 69379px"><NOBR>v[j] = 
v[j+gap];</NOBR></DIV>
<DIV style="LEFT: 265px; POSITION: absolute; TOP: 69395px"><NOBR>v[j+gap] = 
temp;</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 69412px"><NOBR>}</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 69428px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 69465px"><NOBR>There are three 
nested loops. The outermost controls the gap between compared elements, 
shrinking it from</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 69486px"><NOBR>n/2 <FONT 
face=Times>by a factor of two each pass until it becomes zero. The middle loop 
steps along the elements. The</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 69505px"><NOBR>innermost loop 
compares each pair of elements that is separated by <FONT face=Courier>gap 
</FONT>and reverses any that are out of order.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 69524px"><NOBR>Since <FONT 
face=Courier>gap </FONT>is eventually reduced to one, all elements are 
eventually ordered correctly. Notice how the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 69544px"><NOBR>generality of 
the <FONT face=Courier>for </FONT>makes the outer loop fit in the same form as 
the others, even though it is not an</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 69564px"><NOBR>arithmetic 
progression.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 69604px"><NOBR>One final C 
operator is the comma ``<FONT face=Courier>,</FONT>'', which most often finds 
use in the <FONT face=Courier>for </FONT>statement. A pair of</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 69623px"><NOBR>expressions 
separated by a comma is evaluated left to right, and the type and value of the 
result are the type</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 69643px"><NOBR>and value of 
the right operand. Thus in a for statement, it is possible to place multiple 
expressions in the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 69663px"><NOBR>various parts, 
for <B><SPAN class=goohl2>example</SPAN></B> to process two indices in parallel. 
This is illustrated in the function <FONT 
face=Courier>reverse(s)</FONT>,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 69683px"><NOBR>which reverses 
the string <FONT face=Courier>s </FONT>in place.</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 69722px"><NOBR>#include 
&lt;string.h&gt;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 69755px"><NOBR>/* reverse: 
reverse string s in place */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 69772px"><NOBR>void 
reverse(char s[])</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 69788px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 69805px"><NOBR>int c, i, 
j;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 69838px"><NOBR>for (i = 0, j = 
strlen(s)−1; i &lt; j; i++, j−−) {</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 69854px"><NOBR>c = 
s[i];</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 69871px"><NOBR>s[i] = 
s[j];</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 69887px"><NOBR>s[j] = 
c;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 69904px"><NOBR>}</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 69920px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 69957px"><NOBR>The commas that 
separate function arguments, variables in declarations, etc., are <I>not 
</I>comma operators, and do</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 69976px"><NOBR>not guarantee 
left to right evaluation.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 70016px"><NOBR>Comma operators 
should be used sparingly. The most suitable uses are for constructs strongly 
related to each</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 70036px"><NOBR>other, as in 
the <FONT face=Courier>for </FONT>loop in <FONT face=Courier>reverse</FONT>, and 
in macros where a multistep computation has to be a single</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 70056px"><NOBR>expression. A 
comma expression might also be appropriate for the exchange of elements in <FONT 
face=Courier>reverse</FONT>, where</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 70075px"><NOBR>the exchange 
can be thought of a single operation:</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 141px; POSITION: absolute; TOP: 70115px"><NOBR>for (i = 0, j = 
strlen(s)−1; i &lt; j; i++, j−−)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 70131px"><NOBR>c = s[i], s[i] 
= s[j], s[j] = c;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 69121px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 70201px"><NOBR>3.5 Loops − 
While and For</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 70201px"><NOBR>59</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 70267px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=60><B>Page 60</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 70359px"><NOBR><I><B>Exercise 
3−3. </B></I>Write a function <FONT face=Courier>expand(s1,s2) </FONT>that 
expands shorthand notations like <FONT face=Courier>a−z </FONT>in the string 
<FONT face=Courier>s1</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 70379px"><NOBR>into the 
equivalent complete list <FONT face=Courier>abc...xyz </FONT>in <FONT 
face=Courier>s2</FONT>. Allow for letters of either case and digits, and 
be</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 70399px"><NOBR>prepared to 
handle cases like <FONT face=Courier>a−b−c </FONT>and <FONT face=Courier>a−z0−9 
</FONT>and <FONT face=Courier>−a−z</FONT>. Arrange that a leading or trailing 
<FONT face=Courier>− </FONT>is taken</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 70419px"><NOBR>literally.</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=4><SPAN style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 70460px"><NOBR><B>3.6 Loops − 
Do−While</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 70507px"><NOBR>As we discussed 
in <A 
href="#11"></A><FONT 
face=Times color=#0000ff><A 
href="#11">Chapter 
1</A></FONT><A 
href="#11"></A>, 
the <FONT face=Courier>while </FONT>and <FONT face=Courier>for </FONT>loops test 
the termination condition at the top. By contrast,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 70526px"><NOBR>the third loop 
in C, the <FONT face=Courier>do−while</FONT>, tests at the bottom <I>after 
</I>making each pass through the loop body; the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 70546px"><NOBR>body is always 
executed at least once.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 70586px"><NOBR>The syntax of 
the <FONT face=Courier>do </FONT>is</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 70625px"><NOBR>do</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 70642px"><NOBR><I>statement</I></NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 70658px"><NOBR>while 
(<I>expression</I>);</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 70695px"><NOBR>The 
<I>statement </I>is executed, then <I>expression </I>is evaluated. If it is 
true, <I>statement </I>is evaluated again, and so on.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 70714px"><NOBR>When the 
expression becomes false, the loop terminates. Except for the sense of the test, 
<FONT face=Courier>do−while </FONT>is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 70734px"><NOBR>equivalent to 
the Pascal <FONT face=Courier>repeat−until </FONT>statement.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 70774px"><NOBR>Experience 
shows that <FONT face=Courier>do−while </FONT>is much less used than <FONT 
face=Courier>while </FONT>and <FONT face=Courier>for</FONT>. Nonetheless, from 
time to time it</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 70794px"><NOBR>is valuable, as 
in the following function <FONT face=Courier>itoa</FONT>, which converts a 
number to a character string (the inverse of</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 70814px"><NOBR>atoi<FONT 
face=Times>). The job is slightly more complicated than might be thought at 
first, because the easy methods of</FONT></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 70833px"><NOBR>generating the 
digits generate them in the wrong order. We have chosen to generate the string 
backwards, then</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 70853px"><NOBR>reverse 
it.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 70892px"><NOBR>/* itoa: 
convert n to characters in s */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 70909px"><NOBR>void itoa(int 
n, char s[])</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 70925px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 70942px"><NOBR>int i, 
sign;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 70975px"><NOBR>if ((sign = n) 
&lt; 0) /* record sign */</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 70991px"><NOBR>n = −n; /* make 
n positive */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 71008px"><NOBR>i = 
0;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 71024px"><NOBR>do { /* 
generate digits in reverse order */</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 71041px"><NOBR>s[i++] = n % 10 
+ '0'; /* get next digit */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 71057px"><NOBR>} while ((n /= 
10) &gt; 0); /* delete it */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 71074px"><NOBR>if (sign &lt; 
0)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 71090px"><NOBR>s[i++] = 
'−';</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 71107px"><NOBR>s[i] = 
'\0';</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 71123px"><NOBR>reverse(s);</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 71140px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 71176px"><NOBR>The <FONT 
face=Courier>do−while </FONT>is necessary, or at least convenient, since at 
least one character must be installed in the 
array</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 71197px"><NOBR>s<FONT 
face=Times>, even if </FONT>n <FONT face=Times>is zero. We also used braces 
around the single statement that makes up the body of the</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 71217px"><NOBR>do−while<FONT 
face=Times>, even though they are unnecessary, so the hasty reader will not 
mistake the </FONT>while <FONT face=Times>part for 
the</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 71236px"><NOBR><I>beginning 
</I>of a <FONT face=Courier>while </FONT>loop.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 71275px"><NOBR><I><B>Exercise 
3−4. </B></I>In a two's complement number representation, our version of <FONT 
face=Courier>itoa </FONT>does not handle the largest</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 71295px"><NOBR>negative 
number, that is, the value of <FONT face=Courier>n </FONT>equal to 
−(2</NOBR></DIV></SPAN></FONT><FONT face=Times size=2><SPAN 
style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 451px; POSITION: absolute; TOP: 71291px"><NOBR>wordsize−1</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 504px; POSITION: absolute; TOP: 71295px"><NOBR>). Explain why 
not. Modify it to print that value</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 71315px"><NOBR>correctly, 
regardless of the machine on which it runs.</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 70309px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 71389px"><NOBR>3.6 Loops − 
Do−While</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 71389px"><NOBR>60</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 71455px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=61><B>Page 61</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 71547px"><NOBR><I><B>Exercise 
3−5. </B></I>Write the function <FONT face=Courier>itob(n,s,b) </FONT>that 
converts the integer <FONT face=Courier>n </FONT>into a base <FONT 
face=Courier>b </FONT>character</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 71567px"><NOBR>representation 
in the string <FONT face=Courier>s</FONT>. In particular, <FONT 
face=Courier>itob(n,s,16) </FONT>formats <FONT face=Courier>s </FONT>as a 
hexadecimal integer in <FONT face=Courier>s</FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 71607px"><NOBR><I><B>Exercise 
3−6. </B></I>Write a version of <FONT face=Courier>itoa </FONT>that accepts 
three arguments instead of two. The third argument is a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 71626px"><NOBR>minimum field 
width; the converted number must be padded with blanks on the left if necessary 
to make it</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 71646px"><NOBR>wide 
enough.</NOBR></DIV></SPAN></FONT><FONT face=Times size=4><SPAN 
style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 71687px"><NOBR><B>3.7 Break 
and Continue</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 71734px"><NOBR>It is sometimes 
convenient to be able to exit from a loop other than by testing at the top or 
bottom. The</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 71755px"><NOBR>break <FONT 
face=Times>statement provides an early exit from </FONT>for<FONT face=Times>, 
</FONT>while<FONT face=Times>, and </FONT>do<FONT face=Times>, just as from 
</FONT>switch<FONT face=Times>. A </FONT>break <FONT 
face=Times>causes</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 71774px"><NOBR>the innermost 
enclosing loop or <FONT face=Courier>switch </FONT>to be exited 
immediately.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 71813px"><NOBR>The following 
function, <FONT face=Courier>trim</FONT>, removes trailing blanks, tabs and 
newlines from the end of a string, using a</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 71834px"><NOBR>break <FONT 
face=Times>to exit from a loop when the rightmost non−blank, non−tab, 
non−newline is found.</FONT></NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 71873px"><NOBR>/* trim: remove 
trailing blanks, tabs, newlines */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 71889px"><NOBR>int trim(char 
s[])</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 71906px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 71922px"><NOBR>int 
n;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 71955px"><NOBR>for (n = 
strlen(s)−1; n &gt;= 0; n−−)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 71972px"><NOBR>if (s[n] != ' ' 
&amp;s[n] != '\t' &amp;s[n] != '\n')</NOBR></DIV>
<DIV 
style="LEFT: 232px; POSITION: absolute; TOP: 71988px"><NOBR>break;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 72005px"><NOBR>s[n+1] = 
'\0';</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 72021px"><NOBR>return 
n;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 72038px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 72075px"><NOBR>strlen <FONT 
face=Times>returns the length of the string. The </FONT>for <FONT 
face=Times>loop starts at the end and scans backwards looking for 
the</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 72094px"><NOBR>first character 
that is not a blank or tab or newline. The loop is broken when one is found, or 
when <FONT face=Courier>n </FONT>becomes</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 72114px"><NOBR>negative (that 
is, when the entire string has been scanned). You should verify that this is 
correct behavior even</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 72133px"><NOBR>when the string 
is empty or contains only white space characters.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 72173px"><NOBR>The <FONT 
face=Courier>continue </FONT>statement is related to <FONT 
face=Courier>break</FONT>, but less often used; it causes the next iteration of 
the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 72193px"><NOBR>enclosing <FONT 
face=Courier>for</FONT>, <FONT face=Courier>while</FONT>, or <FONT 
face=Courier>do </FONT>loop to begin. In the <FONT face=Courier>while </FONT>and 
<FONT face=Courier>do</FONT>, this means that the test part is 
executed</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 72213px"><NOBR>immediately; in 
the <FONT face=Courier>for</FONT>, control passes to the increment step. The 
<FONT face=Courier>continue </FONT>statement applies only to</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 72232px"><NOBR>loops, not to 
<FONT face=Courier>switch</FONT>. A <FONT face=Courier>continue </FONT>inside a 
<FONT face=Courier>switch </FONT>inside a loop causes the next loop 
iteration.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 72272px"><NOBR>As an <B><SPAN 
class=goohl2>example</SPAN></B>, this fragment processes only the non−negative 
elements in the array <FONT face=Courier>a</FONT>; negative values 
are</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 72292px"><NOBR>skipped.</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 72331px"><NOBR>for (i = 0; i 
&lt; n; i++)</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 72348px"><NOBR>if (a[i] &lt; 
0) /* skip negative elements */</NOBR></DIV>
<DIV 
style="LEFT: 199px; POSITION: absolute; TOP: 72364px"><NOBR>continue;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 72381px"><NOBR>... /* do 
positive elements */</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 72417px"><NOBR>The <FONT 
face=Courier>continue </FONT>statement is often used when the part of the loop 
that follows is complicated, so that</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 72437px"><NOBR>reversing a 
test and indenting another level would nest the program too 
deeply.</NOBR></DIV></SPAN></FONT><FONT face=Times size=4><SPAN 
style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 72478px"><NOBR><B>3.8 Goto and 
labels</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 72525px"><NOBR>C provides the 
infinitely−abusable <FONT face=Courier>goto </FONT>statement, and labels to 
branch to. Formally, the <FONT face=Courier>goto </FONT>statement 
is</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 71497px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 72577px"><NOBR>3.7 Break and 
Continue</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 72577px"><NOBR>61</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 72643px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=62><B>Page 62</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 72735px"><NOBR>never 
necessary, and in practice it is almost always easy to write code without it. We 
have not used <FONT face=Courier>goto </FONT>in</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 72755px"><NOBR>this 
book.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 72795px"><NOBR>Nevertheless, 
there are a few situations where <FONT face=Courier>goto</FONT>s may find a 
place. The most common is to abandon</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 72814px"><NOBR>processing in 
some deeply nested structure, such as breaking out of two or more loops at once. 
The <FONT face=Courier>break</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 72834px"><NOBR>statement 
cannot be used directly since it only exits from the innermost loop. 
Thus:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 72874px"><NOBR>for ( ... 
)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 72890px"><NOBR>for ( ... ) 
{</NOBR></DIV>
<DIV 
style="LEFT: 232px; POSITION: absolute; TOP: 72907px"><NOBR>...</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 72923px"><NOBR>if 
(disaster)</NOBR></DIV>
<DIV style="LEFT: 265px; POSITION: absolute; TOP: 72940px"><NOBR>goto 
error;</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 72956px"><NOBR>}</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 72973px"><NOBR>...</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 72989px"><NOBR>error:</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 73006px"><NOBR>/* clean up the 
mess */</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 73042px"><NOBR>This 
organization is handy if the error−handling code is non−trivial, and if errors 
can occur in several places.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 73082px"><NOBR>A label has the 
same form as a variable name, and is followed by a colon. It can be attached to 
any statement</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 73102px"><NOBR>in the same 
function as the <FONT face=Courier>goto</FONT>. The scope of a label is the 
entire function.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 73141px"><NOBR>As another 
<B><SPAN class=goohl2>example</SPAN></B>, consider the problem of determining 
whether two arrays <FONT face=Courier>a </FONT>and <FONT face=Courier>b 
</FONT>have an element in</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 73161px"><NOBR>common. One 
possibility is</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 73200px"><NOBR>for (i = 0; i 
&lt; n; i++)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 73217px"><NOBR>for (j = 0; j 
&lt; m; j++)</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 73233px"><NOBR>if (a[i] == 
b[j])</NOBR></DIV>
<DIV style="LEFT: 265px; POSITION: absolute; TOP: 73250px"><NOBR>goto 
found;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 73266px"><NOBR>/* didn't find 
any common element */</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 73283px"><NOBR>...</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 73299px"><NOBR>found:</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 73316px"><NOBR>/* got one: 
a[i] == b[j] */</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 73332px"><NOBR>...</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 73369px"><NOBR>Code involving 
a <FONT face=Courier>goto </FONT>can always be written without one, though 
perhaps at the price of some repeated tests</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 73389px"><NOBR>or an extra 
variable. For <B><SPAN class=goohl2>example</SPAN></B>, the array search 
becomes</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 73428px"><NOBR>found = 
0;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 73445px"><NOBR>for (i = 0; i 
&lt; n &amp;!found; i++)</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 73461px"><NOBR>for (j = 0; j 
&lt; m &amp;!found; j++)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 73478px"><NOBR>if (a[i] == 
b[j])</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 73494px"><NOBR>found = 
1;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 73511px"><NOBR>if 
(found)</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 73527px"><NOBR>/* got one: 
a[i−1] == b[j−1] */</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 73544px"><NOBR>...</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 73560px"><NOBR>else</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 73577px"><NOBR>/* didn't find 
any common element */</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 73593px"><NOBR>...</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 73630px"><NOBR>With a few 
exceptions like those cited here, code that relies on <FONT face=Courier>goto 
</FONT>statements is generally harder to</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 73649px"><NOBR>understand and 
to maintain than code without <FONT face=Courier>goto</FONT>s. Although we are 
not dogmatic about the matter, it does</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 73669px"><NOBR>seem that <FONT 
face=Courier>goto </FONT>statements should be used rarely, if at 
all.</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 320px; POSITION: absolute; TOP: 73712px"><NOBR><A 
href="#36">Back 
to Chapter 2 </A><FONT face=Times color=#000000>−− </FONT><A 
href="#1">Index 
</A><FONT face=Times color=#000000>−− </FONT><A 
href="#64">Chapter 
4</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 72685px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 73765px"><NOBR>3.7 Break and 
Continue</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 73765px"><NOBR>62</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 73831px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=63><B>Page 63</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 73873px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 74953px"><NOBR>3.7 Break and 
Continue</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 74953px"><NOBR>63</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 75019px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=64><B>Page 64</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 320px; POSITION: absolute; TOP: 75134px"><NOBR><A 
href="#53">Back 
to Chapter 3 </A><FONT face=Times color=#000000>−− </FONT><A 
href="#1">Index 
</A><FONT face=Times color=#000000>−− </FONT><A 
href="#86">Chapter 
5</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=4><SPAN 
style="FONT-SIZE: 26px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 75179px"><NOBR><B>Chapter 4 − 
Functions and Program Structure</B></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 75231px"><NOBR>Functions break 
large computing tasks into smaller ones, and enable people to build on what 
others have done</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 75250px"><NOBR>instead of 
starting over from scratch. Appropriate functions hide details of operation from 
parts of the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 75270px"><NOBR>program that 
don't need to know about them, thus clarifying the whole, and easing the pain of 
making</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 75290px"><NOBR>changes.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 75330px"><NOBR>C has been 
designed to make functions efficient and easy to use; C programs generally 
consist of many small</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 75349px"><NOBR>functions 
rather than a few big ones. A program may reside in one or more source files. 
Source files may be</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 75369px"><NOBR>compiled 
separately and loaded together, along with previously compiled functions from 
libraries. We will not</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 75389px"><NOBR>go into that 
process here, however, since the details vary from system to 
system.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 75429px"><NOBR>Function 
declaration and definition is the area where the ANSI standard has made the most 
changes to C. As</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 75448px"><NOBR>we saw first in 
<FONT face=Times color=#0000ff><A 
href="#11">Chapter 
1</A></FONT>, it is now possible to declare the type of arguments when a 
function is declared. The</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 75468px"><NOBR>syntax of 
function declaration also changes, so that declarations and definitions match. 
This makes it possible</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 75488px"><NOBR>for a compiler 
to detect many more errors than it could before. Furthermore, when arguments are 
properly</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 75508px"><NOBR>declared, 
appropriate type coercions are performed automatically.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 75547px"><NOBR>The standard 
clarifies the rules on the scope of names; in particular, it requires that there 
be only one</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 75567px"><NOBR>definition of 
each external object. Initialization is more general: automatic arrays and 
structures may now be</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 75587px"><NOBR>initialized.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 75627px"><NOBR>The C 
preprocessor has also been enhanced. New preprocessor facilities include a more 
complete set of</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 75646px"><NOBR>conditional 
compilation directives, a way to create quoted strings from macro arguments, and 
better control</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 75666px"><NOBR>over the macro 
expansion process.</NOBR></DIV></SPAN></FONT><FONT face=Times size=4><SPAN 
style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 75707px"><NOBR><B>4.1 Basics 
of Functions</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 75754px"><NOBR>To begin with, 
let us design and write a program to print each line of its input that contains 
a particular</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 75774px"><NOBR>``pattern'' or 
string of characters. (This is a special case of the UNIX program <FONT 
face=Courier>grep</FONT>.) For <B><SPAN class=goohl2>example</SPAN></B>, 
searching</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 75794px"><NOBR>for the pattern 
of letters ``<FONT face=Courier>ould</FONT>'' in the set of 
lines</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 75833px"><NOBR>Ah Love! could 
you and I with Fate conspire</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 75850px"><NOBR>To grasp this 
sorry Scheme of Things entire,</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 75866px"><NOBR>Would not we 
shatter it to bits −− and then</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 75883px"><NOBR>Re−mould it 
nearer to the Heart's Desire!</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 75919px"><NOBR>will produce 
the output</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 75959px"><NOBR>Ah Love! could 
you and I with Fate conspire</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 75975px"><NOBR>Would not we 
shatter it to bits −− and then</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 75992px"><NOBR>Re−mould it 
nearer to the Heart's Desire!</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 76028px"><NOBR>The job falls 
neatly into three pieces:</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 76067px"><NOBR>while 
(<I>there's another line</I>)</NOBR></DIV>
<DIV style="LEFT: 141px; POSITION: absolute; TOP: 76084px"><NOBR>if (<I>the line 
contains the pattern</I>)</NOBR></DIV>
<DIV style="LEFT: 174px; POSITION: absolute; TOP: 76100px"><NOBR><I>print 
it</I></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 75061px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 76141px"><NOBR>Chapter 4 − 
Functions and Program Structure</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 76141px"><NOBR>64</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 76207px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=65><B>Page 65</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 76299px"><NOBR>Although it's 
certainly possible to put the code for all of this in <FONT 
face=Courier>main</FONT>, a better way is to use the structure to</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 76319px"><NOBR>advantage by 
making each part a separate function. Three small pieces are better to deal with 
than one big</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 76339px"><NOBR>one, because 
irrelevant details can be buried in the functions, and the chance of unwanted 
interactions is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 76359px"><NOBR>minimized. And 
the pieces may even be useful in other programs.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 76398px"><NOBR>``While there's 
another line'' is <FONT face=Courier>getline</FONT>, a function that we wrote in 
<A 
href="#11"></A><FONT 
face=Times color=#0000ff><A 
href="#11">Chapter 
1</A></FONT>, and ``print it'' is <FONT face=Courier>printf</FONT>,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 76418px"><NOBR>which someone 
has already provided for us. This means we need only write a routine to decide 
whether the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 76438px"><NOBR>line contains 
an occurrence of the pattern.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 76477px"><NOBR>We can solve 
that problem by writing a function <FONT face=Courier>strindex(s,t) </FONT>that 
returns the position or index in the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 76497px"><NOBR>string <FONT 
face=Courier>s </FONT>where the string <FONT face=Courier>t </FONT>begins, or 
<FONT face=Courier>−1 </FONT>if <FONT face=Courier>s </FONT>does not contain 
<FONT face=Courier>t</FONT>. Because C arrays begin at position 
zero,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 76517px"><NOBR>indexes will be 
zero or positive, and so a negative value like <FONT face=Courier>−1 </FONT>is 
convenient for signaling failure. When we</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 76537px"><NOBR>later need more 
sophisticated pattern matching, we only have to replace <FONT 
face=Courier>strindex</FONT>; the rest of the code can</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 76557px"><NOBR>remain the 
same. (The standard library provides a function <FONT face=Courier>strstr 
</FONT>that is similar to <FONT face=Courier>strindex</FONT>, except 
that</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 76576px"><NOBR>it returns a 
pointer instead of an index.)</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 76616px"><NOBR>Given this much 
design, filling in the details of the program is straightforward. Here is the 
whole thing, so</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 76636px"><NOBR>you can see how 
the pieces fit together. For now, the pattern to be searched for is a literal 
string, which is not</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 76656px"><NOBR>the most 
general of mechanisms. We will return shortly to a discussion of how to 
initialize character arrays,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 76675px"><NOBR>and in <FONT 
face=Times color=#0000ff><A 
href="#86">Chapter 
5 </A></FONT>will show how to make the pattern a parameter that is set when the 
program is run. There is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 76695px"><NOBR>also a slightly 
different version of <FONT face=Courier>getline</FONT>; you might find it 
instructive to compare it to the one in <FONT face=Times color=#0000ff><A 
href="#11">Chapter</A></FONT></NOBR></DIV></SPAN></FONT><FONT 
face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 76715px"><NOBR><A 
href="#11">1</A><FONT 
face=Times color=#000000>.</FONT></NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 76754px"><NOBR>#include 
&lt;stdio.h&gt;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 76771px"><NOBR>#define MAXLINE 
1000 /* maximum input line length */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 76804px"><NOBR>int 
getline(char line[], int max)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 76820px"><NOBR>int 
strindex(char source[], char searchfor[]);</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 76853px"><NOBR>char pattern[] 
= "ould"; /* pattern to search for */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 76886px"><NOBR>/* find all 
lines matching pattern */</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 76903px"><NOBR>main()</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 76919px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 76936px"><NOBR>char 
line[MAXLINE];</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 76952px"><NOBR>int found = 
0;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 76985px"><NOBR>while 
(getline(line, MAXLINE) &gt; 0)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 77002px"><NOBR>if 
(strindex(line, pattern) &gt;= 0) {</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 77018px"><NOBR>printf("%s", 
line);</NOBR></DIV>
<DIV 
style="LEFT: 232px; POSITION: absolute; TOP: 77035px"><NOBR>found++;</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 77051px"><NOBR>}</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 77068px"><NOBR>return 
found;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 77084px"><NOBR>}</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 77117px"><NOBR>/* getline: get 
line into s, return length */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 77134px"><NOBR>int 
getline(char s[], int lim)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 77150px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 77167px"><NOBR>int c, 
i;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 77200px"><NOBR>i = 
0;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 77216px"><NOBR>while (−−lim 
&gt; 0 &amp;(c=getchar()) != EOF &amp;c != '\n')</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 77233px"><NOBR>s[i++] = 
c;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 77249px"><NOBR>if (c == 
'\n')</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 77266px"><NOBR>s[i++] = 
c;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 77282px"><NOBR>s[i] = 
'\0';</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 76249px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 77329px"><NOBR>Chapter 4 − 
Functions and Program Structure</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 77329px"><NOBR>65</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 77395px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=66><B>Page 66</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 77487px"><NOBR>return 
i;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 77504px"><NOBR>}</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 77537px"><NOBR>/* strindex: 
return index of t in s, −1 if none */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 77553px"><NOBR>int 
strindex(char s[], char t[])</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 77570px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 77586px"><NOBR>int i, j, 
k;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 77619px"><NOBR>for (i = 0; 
s[i] != '\0'; i++) {</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 77636px"><NOBR>for (j=i, k=0; 
t[k]!='\0' &amp;s[j]==t[k]; j++, k++)</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 77652px"><NOBR>;</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 77669px"><NOBR>if (k &gt; 0 
&amp;t[k] == '\0')</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 77685px"><NOBR>return 
i;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 77702px"><NOBR>}</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 77718px"><NOBR>return 
−1;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 77735px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 77771px"><NOBR>Each function 
definition has the form</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 77810px"><NOBR><I>return−type 
function−name</I>(<I>argument declarations</I>)</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 77827px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 141px; POSITION: absolute; TOP: 77843px"><NOBR><I>declarations 
and statements</I></NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 77860px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 77896px"><NOBR>Various parts 
may be absent; a minimal function is</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 77936px"><NOBR>dummy() 
{}</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 77972px"><NOBR>which does 
nothing and returns nothing. A do−nothing function like this is sometimes useful 
as a place holder</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 77992px"><NOBR>during program 
development. If the return type is omitted, <FONT face=Courier>int </FONT>is 
assumed.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 78032px"><NOBR>A program is 
just a set of definitions of variables and functions. Communication between the 
functions is by</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 78052px"><NOBR>arguments and 
values returned by the functions, and through external variables. The functions 
can occur in</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 78071px"><NOBR>any order in 
the source file, and the source program can be split into multiple files, so 
long as no function is</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 78091px"><NOBR>split.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 78131px"><NOBR>The <FONT 
face=Courier>return </FONT>statement is the mechanism for returning a value from 
the called function to its caller. Any</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 78151px"><NOBR>expression can 
follow <FONT face=Courier>return</FONT>:</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 78190px"><NOBR>return 
<I>expression</I>;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 78226px"><NOBR>The 
<I>expression </I>will be converted to the return type of the function if 
necessary. Parentheses are often used</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 78246px"><NOBR>around the 
<I>expression</I>, but they are optional.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 78286px"><NOBR>The calling 
function is free to ignore the returned value. Furthermore, there need to be no 
expression after</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 78307px"><NOBR>return<FONT 
face=Times>; in that case, no value is returned to the caller. Control also 
returns to the caller with no value when</FONT></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 78325px"><NOBR>execution 
``falls off the end'' of the function by reaching the closing right brace. It is 
not illegal, but probably</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 78345px"><NOBR>a sign of 
trouble, if a function returns a value from one place and no value from another. 
In any case, if a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 78365px"><NOBR>function fails 
to return a value, its ``value'' is certain to be garbage.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 78405px"><NOBR>The 
pattern−searching program returns a status from <FONT face=Courier>main</FONT>, 
the number of matches found. This value is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 78424px"><NOBR>available for 
use by the environment that called the program</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 78464px"><NOBR>The mechanics 
of how to compile and load a C program that resides on multiple source files 
vary from one</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 77437px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 78517px"><NOBR>Chapter 4 − 
Functions and Program Structure</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 78517px"><NOBR>66</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 78583px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=67><B>Page 67</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 78675px"><NOBR>system to the 
next. On the UNIX system, for <B><SPAN class=goohl2>example</SPAN></B>, the 
<FONT face=Courier>cc </FONT>command mentioned in <A 
href="#11"></A><FONT 
face=Times color=#0000ff><A 
href="#11">Chapter 
1 </A></FONT>does the job.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 78695px"><NOBR>Suppose that 
the three functions are stored in three files called <FONT 
face=Courier>main.c</FONT>, <FONT face=Courier>getline.c</FONT>, and <FONT 
face=Courier>strindex.c</FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 78715px"><NOBR>Then the 
command</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 78754px"><NOBR>cc main.c 
getline.c strindex.c</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 78791px"><NOBR>compiles the 
three files, placing the resulting object code in files <FONT 
face=Courier>main.o</FONT>, <FONT face=Courier>getline.o</FONT>, and <FONT 
face=Courier>strindex.o</FONT>,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 78811px"><NOBR>then loads them 
all into an executable file called <FONT face=Courier>a.out</FONT>. If there is 
an error, say in <FONT face=Courier>main.c</FONT>, the file can be</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 78830px"><NOBR>recompiled by 
itself and the result loaded with the previous object files, with the 
command</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 78870px"><NOBR>cc main.c 
getline.o strindex.o</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 78906px"><NOBR>The <FONT 
face=Courier>cc </FONT>command uses the ``<FONT face=Courier>.c</FONT>'' versus 
``<FONT face=Courier>.o</FONT>'' naming convention to distinguish source files 
from object files.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 78946px"><NOBR><I><B>Exercise 
4−1. </B></I>Write the function <FONT face=Courier>strindex(s,t) </FONT>which 
returns the position of the <I>rightmost </I>occurrence</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 78966px"><NOBR>of <FONT 
face=Courier>t </FONT>in <FONT face=Courier>s</FONT>, or <FONT face=Courier>−1 
</FONT>if there is none.</NOBR></DIV></SPAN></FONT><FONT face=Times size=4><SPAN 
style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 79007px"><NOBR><B>4.2 
Functions Returning Non−integers</B></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 79054px"><NOBR>So far our 
examples of functions have returned either no value (<FONT 
face=Courier>void</FONT>) or an <FONT face=Courier>int</FONT>. What if a 
function must</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 79073px"><NOBR>return some 
other type? many numerical functions like <FONT face=Courier>sqrt</FONT>, <FONT 
face=Courier>sin</FONT>, and <FONT face=Courier>cos </FONT>return <FONT 
face=Courier>double</FONT>; other</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 79093px"><NOBR>specialized 
functions return other types. To illustrate how to deal with this, let us write 
and use the function</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 79114px"><NOBR>atof(s)<FONT 
face=Times>, which converts the string </FONT>s <FONT face=Times>to its 
double−precision floating−point equivalent. </FONT>atof <FONT face=Times>if 
an</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 79133px"><NOBR>extension of 
<FONT face=Courier>atoi</FONT>, which we showed versions of in <A 
href="#36"></A><FONT 
face=Times color=#0000ff><A 
href="#36">Chapters 
2 </A></FONT>and <A 
href="#53"></A><FONT 
face=Times color=#0000ff><A 
href="#53">3</A></FONT><A 
href="#53"></A>. 
It handles an optional sign and decimal</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 79153px"><NOBR>point, and the 
presence or absence of either part or fractional part. Our version is <I>not 
</I>a high−quality input</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 79172px"><NOBR>conversion 
routine; that would take more space than we care to use. The standard library 
includes an <FONT face=Courier>atof</FONT>;</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 79192px"><NOBR>the header 
<FONT face=Courier>&lt;stdlib.h&gt; </FONT>declares it.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 79232px"><NOBR>First, <FONT 
face=Courier>atof </FONT>itself must declare the type of value it returns, since 
it is not <FONT face=Courier>int</FONT>. The type name precedes the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 79252px"><NOBR>function 
name:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 79291px"><NOBR>#include 
&lt;ctype.h&gt;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 79324px"><NOBR>/* atof: 
convert string s to double */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 79340px"><NOBR>double 
atof(char s[])</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 79357px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 79373px"><NOBR>double val, 
power;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 79390px"><NOBR>int i, 
sign;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 79423px"><NOBR>for (i = 0; 
isspace(s[i]); i++) /* skip white space */</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 79439px"><NOBR>;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 79456px"><NOBR>sign = (s[i] == 
'−') ? −1 : 1;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 79472px"><NOBR>if (s[i] == '+' 
|| s[i] == '−')</NOBR></DIV>
<DIV 
style="LEFT: 199px; POSITION: absolute; TOP: 79489px"><NOBR>i++;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 79505px"><NOBR>for (val = 0.0; 
isdigit(s[i]); i++)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 79522px"><NOBR>val = 10.0 * 
val + (s[i] − '0');</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 79538px"><NOBR>if (s[i] == 
'.')</NOBR></DIV>
<DIV 
style="LEFT: 199px; POSITION: absolute; TOP: 79555px"><NOBR>i++;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 79571px"><NOBR>for (power = 
1.0; isdigit(s[i]); i++) {</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 79588px"><NOBR>val = 10.0 * 
val + (s[i] − '0');</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 79604px"><NOBR>power *= 
10;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 79621px"><NOBR>}</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 79637px"><NOBR>return sign * 
val / power;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 79654px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 78625px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 79705px"><NOBR>4.2 Functions 
Returning Non−integers</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 79705px"><NOBR>67</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 79771px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=68><B>Page 68</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 79863px"><NOBR>Second, and 
just as important, the calling routine must know that <FONT face=Courier>atof 
</FONT>returns a non−int value. One way to</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 79883px"><NOBR>ensure this is 
to declare <FONT face=Courier>atof </FONT>explicitly in the calling routine. The 
declaration is shown in this primitive</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 79903px"><NOBR>calculator 
(barely adequate for check−book balancing), which reads one number per line, 
optionally preceded</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 79923px"><NOBR>with a sign, 
and adds them up, printing the running sum after each 
input:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 79962px"><NOBR>#include 
&lt;stdio.h&gt;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 79995px"><NOBR>#define MAXLINE 
100</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 80028px"><NOBR>/* rudimentary 
calculator */</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 80045px"><NOBR>main()</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 80061px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 80078px"><NOBR>double sum, 
atof(char []);</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 80094px"><NOBR>char 
line[MAXLINE];</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 80111px"><NOBR>int 
getline(char line[], int max);</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 80144px"><NOBR>sum = 
0;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 80160px"><NOBR>while 
(getline(line, MAXLINE) &gt; 0)</NOBR></DIV>
<DIV 
style="LEFT: 199px; POSITION: absolute; TOP: 80177px"><NOBR>printf("\t%g\n", sum 
+= atof(line));</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 80193px"><NOBR>return 
0;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 80210px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 80246px"><NOBR>The 
declaration</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 80285px"><NOBR>double sum, 
atof(char []);</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 80322px"><NOBR>says that <FONT 
face=Courier>sum </FONT>is a <FONT face=Courier>double </FONT>variable, and that 
<FONT face=Courier>atof </FONT>is a function that takes one <FONT 
face=Courier>char[] </FONT>argument and</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 80342px"><NOBR>returns a <FONT 
face=Courier>double</FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 80381px"><NOBR>The function 
<FONT face=Courier>atof </FONT>must be declared and defined consistently. If 
<FONT face=Courier>atof </FONT>itself and the call to it in <FONT 
face=Courier>main </FONT>have</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 80401px"><NOBR>inconsistent 
types in the same source file, the error will be detected by the compiler. But 
if (as is more likely)</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 80422px"><NOBR>atof <FONT 
face=Times>were compiled separately, the mismatch would not be detected, 
</FONT>atof <FONT face=Times>would return a </FONT>double <FONT 
face=Times>that</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 80442px"><NOBR>main <FONT 
face=Times>would treat as an </FONT>int<FONT face=Times>, and meaningless 
answers would result.</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 80480px"><NOBR>In the light of 
what we have said about how declarations must match definitions, this might seem 
surprising.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 80500px"><NOBR>The reason a 
mismatch can happen is that if there is no function prototype, a function is 
implicitly declared by</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 80520px"><NOBR>its first 
appearance in an expression, such as</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 80559px"><NOBR>sum += 
atof(line)</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 80596px"><NOBR>If a name that 
has not been previously declared occurs in an expression and is followed by a 
left parentheses,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 80616px"><NOBR>it is declared 
by context to be a function name, the function is assumed to return an <FONT 
face=Courier>int</FONT>, and nothing is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 80635px"><NOBR>assumed about 
its arguments. Furthermore, if a function declaration does not include 
arguments, as in</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 80675px"><NOBR>double 
atof();</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 80711px"><NOBR>that too is 
taken to mean that nothing is to be assumed about the arguments of <FONT 
face=Courier>atof</FONT>; all parameter checking</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 80731px"><NOBR>is turned off. 
This special meaning of the empty argument list is intended to permit older C 
programs to</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 80751px"><NOBR>compile with 
new compilers. But it's a bad idea to use it with new C programs. If the 
function takes</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 80771px"><NOBR>arguments, 
declare them; if it takes no arguments, use <FONT 
face=Courier>void</FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 80810px"><NOBR>Given <FONT 
face=Courier>atof</FONT>, properly declared, we could write <FONT 
face=Courier>atoi </FONT>(convert a string to <FONT face=Courier>int</FONT>) in 
terms of it:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 80850px"><NOBR>/* atoi: 
convert string s to integer using atof */</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 79813px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 80893px"><NOBR>4.2 Functions 
Returning Non−integers</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 80893px"><NOBR>68</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 80959px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=69><B>Page 69</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 81051px"><NOBR>int atoi(char 
s[])</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 81068px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 81084px"><NOBR>double 
atof(char s[]);</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 81117px"><NOBR>return (int) 
atof(s);</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 81134px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 81170px"><NOBR>Notice the 
structure of the declarations and the return statement. The value of the 
expression in</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 81209px"><NOBR>return 
<I>expression</I>;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 81246px"><NOBR>is converted to 
the type of the function before the return is taken. Therefore, the value of 
<FONT face=Courier>atof</FONT>, a <FONT face=Courier>double</FONT>, 
is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 81266px"><NOBR>converted 
automatically to <FONT face=Courier>int </FONT>when it appears in this <FONT 
face=Courier>return</FONT>, since the function <FONT face=Courier>atoi 
</FONT>returns an <FONT face=Courier>int</FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 81286px"><NOBR>This operation 
does potentionally discard information, however, so some compilers warn of it. 
The cast states</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 81305px"><NOBR>explicitly that 
the operation is intended, and suppresses any warning.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 81345px"><NOBR><I><B>Exercise 
4−2. </B></I>Extend <FONT face=Courier>atof </FONT>to handle scientific notation 
of the form</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 81384px"><NOBR>123.45e−6</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 81421px"><NOBR>where a 
floating−point number may be followed by <FONT face=Courier>e </FONT>or <FONT 
face=Courier>E </FONT>and an optionally signed 
exponent.</NOBR></DIV></SPAN></FONT><FONT face=Times size=4><SPAN 
style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 81462px"><NOBR><B>4.3 External 
Variables</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 81509px"><NOBR>A C program 
consists of a set of external objects, which are either variables or functions. 
The adjective</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 81529px"><NOBR>``external'' is 
used in contrast to ``internal'', which describes the arguments and variables 
defined inside</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 81548px"><NOBR>functions. 
External variables are defined outside of any function, and are thus 
potentionally available to many</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 81568px"><NOBR>functions. 
Functions themselves are always external, because C does not allow functions to 
be defined inside</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 81588px"><NOBR>other 
functions. By default, external variables and functions have the property that 
all references to them by</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 81608px"><NOBR>the same name, 
even from functions compiled separately, are references to the same thing. (The 
standard calls</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 81628px"><NOBR>this property 
<I>external linkage</I>.) In this sense, external variables are analogous to 
Fortran COMMON blocks or</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 81647px"><NOBR>variables in 
the outermost block in Pascal. We will see later how to define external 
variables and functions</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 81667px"><NOBR>that are 
visible only within a single source file. Because external variables are 
globally accessible, they</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 81687px"><NOBR>provide an 
alternative to function arguments and return values for communicating data 
between functions.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 81707px"><NOBR>Any function 
may access an external variable by referring to it by name, if the name has been 
declared</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 81727px"><NOBR>somehow.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 81766px"><NOBR>If a large 
number of variables must be shared among functions, external variables are more 
convenient and</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 81786px"><NOBR>efficient than 
long argument lists. As pointed out in <FONT face=Times color=#0000ff><A 
href="#11">Chapter 
1</A></FONT>, however, this reasoning should be applied with</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 81806px"><NOBR>some caution, 
for it can have a bad effect on program structure, and lead to programs with too 
many data</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 81826px"><NOBR>connections 
between functions.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 81865px"><NOBR>External 
variables are also useful because of their greater scope and lifetime. Automatic 
variables are internal</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 81885px"><NOBR>to a function; 
they come into existence when the function is entered, and disappear when it is 
left. External</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 81905px"><NOBR>variables, on 
the other hand, are permanent, so they can retain values from one function 
invocation to the next.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 81925px"><NOBR>Thus if two 
functions must share some data, yet neither calls the other, it is often most 
convenient if the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 81944px"><NOBR>shared data is 
kept in external variables rather than being passed in and out via 
arguments.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 81984px"><NOBR>Let us examine 
this issue with a larger <B><SPAN class=goohl2>example</SPAN></B>. The problem 
is to write a calculator program that provides</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 82004px"><NOBR>the operators 
<FONT face=Courier>+</FONT>, <FONT face=Courier>−</FONT>, <FONT face=Courier>* 
</FONT>and <FONT face=Courier>/</FONT>. Because it is easier to implement, the 
calculator will use reverse Polish notation</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 82024px"><NOBR>instead of 
infix. (Reverse Polish notation is used by some pocket calculators, and in 
languages like Forth and</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 82043px"><NOBR>Postscript.)</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 81001px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 82081px"><NOBR>4.3 External 
Variables</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 82081px"><NOBR>69</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 82147px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=70><B>Page 70</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 82239px"><NOBR>In reverse 
Polish notation, each operator follows its operands; an infix expression 
like</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 82279px"><NOBR>(1 − 2) * (4 + 
5)</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 82315px"><NOBR>is entered 
as</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 82355px"><NOBR>1 2 − 4 5 + 
*</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 82391px"><NOBR>Parentheses are 
not needed; the notation is unambiguous as long as we know how many operands 
each</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 82411px"><NOBR>operator 
expects.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 82450px"><NOBR>The 
implementation is simple. Each operand is pushed onto a stack; when an operator 
arrives, the proper</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 82470px"><NOBR>number of 
operands (two for binary operators) is popped, the operator is applied to them, 
and the result is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 82490px"><NOBR>pushed back 
onto the stack. In the <B><SPAN class=goohl2>example</SPAN></B> above, for 
instance, 1 and 2 are pushed, then replaced by their</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 82510px"><NOBR>difference, −1. 
Next, 4 and 5 are pushed and then replaced by their sum, 9. The product of −1 
and 9, which is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 82530px"><NOBR>−9, replaces 
them on the stack. The value on the top of the stack is popped and printed when 
the end of the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 82549px"><NOBR>input line is 
encountered.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 82589px"><NOBR>The structure 
of the program is thus a loop that performs the proper operation on each 
operator and operand as</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 82609px"><NOBR>it 
appears:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 82648px"><NOBR>while (<I>next 
operator or operand is not end−of−file indicator</I>)</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 82665px"><NOBR>if 
(<I>number</I>)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 82681px"><NOBR><I>push 
it</I></NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 82698px"><NOBR>else if 
(<I>operator</I>)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 82714px"><NOBR><I>pop 
operands</I></NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 82731px"><NOBR><I>do 
operation</I></NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 82747px"><NOBR><I>push 
result</I></NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 82764px"><NOBR>else if 
(<I>newline</I>)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 82780px"><NOBR><I>pop and 
print top of stack</I></NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 82797px"><NOBR>else</NOBR></DIV>
<DIV 
style="LEFT: 199px; POSITION: absolute; TOP: 82813px"><NOBR><I>error</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 82850px"><NOBR>The operation 
of pushing and popping a stack are trivial, but by the time error detection and 
recovery are</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 82870px"><NOBR>added, they are 
long enough that it is better to put each in a separate function than to repeat 
the code</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 82889px"><NOBR>throughout the 
whole program. And there should be a separate function for fetching the next 
input operator or</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 82909px"><NOBR>operand.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 82949px"><NOBR>The main design 
decision that has not yet been discussed is where the stack is, that is, which 
routines access it</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 82969px"><NOBR>directly. On 
possibility is to keep it in <FONT face=Courier>main</FONT>, and pass the stack 
and the current stack position to the routines</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 82988px"><NOBR>that push and 
pop it. But <FONT face=Courier>main </FONT>doesn't need to know about the 
variables that control the stack; it only does</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 83008px"><NOBR>push and pop 
operations. So we have decided to store the stack and its associated information 
in external</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 83028px"><NOBR>variables 
accessible to the <FONT face=Courier>push </FONT>and <FONT face=Courier>pop 
</FONT>functions but not to <FONT face=Courier>main</FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 83068px"><NOBR>Translating 
this outline into code is easy enough. If for now we think of the program as 
existing in one source</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 83087px"><NOBR>file, it will 
look like this:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 83128px"><NOBR>#include<I><FONT 
face=Times>s</FONT></I></NOBR></DIV>
<DIV style="LEFT: 148px; POSITION: absolute; TOP: 83148px"><NOBR>#define<I><FONT 
face=Times>s</FONT></I></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 148px; POSITION: absolute; TOP: 83186px"><NOBR><I>function 
declarations for </I><FONT 
face=Courier>main</FONT></NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 148px; POSITION: absolute; TOP: 83227px"><NOBR>main() { ... 
}</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 82189px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 83269px"><NOBR>4.3 External 
Variables</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 83269px"><NOBR>70</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 83335px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=71><B>Page 71</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 148px; POSITION: absolute; TOP: 83427px"><NOBR><I>external 
variables for </I><FONT face=Courier>push </FONT><I>and </I><FONT 
face=Courier>pop</FONT></NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 83467px"><NOBR>void push( 
double f) { ... }</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 83483px"><NOBR>double 
pop(void) { ... }</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 83516px"><NOBR>int getop(char 
s[]) { ... }</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 148px; POSITION: absolute; TOP: 83553px"><NOBR><I>routines 
called by </I><FONT face=Courier>getop</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 83592px"><NOBR>Later we will 
discuss how this might be split into two or more source files.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 83632px"><NOBR>The function 
<FONT face=Courier>main </FONT>is a loop containing a big <FONT 
face=Courier>switch </FONT>on the type of operator or operand; this is a 
more</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 83652px"><NOBR>typical use of 
<FONT face=Courier>switch </FONT>than the one shown in <A 
href="#56"></A><FONT 
face=Times color=#0000ff><A 
href="#56">Section 
3.4</A></FONT><A 
href="#56"></A>.</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 83691px"><NOBR>#include 
&lt;stdio.h&gt;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 83708px"><NOBR>#include 
&lt;stdlib.h&gt; /* for atof() */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 83741px"><NOBR>#define MAXOP 
100 /* max size of operand or operator */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 83757px"><NOBR>#define NUMBER 
'0' /* signal that a number was found */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 83790px"><NOBR>int getop(char 
[]);</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 83807px"><NOBR>void 
push(double);</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 83823px"><NOBR>double 
pop(void);</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 83856px"><NOBR>/* reverse 
Polish calculator */</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 83873px"><NOBR>main()</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 83889px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 83906px"><NOBR>int 
type;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 83922px"><NOBR>double 
op2;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 83939px"><NOBR>char 
s[MAXOP];</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 83972px"><NOBR>while ((type = 
getop(s)) != EOF) {</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 83988px"><NOBR>switch (type) 
{</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 84005px"><NOBR>case 
NUMBER:</NOBR></DIV>
<DIV 
style="LEFT: 232px; POSITION: absolute; TOP: 84021px"><NOBR>push(atof(s));</NOBR></DIV>
<DIV 
style="LEFT: 232px; POSITION: absolute; TOP: 84038px"><NOBR>break;</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 84054px"><NOBR>case 
'+':</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 84071px"><NOBR>push(pop() + 
pop());</NOBR></DIV>
<DIV 
style="LEFT: 232px; POSITION: absolute; TOP: 84087px"><NOBR>break;</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 84104px"><NOBR>case 
'*':</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 84120px"><NOBR>push(pop() * 
pop());</NOBR></DIV>
<DIV 
style="LEFT: 232px; POSITION: absolute; TOP: 84137px"><NOBR>break;</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 84153px"><NOBR>case 
'−':</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 84170px"><NOBR>op2 = 
pop();</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 84186px"><NOBR>push(pop() − 
op2);</NOBR></DIV>
<DIV 
style="LEFT: 232px; POSITION: absolute; TOP: 84203px"><NOBR>break;</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 84219px"><NOBR>case 
'/':</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 84236px"><NOBR>op2 = 
pop();</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 84252px"><NOBR>if (op2 != 
0.0)</NOBR></DIV>
<DIV style="LEFT: 265px; POSITION: absolute; TOP: 84269px"><NOBR>push(pop() / 
op2);</NOBR></DIV>
<DIV 
style="LEFT: 232px; POSITION: absolute; TOP: 84285px"><NOBR>else</NOBR></DIV>
<DIV style="LEFT: 265px; POSITION: absolute; TOP: 84302px"><NOBR>printf("error: 
zero divisor\n");</NOBR></DIV>
<DIV 
style="LEFT: 232px; POSITION: absolute; TOP: 84318px"><NOBR>break;</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 84335px"><NOBR>case 
'\n':</NOBR></DIV>
<DIV 
style="LEFT: 232px; POSITION: absolute; TOP: 84351px"><NOBR>printf("\t%.8g\n", 
pop());</NOBR></DIV>
<DIV 
style="LEFT: 232px; POSITION: absolute; TOP: 84368px"><NOBR>break;</NOBR></DIV>
<DIV 
style="LEFT: 199px; POSITION: absolute; TOP: 84384px"><NOBR>default:</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 84401px"><NOBR>printf("error: 
unknown command %s\n", s);</NOBR></DIV>
<DIV 
style="LEFT: 232px; POSITION: absolute; TOP: 84417px"><NOBR>break;</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 83377px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 84457px"><NOBR>4.3 External 
Variables</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 84457px"><NOBR>71</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 84523px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=72><B>Page 72</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 84615px"><NOBR>}</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 84632px"><NOBR>}</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 84648px"><NOBR>return 
0;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 84665px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 84701px"><NOBR>Because <FONT 
face=Courier>+ </FONT>and <FONT face=Courier>* </FONT>are commutative operators, 
the order in which the popped operands are combined is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 84721px"><NOBR>irrelevant, but 
for <FONT face=Courier>− </FONT>and <FONT face=Courier>/ </FONT>the left and 
right operand must be distinguished. In</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 84760px"><NOBR>push(pop() − 
pop()); /* WRONG */</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 84797px"><NOBR>the order in 
which the two calls of <FONT face=Courier>pop </FONT>are evaluated is not 
defined. To guarantee the right order, it is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 84817px"><NOBR>necessary to 
pop the first value into a temporary variable as we did in <FONT 
face=Courier>main</FONT>.</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 84856px"><NOBR>#define MAXVAL 
100 /* maximum depth of val stack */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 84889px"><NOBR>int sp = 0; /* 
next free stack position */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 84905px"><NOBR>double 
val[MAXVAL]; /* value stack */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 84938px"><NOBR>/* push: push f 
onto value stack */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 84955px"><NOBR>void 
push(double f)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 84971px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 84988px"><NOBR>if (sp &lt; 
MAXVAL)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 85004px"><NOBR>val[sp++] = 
f;</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 85021px"><NOBR>else</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 85037px"><NOBR>printf("error: 
stack full, can't push %g\n", f);</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 85054px"><NOBR>}</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 85087px"><NOBR>/* pop: pop and 
return top value from stack */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 85103px"><NOBR>double 
pop(void)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 85120px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 85136px"><NOBR>if (sp &gt; 
0)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 85153px"><NOBR>return 
val[−−sp];</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 85169px"><NOBR>else 
{</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 85186px"><NOBR>printf("error: 
stack empty\n");</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 85202px"><NOBR>return 
0.0;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 85219px"><NOBR>}</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 85235px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 85272px"><NOBR>A variable is 
external if it is defined outside of any function. Thus the stack and stack 
index that must be</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 85292px"><NOBR>shared by <FONT 
face=Courier>push </FONT>and <FONT face=Courier>pop </FONT>are defined outside 
these functions. But <FONT face=Courier>main </FONT>itself does not refer to the 
stack or</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 85312px"><NOBR>stack position 
− the representation can be hidden.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 85351px"><NOBR>Let us now turn 
to the implementation of <FONT face=Courier>getop</FONT>, the function that 
fetches the next operator or operand. The</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 85371px"><NOBR>task is easy. 
Skip blanks and tabs. If the next character is not a digit or a hexadecimal 
point, return it.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 85391px"><NOBR>Otherwise, 
collect a string of digits (which might include a decimal point), and return 
<FONT face=Courier>NUMBER</FONT>, the signal that</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 85411px"><NOBR>a number has 
been collected.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 85450px"><NOBR>#include 
&lt;ctype.h&gt;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 85483px"><NOBR>int 
getch(void);</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 85499px"><NOBR>void 
ungetch(int);</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 85532px"><NOBR>/* getop: get 
next character or numeric operand */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 85549px"><NOBR>int getop(char 
s[])</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 85565px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 85582px"><NOBR>int i, 
c;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 84565px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 85645px"><NOBR>4.3 External 
Variables</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 85645px"><NOBR>72</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 85711px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=73><B>Page 73</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 85803px"><NOBR>while ((s[0] = 
c = getch()) == ' ' || c == '\t')</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 85820px"><NOBR>;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 85836px"><NOBR>s[1] = 
'\0';</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 85853px"><NOBR>if (!isdigit(c) 
&amp;c != '.')</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 85869px"><NOBR>return c; /* 
not a number */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 85886px"><NOBR>i = 
0;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 85902px"><NOBR>if (isdigit(c)) 
/* collect integer part */</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 85919px"><NOBR>while 
(isdigit(s[++i] = c = getch()))</NOBR></DIV>
<DIV style="LEFT: 224px; POSITION: absolute; TOP: 85935px"><NOBR>;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 85952px"><NOBR>if (c == '.') 
/* collect fraction part */</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 85968px"><NOBR>while 
(isdigit(s[++i] = c = getch()))</NOBR></DIV>
<DIV style="LEFT: 224px; POSITION: absolute; TOP: 85985px"><NOBR>;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 86001px"><NOBR>s[i] = 
'\0';</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 86018px"><NOBR>if (c != 
EOF)</NOBR></DIV>
<DIV 
style="LEFT: 199px; POSITION: absolute; TOP: 86034px"><NOBR>ungetch(c);</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 86051px"><NOBR>return 
NUMBER;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 86067px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 86104px"><NOBR>What are <FONT 
face=Courier>getch </FONT>and <FONT face=Courier>ungetch</FONT>? It is often the 
case that a program cannot determine that it has read enough</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 86123px"><NOBR>input until it 
has read too much. One instance is collecting characters that make up a number: 
until the first</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 86143px"><NOBR>non−digit is 
seen, the number is not complete. But then the program has read one character 
too far, a character</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 86163px"><NOBR>that it is not 
prepared for.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 86203px"><NOBR>The problem 
would be solved if it were possible to ``un−read'' the unwanted character. Then, 
every time the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 86222px"><NOBR>program reads 
one character too many, it could push it back on the input, so the rest of the 
code could behave</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 86242px"><NOBR>as if it had 
never been read. Fortunately, it's easy to simulate un−getting a character, by 
writing a pair of</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 86262px"><NOBR>cooperating 
functions. <FONT face=Courier>getch </FONT>delivers the next input character to 
be considered; <FONT face=Courier>ungetch </FONT>will return them</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 86282px"><NOBR>before reading 
new input.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 86321px"><NOBR>How they work 
together is simple. <FONT face=Courier>ungetch </FONT>puts the pushed−back 
characters into a shared buffer −− a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 86341px"><NOBR>character 
array. <FONT face=Courier>getch </FONT>reads from the buffer if there is 
anything else, and calls <FONT face=Courier>getchar </FONT>if the buffer 
is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 86361px"><NOBR>empty. There 
must also be an index variable that records the position of the current 
character in the buffer.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 86401px"><NOBR>Since the 
buffer and the index are shared by <FONT face=Courier>getch </FONT>and <FONT 
face=Courier>ungetch </FONT>and must retain their values between 
calls,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 86420px"><NOBR>they must be 
external to both routines. Thus we can write <FONT face=Courier>getch</FONT>, 
<FONT face=Courier>ungetch</FONT>, and their shared variables 
as:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 86460px"><NOBR>#define BUFSIZE 
100</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 86493px"><NOBR>char 
buf[BUFSIZE]; /* buffer for ungetch */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 86509px"><NOBR>int bufp = 0; 
/* next free position in buf */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 86542px"><NOBR>int getch(void) 
/* get a (possibly pushed−back) character */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 86559px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 86575px"><NOBR>return (bufp 
&gt; 0) ? buf[−−bufp] : getchar();</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 86592px"><NOBR>}</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 86625px"><NOBR>void 
ungetch(int c) /* push character back on input */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 86641px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 86658px"><NOBR>if (bufp &gt;= 
BUFSIZE)</NOBR></DIV>
<DIV 
style="LEFT: 199px; POSITION: absolute; TOP: 86674px"><NOBR>printf("ungetch: too 
many characters\n");</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 86691px"><NOBR>else</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 86707px"><NOBR>buf[bufp++] = 
c;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 86724px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 86760px"><NOBR>The standard 
library includes a function <FONT face=Courier>ungetch </FONT>that provides one 
character of pushback; we will discuss it</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 86780px"><NOBR>in <FONT 
face=Times color=#0000ff><A 
href="#138">Chapter 
7</A></FONT><A 
href="#138"></A>. 
We have used an array for the pushback, rather than a single character, to 
illustrate a more</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 85753px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 86833px"><NOBR>4.3 External 
Variables</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 86833px"><NOBR>73</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 86899px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=74><B>Page 74</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 86991px"><NOBR>general 
approach.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 87031px"><NOBR><I><B>Exercise 
4−3. </B></I>Given the basic framework, it's straightforward to extend the 
calculator. Add the modulus (%)</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 87051px"><NOBR>operator and 
provisions for negative numbers.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 87090px"><NOBR><I><B>Exercise 
4−4. </B></I>Add the commands to print the top elements of the stack without 
popping, to duplicate it, and</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 87110px"><NOBR>to swap the top 
two elements. Add a command to clear the stack.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 87150px"><NOBR><I><B>Exercise 
4−5. </B></I>Add access to library functions like <FONT face=Courier>sin</FONT>, 
<FONT face=Courier>exp</FONT>, and <FONT face=Courier>pow</FONT>. See 
&lt;math.h&gt; in <FONT face=Times color=#0000ff><A 
href="#229">Appendix 
B, Section</A></FONT></NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff 
size=3><SPAN style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 87169px"><NOBR><A 
href="#229">4</A><FONT 
face=Times color=#000000>.</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 87209px"><NOBR><I><B>Exercise 
4−6. </B></I>Add commands for handling variables. (It's easy to provide 
twenty−six variables with</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 87229px"><NOBR>single−letter 
names.) Add a variable for the most recently printed value.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 87268px"><NOBR><I><B>Exercise 
4−7. </B></I>Write a routine <FONT face=Courier>ungets(s) </FONT>that will push 
back an entire string onto the input. Should</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 87289px"><NOBR>ungets <FONT 
face=Times>know about </FONT>buf <FONT face=Times>and </FONT>bufp<FONT 
face=Times>, or should it just use </FONT>ungetch<FONT 
face=Times>?</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 87328px"><NOBR><I><B>Exercise 
4−8. </B></I>Suppose that there will never be more than one character of 
pushback. Modify <FONT face=Courier>getch 
</FONT>and</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 87349px"><NOBR>ungetch <FONT 
face=Times>accordingly.</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 87387px"><NOBR><I><B>Exercise 
4−9. </B></I>Our <FONT face=Courier>getch </FONT>and <FONT face=Courier>ungetch 
</FONT>do not handle a pushed−back <FONT face=Courier>EOF </FONT>correctly. 
Decide what their</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 87407px"><NOBR>properties 
ought to be if an <FONT face=Courier>EOF </FONT>is pushed back, then implement 
your design.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 87447px"><NOBR><I><B>Exercise 
4−10. </B></I>An alternate organization uses <FONT face=Courier>getline 
</FONT>to read an entire input line; this makes <FONT face=Courier>getch 
</FONT>and</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 87467px"><NOBR>ungetch <FONT 
face=Times>unnecessary. Revise the calculator to use this 
approach.</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=4><SPAN 
style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 87508px"><NOBR><B>4.4 Scope 
Rules</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 87554px"><NOBR>The functions 
and external variables that make up a C program need not all be compiled at the 
same time; the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 87574px"><NOBR>source text of 
the program may be kept in several files, and previously compiled routines may 
be loaded from</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 87594px"><NOBR>libraries. 
Among the questions of interest are</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 87634px"><NOBR>How are 
declarations written so that variables are properly declared during 
compilation?</NOBR></DIV></SPAN></FONT><FONT face=Symbol size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 87628px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 87653px"><NOBR>How are 
declarations arranged so that all the pieces will be properly connected when the 
program is</NOBR></DIV>
<DIV 
style="LEFT: 162px; POSITION: absolute; TOP: 87673px"><NOBR>loaded?</NOBR></DIV></SPAN></FONT><FONT 
face=Symbol size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 87648px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 87693px"><NOBR>How are 
declarations organized so there is only one 
copy?</NOBR></DIV></SPAN></FONT><FONT face=Symbol size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 87688px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 87713px"><NOBR>How are 
external variables initialized?</NOBR></DIV></SPAN></FONT><FONT face=Symbol 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 87707px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 87752px"><NOBR>Let us discuss 
these topics by reorganizing the calculator program into several files. As a 
practical matter, the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 87772px"><NOBR>calculator is 
too small to be worth splitting, but it is a fine illustration of the issues 
that arise in larger</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 87792px"><NOBR>programs.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 87832px"><NOBR>The <I>scope 
</I>of a name is the part of the program within which the name can be used. For 
an automatic variable</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 87851px"><NOBR>declared at the 
beginning of a function, the scope is the function in which the name is 
declared. Local</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 87871px"><NOBR>variables of 
the same name in different functions are unrelated. The same is true of the 
parameters of the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 87891px"><NOBR>function, which 
are in effect local variables.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 87931px"><NOBR>The scope of an 
external variable or a function lasts from the point at which it is declared to 
the end of the file</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 87950px"><NOBR>being compiled. 
For <B><SPAN class=goohl2>example</SPAN></B>, if <FONT face=Courier>main</FONT>, 
<FONT face=Courier>sp</FONT>, <FONT face=Courier>val</FONT>, <FONT 
face=Courier>push</FONT>, and <FONT face=Courier>pop </FONT>are defined in one 
file, in the order shown</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 87970px"><NOBR>above, that 
is,</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 86941px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 88021px"><NOBR>4.4 Scope 
Rules</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 88021px"><NOBR>74</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 88087px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=75><B>Page 75</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 88179px"><NOBR>main() { ... 
}</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 88212px"><NOBR>int sp = 
0;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 88229px"><NOBR>double 
val[MAXVAL];</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 88262px"><NOBR>void 
push(double f) { ... }</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 88295px"><NOBR>double 
pop(void) { ... }</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 88331px"><NOBR>then the 
variables <FONT face=Courier>sp </FONT>and <FONT face=Courier>val </FONT>may be 
used in <FONT face=Courier>push </FONT>and <FONT face=Courier>pop </FONT>simply 
by naming them; no further declarations</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 88351px"><NOBR>are needed. But 
these names are not visible in <FONT face=Courier>main</FONT>, nor are <FONT 
face=Courier>push </FONT>and <FONT face=Courier>pop 
</FONT>themselves.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 88390px"><NOBR>On the other 
hand, if an external variable is to be referred to before it is defined, or if 
it is defined in a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 88410px"><NOBR>different 
source file from the one where it is being used, then an <FONT 
face=Courier>extern </FONT>declaration is mandatory.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 88450px"><NOBR>It is important 
to distinguish between the <I>declaration </I>of an external variable and its 
<I>definition</I>. A declaration</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 88470px"><NOBR>announces the 
properties of a variable (primarily its type); a definition also causes storage 
to be set aside. If</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 88489px"><NOBR>the 
lines</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 88529px"><NOBR>int 
sp;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 88545px"><NOBR>double 
val[MAXVAL];</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 88582px"><NOBR>appear outside 
of any function, they <I>define </I>the external variables <FONT face=Courier>sp 
</FONT>and <FONT face=Courier>val</FONT>, cause storage to be set 
aside,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 88602px"><NOBR>and also serve 
as the declarations for the rest of that source file. On the other hand, the 
lines</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 88641px"><NOBR>extern int 
sp;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 88658px"><NOBR>extern double 
val[];</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 88694px"><NOBR><I>declare 
</I>for the rest of the source file that <FONT face=Courier>sp </FONT>is an 
<FONT face=Courier>int </FONT>and that <FONT face=Courier>val </FONT>is a <FONT 
face=Courier>double </FONT>array (whose size is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 88714px"><NOBR>determined 
elsewhere), but they do not create the variables or reserve storage for 
them.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 88753px"><NOBR>There must be 
only one <I>definition </I>of an external variable among all the files that make 
up the source program;</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 88773px"><NOBR>other files may 
contain <FONT face=Courier>extern </FONT>declarations to access it. (There may 
also be <FONT face=Courier>extern </FONT>declarations in the file</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 88793px"><NOBR>containing the 
definition.) Array sizes must be specified with the definition, but are optional 
with an <FONT face=Courier>extern</FONT></NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 88813px"><NOBR>declaration.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 88852px"><NOBR>Initialization 
of an external variable goes only with the definition.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 88892px"><NOBR>Although it is 
not a likely organization for this program, the functions <FONT 
face=Courier>push </FONT>and <FONT face=Courier>pop </FONT>could be defined in 
one</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 88912px"><NOBR>file, and the 
variables <FONT face=Courier>val </FONT>and <FONT face=Courier>sp </FONT>defined 
and initialized in another. Then these definitions and declarations</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 88932px"><NOBR>would be 
necessary to tie them together:</NOBR></DIV>
<DIV style="LEFT: 128px; POSITION: absolute; TOP: 88971px"><NOBR><I>in 
file1</I>:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 158px; POSITION: absolute; TOP: 89011px"><NOBR>extern int 
sp;</NOBR></DIV>
<DIV style="LEFT: 158px; POSITION: absolute; TOP: 89027px"><NOBR>extern double 
val[];</NOBR></DIV>
<DIV style="LEFT: 158px; POSITION: absolute; TOP: 89060px"><NOBR>void 
push(double f) { ... }</NOBR></DIV>
<DIV style="LEFT: 158px; POSITION: absolute; TOP: 89093px"><NOBR>double 
pop(void) { ... }</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 128px; POSITION: absolute; TOP: 89130px"><NOBR><I>in 
file2</I>:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 158px; POSITION: absolute; TOP: 89169px"><NOBR>int sp = 
0;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 88129px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 89209px"><NOBR>4.4 Scope 
Rules</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 89209px"><NOBR>75</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 89275px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=76><B>Page 76</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 158px; POSITION: absolute; TOP: 89367px"><NOBR>double 
val[MAXVAL];</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 89404px"><NOBR>Because the 
<FONT face=Courier>extern </FONT>declarations in <I>file1 </I>lie ahead of and 
outside the function definitions, they apply to all</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 89423px"><NOBR>functions; one 
set of declarations suffices for all of <I>file1</I>. This same organization 
would also bee needed if the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 89443px"><NOBR>definition of 
<FONT face=Courier>sp </FONT>and <FONT face=Courier>val </FONT>followed their 
use in one file.</NOBR></DIV></SPAN></FONT><FONT face=Times size=4><SPAN 
style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 89484px"><NOBR><B>4.5 Header 
Files</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 89531px"><NOBR>Let is now 
consider dividing the calculator program into several source files, as it might 
be is each of the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 89551px"><NOBR>components were 
substantially bigger. The <FONT face=Courier>main </FONT>function would go in 
one file, which we will call <FONT 
face=Courier>main.c</FONT>;</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 89572px"><NOBR>push<FONT 
face=Times>, </FONT>pop<FONT face=Times>, and their variables go into a second 
file, </FONT>stack.c<FONT face=Times>; </FONT>getop <FONT face=Times>goes into a 
third, </FONT>getop.c<FONT face=Times>. Finally,</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 89591px"><NOBR>getch <FONT 
face=Times>and </FONT>ungetch <FONT face=Times>go into a fourth file, 
</FONT>getch.c<FONT face=Times>; we separate them from the others because they 
would</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 89610px"><NOBR>come from a 
separately−compiled library in a realistic program.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 89650px"><NOBR>There is one 
more thing to worry about − the definitions and declarations shared among files. 
As much as</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 89670px"><NOBR>possible, we 
want to centralize this, so that there is only one copy to get and keep right as 
the program</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 89689px"><NOBR>evolves. 
Accordingly, we will place this common material in a <I>header file</I>, <FONT 
face=Courier>calc.h</FONT>, which will be included</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 89709px"><NOBR>as necessary. 
(The <FONT face=Courier>#include </FONT>line is described in <A 
href="#82"></A><FONT 
face=Times color=#0000ff><A 
href="#82">Section 
4.11</A></FONT><A 
href="#82"></A>.) 
The resulting program then looks like this:</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 89317px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 90397px"><NOBR>4.5 Header 
Files</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 90397px"><NOBR>76</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 90463px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=77><B>Page 77</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 91510px"><NOBR>There is a 
tradeoff between the desire that each file have access only to the information 
it needs for its job and</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 91529px"><NOBR>the practical 
reality that it is harder to maintain more header files. Up to some moderate 
program size, it is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 91549px"><NOBR>probably best 
to have one header file that contains everything that is to be shared between 
any two parts of the</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 90505px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 91585px"><NOBR>4.5 Header 
Files</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 91585px"><NOBR>77</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 91651px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=78><B>Page 78</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 91743px"><NOBR>program; that 
is the decision we made here. For a much larger program, more organization and 
more headers</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 91763px"><NOBR>would be 
needed.</NOBR></DIV></SPAN></FONT><FONT face=Times size=4><SPAN 
style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 91804px"><NOBR><B>4.6 Static 
Variables</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 91851px"><NOBR>The variables 
<FONT face=Courier>sp </FONT>and <FONT face=Courier>val </FONT>in <FONT 
face=Courier>stack.c</FONT>, and <FONT face=Courier>buf </FONT>and <FONT 
face=Courier>bufp </FONT>in <FONT face=Courier>getch.c</FONT>, are for the 
private use of the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 91871px"><NOBR>functions in 
their respective source files, and are not meant to be accessed by anything 
else. The <FONT face=Courier>static</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 91891px"><NOBR>declaration, 
applied to an external variable or function, limits the scope of that object to 
the rest of the source</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 91910px"><NOBR>file being 
compiled. External <FONT face=Courier>static </FONT>thus provides a way to hide 
names like <FONT face=Courier>buf </FONT>and <FONT face=Courier>bufp </FONT>in 
the</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 91931px"><NOBR>getch−ungetch 
<FONT face=Times>combination, which must be external so they can be shared, yet 
which should not be</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 91950px"><NOBR>visible to 
users of <FONT face=Courier>getch </FONT>and <FONT 
face=Courier>ungetch</FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 91990px"><NOBR>Static storage 
is specified by prefixing the normal declaration with the word <FONT 
face=Courier>static</FONT>. If the two routines and</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 92009px"><NOBR>the two 
variables are compiled in one file, as in</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 92049px"><NOBR>static char 
buf[BUFSIZE]; /* buffer for ungetch */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 92065px"><NOBR>static int bufp 
= 0; /* next free position in buf */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 92098px"><NOBR>int getch(void) 
{ ... }</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 92131px"><NOBR>void 
ungetch(int c) { ... }</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 92168px"><NOBR>then no other 
routine will be able to access <FONT face=Courier>buf </FONT>and <FONT 
face=Courier>bufp</FONT>, and those names will not conflict with the 
same</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 92188px"><NOBR>names in other 
files of the same program. In the same way, the variables that <FONT 
face=Courier>push </FONT>and <FONT face=Courier>pop </FONT>use for 
stack</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 92207px"><NOBR>manipulation 
can be hidden, by declaring <FONT face=Courier>sp </FONT>and <FONT 
face=Courier>val </FONT>to be <FONT face=Courier>static</FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 92247px"><NOBR>The external 
<FONT face=Courier>static </FONT>declaration is most often used for variables, 
but it can be applied to functions as well.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 92267px"><NOBR>Normally, 
function names are global, visible to any part of the entire program. If a 
function is declared</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 92287px"><NOBR>static<FONT 
face=Times>, however, its name is invisible outside of the file in which it is 
declared.</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 92326px"><NOBR>The <FONT 
face=Courier>static </FONT>declaration can also be applied to internal 
variables. Internal <FONT face=Courier>static </FONT>variables are local to 
a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 92346px"><NOBR>particular 
function just as automatic variables are, but unlike automatics, they remain in 
existence rather than</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 92366px"><NOBR>coming and 
going each time the function is activated. This means that internal <FONT 
face=Courier>static </FONT>variables provide</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 92386px"><NOBR>private, 
permanent storage within a single function.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 92425px"><NOBR><I><B>Exercise 
4−11. </B></I>Modify <FONT face=Courier>getop </FONT>so that it doesn't need to 
use <FONT face=Courier>ungetch</FONT>. Hint: use an internal <FONT 
face=Courier>static</FONT></NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 92445px"><NOBR>variable.</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=4><SPAN style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 92486px"><NOBR><B>4.7 Register 
Variables</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 92533px"><NOBR>A <FONT 
face=Courier>register </FONT>declaration advises the compiler that the variable 
in question will be heavily used. The idea is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 92553px"><NOBR>that <FONT 
face=Courier>register </FONT>variables are to be placed in machine registers, 
which may result in smaller and faster</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 92572px"><NOBR>programs. But 
compilers are free to ignore the advice.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 92612px"><NOBR>The <FONT 
face=Courier>register </FONT>declaration looks 
like</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 92651px"><NOBR>register int 
x;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 92668px"><NOBR>register char 
c;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 92704px"><NOBR>and so on. The 
<FONT face=Courier>register </FONT>declaration can only be applied to automatic 
variables and to the formal</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 92724px"><NOBR>parameters of a 
function. In this later case, it looks like</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 91693px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 92773px"><NOBR>4.6 Static 
Variables</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 92773px"><NOBR>78</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 92839px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=79><B>Page 79</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 92931px"><NOBR>f(register 
unsigned m, register long n)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 92948px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 92964px"><NOBR>register int 
i;</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 92981px"><NOBR>...</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 92997px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 93034px"><NOBR>In practice, 
there are restrictions on register variables, reflecting the realities of 
underlying hardware. Only a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 93053px"><NOBR>few variables 
in each function may be kept in registers, and only certain types are allowed. 
Excess register</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 93073px"><NOBR>declarations 
are harmless, however, since the word <FONT face=Courier>register </FONT>is 
ignored for excess or disallowed</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 93093px"><NOBR>declarations. 
And it is not possible to take the address of a register variable (a topic 
covered in <A 
href="#86"></A><FONT 
face=Times color=#0000ff><A 
href="#86">Chapter 
5</A></FONT>),</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 93113px"><NOBR>regardless of 
whether the variable is actually placed in a register. The specific restrictions 
on number and</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 93133px"><NOBR>types of 
register variables vary from machine to machine.</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=4><SPAN style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 93174px"><NOBR><B>4.8 Block 
Structure</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 93220px"><NOBR>C is not a 
block−structured language in the sense of Pascal or similar languages, because 
functions may not be</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 93240px"><NOBR>defined within 
other functions. On the other hand, variables can be defined in a 
block−structured fashion</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 93260px"><NOBR>within a 
function. Declarations of variables (including initializations) may follow the 
left brace that introduces</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 93280px"><NOBR><I>any 
</I>compound statement, not just the one that begins a function. Variables 
declared in this way hide any</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 93300px"><NOBR>identically 
named variables in outer blocks, and remain in existence until the matching 
right brace. For</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 93319px"><NOBR><B><SPAN 
class=goohl2>example</SPAN></B>, in</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 93359px"><NOBR>if (n &gt; 0) 
{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 93375px"><NOBR>int i; /* 
declare a new i */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 93408px"><NOBR>for (i = 0; i 
&lt; n; i++)</NOBR></DIV>
<DIV 
style="LEFT: 199px; POSITION: absolute; TOP: 93425px"><NOBR>...</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 93441px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 93478px"><NOBR>the scope of 
the variable <FONT face=Courier>i </FONT>is the ``true'' branch of the <FONT 
face=Courier>if</FONT>; this <FONT face=Courier>i </FONT>is unrelated to any 
<FONT face=Courier>i </FONT>outside the block. An</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 93498px"><NOBR>automatic 
variable declared and initialized in a block is initialized each time the block 
is entered.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 93537px"><NOBR>Automatic 
variables, including formal parameters, also hide external variables and 
functions of the same</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 93557px"><NOBR>name. Given the 
declarations</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 93596px"><NOBR>int 
x;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 93613px"><NOBR>int 
y;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 93646px"><NOBR>f(double 
x)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 93662px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 93679px"><NOBR>double 
y;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 93695px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 93732px"><NOBR>then within the 
function <FONT face=Courier>f</FONT>, occurrences of <FONT face=Courier>x 
</FONT>refer to the parameter, which is a <FONT face=Courier>double</FONT>; 
outside <FONT face=Courier>f</FONT>, they refer</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 93752px"><NOBR>to the external 
<FONT face=Courier>int</FONT>. The same is true of the variable <FONT 
face=Courier>y</FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 93791px"><NOBR>As a matter of 
style, it's best to avoid variable names that conceal names in an outer scope; 
the potential for</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 93811px"><NOBR>confusion and 
error is too great.</NOBR></DIV></SPAN></FONT><FONT face=Times size=4><SPAN 
style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 93852px"><NOBR><B>4.9 
Initialization</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 93899px"><NOBR>Initialization 
has been mentioned in passing many times so far, but always peripherally to some 
other topic.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 93919px"><NOBR>This section 
summarizes some of the rules, now that we have discussed the various storage 
classes.</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 92881px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 93961px"><NOBR>4.8 Block 
Structure</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 93961px"><NOBR>79</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 94027px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=80><B>Page 80</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 94119px"><NOBR>In the absence 
of explicit initialization, external and static variables are guaranteed to be 
initialized to zero;</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 94139px"><NOBR>automatic and 
register variables have undefined (i.e., garbage) initial values.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 94179px"><NOBR>Scalar 
variables may be initialized when they are defined, by following the name with 
an equals sign and an</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 94198px"><NOBR>expression:</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 94238px"><NOBR>int x = 
1;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 94254px"><NOBR>char squota = 
'\'';</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 94271px"><NOBR>long day = 
1000L * 60L * 60L * 24L; /* milliseconds/day */</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 94307px"><NOBR>For external 
and static variables, the initializer must be a constant expression; the 
initialization is done once,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 94327px"><NOBR>conceptionally 
before the program begins execution. For automatic and register variables, the 
initializer is not</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 94347px"><NOBR>restricted to 
being a constant: it may be any expression involving previously defined values, 
even function</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 94367px"><NOBR>calls. For 
<B><SPAN class=goohl2>example</SPAN></B>, the initialization of the binary 
search program in <A 
href="#54"></A><FONT 
face=Times color=#0000ff><A 
href="#54">Section 
3.3 </A></FONT>could be written as</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 94406px"><NOBR>int <B><SPAN 
class=goohl0>binsearch</SPAN></B>(int x, int v[], int n)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 94423px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 94439px"><NOBR>int low = 
0;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 94456px"><NOBR>int high = n − 
1;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 94472px"><NOBR>int 
mid;</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 94489px"><NOBR>...</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 94505px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 94542px"><NOBR>instead 
of</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 94581px"><NOBR>int low, high, 
mid;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 94614px"><NOBR>low = 
0;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 94631px"><NOBR>high = n − 
1;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 94667px"><NOBR>In effect, 
initialization of automatic variables are just shorthand for assignment 
statements. Which form to</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 94687px"><NOBR>prefer is 
largely a matter of taste. We have generally used explicit assignments, because 
initializers in</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 94707px"><NOBR>declarations 
are harder to see and further away from the point of use.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 94746px"><NOBR>An array may be 
initialized by following its declaration with a list of initializers enclosed in 
braces and</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 94766px"><NOBR>separated by 
commas. For <B><SPAN class=goohl2>example</SPAN></B>, to initialize an array 
<FONT face=Courier>days </FONT>with the number of days in each 
month:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 94805px"><NOBR>int days[] = { 
31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 }</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 94842px"><NOBR>When the size 
of the array is omitted, the compiler will compute the length by counting the 
initializers, of</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 94862px"><NOBR>which there are 
12 in this case.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 94901px"><NOBR>If there are 
fewer initializers for an array than the specified size, the others will be zero 
for external, static and</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 94921px"><NOBR>automatic 
variables. It is an error to have too many initializers. There is no way to 
specify repetition of an</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 94941px"><NOBR>initializer, 
nor to initialize an element in the middle of an array without supplying all the 
preceding values as</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 94961px"><NOBR>well.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 95000px"><NOBR>Character 
arrays are a special case of initialization; a string may be used instead of the 
braces and commas</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 95020px"><NOBR>notation:</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 95060px"><NOBR>char pattern = 
"ould";</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 95096px"><NOBR>is a shorthand 
for the longer but equivalent</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 94069px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 95149px"><NOBR>4.8 Block 
Structure</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 95149px"><NOBR>80</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 95215px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=81><B>Page 81</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 95307px"><NOBR>char pattern[] 
= { 'o', 'u', 'l', 'd', '\0' };</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 95344px"><NOBR>In this case, 
the array size is five (four characters plus the terminating <FONT 
face=Courier>'\0'</FONT>).</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=4><SPAN style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 95385px"><NOBR><B>4.10 
Recursion</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 95431px"><NOBR>C functions may 
be used recursively; that is, a function may call itself either directly or 
indirectly. Consider</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 95451px"><NOBR>printing a 
number as a character string. As we mentioned before, the digits are generated 
in the wrong order:</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 95471px"><NOBR>low−order 
digits are available before high−order digits, but they have to be printed the 
other way around.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 95511px"><NOBR>There are two 
solutions to this problem. On is to store the digits in an array as they are 
generated, then print</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 95530px"><NOBR>them in the 
reverse order, as we did with <FONT face=Courier>itoa </FONT>in <FONT face=Times 
color=#0000ff><A 
href="#60">section 
3.6</A></FONT>. The alternative is a recursive solution, in 
which</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 95551px"><NOBR>printd <FONT 
face=Times>first calls itself to cope with any leading digits, then prints the 
trailing digit. Again, this version can</FONT></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 95570px"><NOBR>fail on the 
largest negative number.</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 95609px"><NOBR>#include 
&lt;stdio.h&gt;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 95642px"><NOBR>/* printd: 
print n in decimal */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 95659px"><NOBR>void printd(int 
n)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 95675px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 95692px"><NOBR>if (n &lt; 0) 
{</NOBR></DIV>
<DIV 
style="LEFT: 199px; POSITION: absolute; TOP: 95708px"><NOBR>putchar('−');</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 95725px"><NOBR>n = 
−n;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 95741px"><NOBR>}</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 95758px"><NOBR>if (n / 
10)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 95774px"><NOBR>printd(n / 
10);</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 95791px"><NOBR>putchar(n % 10 
+ '0');</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 95807px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 95844px"><NOBR>When a function 
calls itself recursively, each invocation gets a fresh set of all the automatic 
variables,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 95864px"><NOBR>independent of 
the previous set. This in <FONT face=Courier>printd(123) </FONT>the first <FONT 
face=Courier>printd </FONT>receives the argument <FONT face=Courier>n = 
123</FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 95884px"><NOBR>It passes <FONT 
face=Courier>12 </FONT>to a second <FONT face=Courier>printd</FONT>, which in 
turn passes <FONT face=Courier>1 </FONT>to a third. The third−level <FONT 
face=Courier>printd </FONT>prints <FONT face=Courier>1</FONT>, then</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 95903px"><NOBR>returns to the 
second level. That <FONT face=Courier>printd </FONT>prints <FONT 
face=Courier>2</FONT>, then returns to the first level. That one prints <FONT 
face=Courier>3 </FONT>and</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 95923px"><NOBR>terminates.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 95963px"><NOBR>Another good 
<B><SPAN class=goohl2>example</SPAN></B> of recursion is quicksort, a sorting 
algorithm developed by C.A.R. Hoare in 1962.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 95983px"><NOBR>Given an array, 
one element is chosen and the others partitioned in two subsets − those less 
than the partition</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 96002px"><NOBR>element and 
those greater than or equal to it. The same process is then applied recursively 
to the two subsets.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 96022px"><NOBR>When a subset 
has fewer than two elements, it doesn't need any sorting; this stops the 
recursion.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 96062px"><NOBR>Our version of 
quicksort is not the fastest possible, but it's one of the simplest. We use the 
middle element of</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 96082px"><NOBR>each subarray 
for partitioning.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 96121px"><NOBR>/* qsort: sort 
v[left]...v[right] into increasing order */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 96137px"><NOBR>void qsort(int 
v[], int left, int right)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 96154px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 96170px"><NOBR>int i, 
last;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 96187px"><NOBR>void swap(int 
v[], int i, int j);</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 96220px"><NOBR>if (left &gt;= 
right) /* do nothing if array contains */</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 96236px"><NOBR>return; /* 
fewer than two elements */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 96253px"><NOBR>swap(v, left, 
(left + right)/2); /* move partition elem */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 96269px"><NOBR>last = left; /* 
to v[0] */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 96286px"><NOBR>for (i = left + 
1; i &lt;= right; i++) /* partition */</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 96302px"><NOBR>if (v[i] &lt; 
v[left])</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 95257px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 96337px"><NOBR>4.10 
Recursion</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 96337px"><NOBR>81</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 96403px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=82><B>Page 82</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 96495px"><NOBR>swap(v, ++last, 
i);</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 96512px"><NOBR>swap(v, left, 
last); /* restore partition elem */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 96528px"><NOBR>qsort(v, left, 
last−1);</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 96545px"><NOBR>qsort(v, 
last+1, right);</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 96561px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 96598px"><NOBR>We moved the 
swapping operation into a separate function <FONT face=Courier>swap 
</FONT>because it occurs three times in <FONT 
face=Courier>qsort</FONT>.</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 96637px"><NOBR>/* swap: 
interchange v[i] and v[j] */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 96653px"><NOBR>void swap(int 
v[], int i, int j)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 96670px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 96686px"><NOBR>int 
temp;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 96719px"><NOBR>temp = 
v[i];</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 96736px"><NOBR>v[i] = 
v[j];</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 96752px"><NOBR>v[j] = 
temp;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 96769px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 96805px"><NOBR>The standard 
library includes a version of <FONT face=Courier>qsort </FONT>that can sort 
objects of any type.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 96845px"><NOBR>Recursion may 
provide no saving in storage, since somewhere a stack of the values being 
processed must be</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 96865px"><NOBR>maintained. Nor 
will it be faster. But recursive code is more compact, and often much easier to 
write and</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 96885px"><NOBR>understand than 
the non−recursive equivalent. Recursion is especially convenient for recursively 
defined data</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 96904px"><NOBR>structures like 
trees, we will see a nice <B><SPAN class=goohl2>example</SPAN></B> in <FONT 
face=Times color=#0000ff><A 
href="#131">Section 
6.6</A></FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 96944px"><NOBR><I><B>Exercise 
4−12. </B></I>Adapt the ideas of <FONT face=Courier>printd </FONT>to write a 
recursive version of <FONT face=Courier>itoa</FONT>; that is, convert an 
integer</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 96964px"><NOBR>into a string 
by calling a recursive routine.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 97003px"><NOBR><I><B>Exercise 
4−13. </B></I>Write a recursive version of the function <FONT 
face=Courier>reverse(s)</FONT>, which reverses the string <FONT face=Courier>s 
</FONT>in place.</NOBR></DIV></SPAN></FONT><FONT face=Times size=4><SPAN 
style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 97045px"><NOBR><B>4.11 The C 
Preprocessor</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 97091px"><NOBR>C provides 
certain language facilities by means of a preprocessor, which is conceptionally 
a separate first step</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 97111px"><NOBR>in compilation. 
The two most frequently used features are <FONT face=Courier>#include</FONT>, to 
include the contents of a file during</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 97131px"><NOBR>compilation, 
and <FONT face=Courier>#define</FONT>, to replace a token by an arbitrary 
sequence of characters. Other features</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 97151px"><NOBR>described in 
this section include conditional compilation and macros with 
arguments.</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 97191px"><NOBR><B>4.11.1 File 
Inclusion</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 97234px"><NOBR>File inclusion 
makes it easy to handle collections of <FONT face=Courier>#define</FONT>s and 
declarations (among other things). Any</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 97254px"><NOBR>source line of 
the form</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 97293px"><NOBR>#include 
"<I>filename</I>"</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 97330px"><NOBR>or</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 97369px"><NOBR>#include 
&lt;<I>filename</I>&gt;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 97406px"><NOBR>is replaced by 
the contents of the file <I>filename</I>. If the <I>filename </I>is quoted, 
searching for the file typically begins</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 97425px"><NOBR>where the 
source program was found; if it is not found there, or if the name is enclosed 
in &lt; and &gt;, searching</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 97445px"><NOBR>follows an 
implementation−defined rule to find the file. An included file may itself 
contain <FONT face=Courier>#include </FONT>lines.</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 96445px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 97525px"><NOBR>4.11 The C 
Preprocessor</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 97525px"><NOBR>82</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 97591px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=83><B>Page 83</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 97683px"><NOBR>There are often 
several <FONT face=Courier>#include </FONT>lines at the beginning of a source 
file, to include common <FONT face=Courier>#define</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 97703px"><NOBR>statements and 
<FONT face=Courier>extern </FONT>declarations, or to access the function 
prototype declarations for library functions</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 97723px"><NOBR>from headers 
like <FONT face=Courier>&lt;stdio.h&gt;</FONT>. (Strictly speaking, these need 
not be files; the details of how headers are</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 97743px"><NOBR>accessed are 
implementation−dependent.)</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 97783px"><NOBR>#include <FONT 
face=Times>is the preferred way to tie the declarations together for a large 
program. It guarantees that all the</FONT></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 97802px"><NOBR>source files 
will be supplied with the same definitions and variable declarations, and thus 
eliminates a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 97822px"><NOBR>particularly 
nasty kind of bug. Naturally, when an included file is changed, all files that 
depend on it must be</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 97842px"><NOBR>recompiled.</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 97882px"><NOBR><B>4.11.2 Macro 
Substitution</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 97925px"><NOBR>A definition 
has the form</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 97964px"><NOBR>#define <I>name 
replacement text</I></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 98001px"><NOBR>It calls for a 
macro substitution of the simplest kind − subsequent occurrences of the token 
<FONT face=Courier>name </FONT>will be</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 98020px"><NOBR>replaced by the 
<I>replacement text</I>. The name in a <FONT face=Courier>#define </FONT>has the 
same form as a variable name; the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 98040px"><NOBR>replacement 
text is arbitrary. Normally the replacement text is the rest of the line, but a 
long definition may be</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 98060px"><NOBR>continued onto 
several lines by placing a <FONT face=Courier>\ </FONT>at the end of each line 
to be continued. The scope of a name</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 98080px"><NOBR>defined with 
<FONT face=Courier>#define </FONT>is from its point of definition to the end of 
the source file being compiled. A</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 98100px"><NOBR>definition may 
use previous definitions. Substitutions are made only for tokens, and do not 
take place within</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 98119px"><NOBR>quoted strings. 
For <B><SPAN class=goohl2>example</SPAN></B>, if <FONT face=Courier>YES 
</FONT>is a defined name, there would be no substitution in <FONT 
face=Courier>printf("YES")</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 98139px"><NOBR>or in <FONT 
face=Courier>YESMAN</FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 98179px"><NOBR>Any name may be 
defined with any replacement text. For <B><SPAN 
class=goohl2>example</SPAN></B></NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 98218px"><NOBR>#define forever 
for (;;) /* infinite loop */</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 98255px"><NOBR>defines a new 
word, <FONT face=Courier>forever</FONT>, for an infinite loop.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 98294px"><NOBR>It is also 
possible to define macros with arguments, so the replacement text can be 
different for different calls</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 98314px"><NOBR>of the macro. 
As an <B><SPAN class=goohl2>example</SPAN></B>, define a macro called <FONT 
face=Courier>max</FONT>:</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 98354px"><NOBR>#define max(A, 
B) ((A) &gt; (B) ? (A) : (B))</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 98390px"><NOBR>Although it 
looks like a function call, a use of <FONT face=Courier>max </FONT>expands into 
in−line code. Each occurrence of a formal</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 98410px"><NOBR>parameter (here 
<FONT face=Courier>A </FONT>or <FONT face=Courier>B</FONT>) will be replaced by 
the corresponding actual argument. Thus the line</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 98449px"><NOBR>x = max(p+q, 
r+s);</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 98486px"><NOBR>will be 
replaced by the line</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 98525px"><NOBR>x = ((p+q) &gt; 
(r+s) ? (p+q) : (r+s));</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 98562px"><NOBR>So long as the 
arguments are treated consistently, this macro will serve for any data type; 
there is no need for</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 98581px"><NOBR>different kinds 
of <FONT face=Courier>max </FONT>for different data types, as there would be 
with functions.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 98621px"><NOBR>If you examine 
the expansion of <FONT face=Courier>max</FONT>, you will notice some pitfalls. 
The expressions are evaluated twice; this</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 98641px"><NOBR>is bad if they 
involve side effects like increment operators or input and output. For 
instance</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 98680px"><NOBR>max(i++, j++) 
/* WRONG */</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 97633px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 98713px"><NOBR>4.11.2 Macro 
Substitution</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 98713px"><NOBR>83</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 98779px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=84><B>Page 84</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 98871px"><NOBR>will increment 
the larger twice. Some care also has to be taken with parentheses to make sure 
the order of</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 98891px"><NOBR>evaluation is 
preserved; consider what happens when the macro</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 98930px"><NOBR>#define 
square(x) x * x /* WRONG */</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 98967px"><NOBR>is invoked as 
<FONT face=Courier>square(z+1)</FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 99007px"><NOBR>Nonetheless, 
macros are valuable. One practical <B><SPAN class=goohl2>example</SPAN></B> 
comes from <FONT face=Courier>&lt;stdio.hin which 
getchar</FONT></NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 99027px"><NOBR>and putchar are 
often defined as macros to avoid the run−time overhead of</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 99047px"><NOBR>a function call 
per character processed. The functions in &lt;ctype.h&gt; are</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 99067px"><NOBR>also usually 
implemented as macros.</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 99106px"><NOBR>Names may be 
undefined with <FONT face=Courier>#undef</FONT>, usually to ensure that a 
routine is really a function, not a macro:</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 99145px"><NOBR>#undef 
getchar</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 99178px"><NOBR>int 
getchar(void) { ... }</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 99214px"><NOBR>Formal 
parameters are not replaced within quoted strings. If, however, a parameter name 
is preceded by a <FONT face=Courier># </FONT>in</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 99234px"><NOBR>the replacement 
text, the combination will be expanded into a quoted string with the parameter 
replaced by the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 99254px"><NOBR>actual 
argument. This can be combined with string concatenation to make, for <B><SPAN 
class=goohl2>example</SPAN></B>, a debugging print</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 99274px"><NOBR>macro:</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 99313px"><NOBR>#define 
dprint(expr) printf(#expr " = %g\n", expr)</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 99350px"><NOBR>When this is 
invoked, as in</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 99389px"><NOBR>dprint(x/y)</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 99426px"><NOBR>the macro is 
expanded into</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 99465px"><NOBR>printf("x/y" " 
= x/y);</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 99502px"><NOBR>and the strings 
are concatenated, so the effect is</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 99541px"><NOBR>printf("x/y = 
x/y);</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 99577px"><NOBR>Within the 
actual argument, each <FONT face=Courier>" </FONT>is replaced by <FONT 
face=Courier>\" </FONT>and each <FONT face=Courier>\ </FONT>by <FONT 
face=Courier>\\</FONT>, so the result is a legal string constant.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 99617px"><NOBR>The 
preprocessor operator <FONT face=Courier>## </FONT>provides a way to concatenate 
actual arguments during macro expansion. If a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 99637px"><NOBR>parameter in 
the replacement text is adjacent to a <FONT face=Courier>##</FONT>, the 
parameter is replaced by the actual argument, the <FONT 
face=Courier>##</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 99657px"><NOBR>and surrounding 
white space are removed, and the result is re−scanned. For <B><SPAN 
class=goohl2>example</SPAN></B>, the macro <FONT 
face=Courier>paste</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 99676px"><NOBR>concatenates 
its two arguments:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 99716px"><NOBR>#define 
paste(front, back) front ## back</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 99752px"><NOBR>so <FONT 
face=Courier>paste(name, 1) </FONT>creates the token <FONT 
face=Courier>name1</FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 99792px"><NOBR>The rules for 
nested uses of <FONT face=Courier>## </FONT>are arcane; further details may be 
found in <FONT face=Times color=#0000ff><A 
href="#170">Appendix 
A</A></FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 99832px"><NOBR><I><B>Exercise 
4−14. </B></I>Define a macro <FONT face=Courier>swap(t,x,y) </FONT>that 
interchanges two arguments of type <FONT face=Courier>t</FONT>. (Block 
structure</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 99851px"><NOBR>will 
help.)</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 98821px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 99901px"><NOBR>4.11.2 Macro 
Substitution</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 99901px"><NOBR>84</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 99967px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=85><B>Page 85</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 100060px"><NOBR><B>4.11.3 
Conditional Inclusion</B></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 100103px"><NOBR>It is possible 
to control preprocessing itself with conditional statements that are evaluated 
during</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 100123px"><NOBR>preprocessing. 
This provides a way to include code selectively, depending on the value of 
conditions</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 100142px"><NOBR>evaluated 
during compilation.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 100182px"><NOBR>The <FONT 
face=Courier>#if </FONT>line evaluates a constant integer expression (which may 
not include <FONT face=Courier>sizeof</FONT>, casts, or <FONT 
face=Courier>enum</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 100202px"><NOBR>constants). If 
the expression is non−zero, subsequent lines until an <FONT face=Courier>#endif 
</FONT>or <FONT face=Courier>#elif </FONT>or <FONT face=Courier>#else 
</FONT>are</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 100222px"><NOBR>included. (The 
preprocessor statement <FONT face=Courier>#elif </FONT>is like <FONT 
face=Courier>else−if</FONT>.) The expression <FONT 
face=Courier>defined</FONT>(<I>name</I>) in a <FONT 
face=Courier>#if</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 100241px"><NOBR>is 1 if the 
<I>name </I>has been defined, and 0 otherwise.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 100281px"><NOBR>For <B><SPAN 
class=goohl2>example</SPAN></B>, to make sure that the contents of a file <FONT 
face=Courier>hdr.h </FONT>are included only once, the contents of the 
file</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 100301px"><NOBR>are surrounded 
with a conditional like this:</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 100340px"><NOBR>#if 
!defined(HDR)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 100357px"><NOBR>#define 
HDR</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 100390px"><NOBR>/* contents of 
hdr.h go here */</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 100423px"><NOBR>#endif</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 100459px"><NOBR>The first 
inclusion of <FONT face=Courier>hdr.h </FONT>defines the name <FONT 
face=Courier>HDR</FONT>; subsequent inclusions will find the name defined 
and</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 100479px"><NOBR>skip down to 
the <FONT face=Courier>#endif</FONT>. A similar style can be used to avoid 
including files multiple times. If this style is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 100499px"><NOBR>used 
consistently, then each header can itself include any other headers on which it 
depends, without the user</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 100519px"><NOBR>of the header 
having to deal with the interdependence.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 100558px"><NOBR>This sequence 
tests the name <FONT face=Courier>SYSTEM </FONT>to decide which version of a 
header to include:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 100598px"><NOBR>#if SYSTEM == 
SYSV</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 100614px"><NOBR>#define HDR 
"sysv.h"</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 100631px"><NOBR>#elif SYSTEM 
== BSD</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 100647px"><NOBR>#define HDR 
"bsd.h"</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 100664px"><NOBR>#elif SYSTEM 
== MSDOS</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 100680px"><NOBR>#define HDR 
"msdos.h"</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 100697px"><NOBR>#else</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 100713px"><NOBR>#define HDR 
"default.h"</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 100730px"><NOBR>#endif</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 100746px"><NOBR>#include 
HDR</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 100783px"><NOBR>The <FONT 
face=Courier>#ifdef </FONT>and <FONT face=Courier>#ifndef </FONT>lines are 
specialized forms that test whether a name is defined. The first <B><SPAN 
class=goohl2>example</SPAN></B></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 100802px"><NOBR>of <FONT 
face=Courier>#if </FONT>above could have been 
written</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 100842px"><NOBR>#ifndef 
HDR</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 100858px"><NOBR>#define 
HDR</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 100891px"><NOBR>/* contents of 
hdr.h go here */</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 100924px"><NOBR>#endif</NOBR></DIV></SPAN></FONT><FONT 
face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 320px; POSITION: absolute; TOP: 100964px"><NOBR><A 
href="#53">Back 
to Chapter 3 </A><FONT face=Times color=#000000>−− </FONT><A 
href="#1">Index 
</A><FONT face=Times color=#000000>−− </FONT><A 
href="#86">Chapter 
5</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 100009px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 101089px"><NOBR>4.11.3 
Conditional Inclusion</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 101089px"><NOBR>85</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 101155px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=86><B>Page 86</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 320px; POSITION: absolute; TOP: 101270px"><NOBR><A 
href="#64">Back 
to Chapter 4 </A><FONT face=Times color=#000000>−− </FONT><A 
href="#1">Index 
</A><FONT face=Times color=#000000>−− </FONT><A 
href="#117">Chapter 
6</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=4><SPAN 
style="FONT-SIZE: 26px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 101315px"><NOBR><B>Chapter 5 − 
Pointers and Arrays</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 101367px"><NOBR>A pointer is a 
variable that contains the address of a variable. Pointers are much used in C, 
partly because they</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 101386px"><NOBR>are sometimes 
the only way to express a computation, and partly because they usually lead to 
more compact</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 101406px"><NOBR>and efficient 
code than can be obtained in other ways. Pointers and arrays are closely 
related; this chapter also</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 101426px"><NOBR>explores this 
relationship and shows how to exploit it.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 101466px"><NOBR>Pointers have 
been lumped with the <FONT face=Courier>goto </FONT>statement as a marvelous way 
to create impossible−to−understand</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 101485px"><NOBR>programs. This 
is certainly true when they are used carelessly, and it is easy to create 
pointers that point</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 101505px"><NOBR>somewhere 
unexpected. With discipline, however, pointers can also be used to achieve 
clarity and simplicity.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 101525px"><NOBR>This is the 
aspect that we will try to illustrate.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 101565px"><NOBR>The main 
change in ANSI C is to make explicit the rules about how pointers can be 
manipulated, in effect</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 101584px"><NOBR>mandating what 
good programmers already practice and good compilers already enforce. In 
addition, the type</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 101605px"><NOBR>void * <FONT 
face=Times>(pointer to </FONT>void<FONT face=Times>) replaces </FONT>char * 
<FONT face=Times>as the proper type for a generic 
pointer.</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=4><SPAN 
style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 101645px"><NOBR><B>5.1 
Pointers and Addresses</B></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 101692px"><NOBR>Let us begin 
with a simplified picture of how memory is organized. A typical machine has an 
array of</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 101712px"><NOBR>consecutively 
numbered or addressed memory cells that may be manipulated individually or in 
contiguous</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 101732px"><NOBR>groups. One 
common situation is that any byte can be a <FONT face=Courier>char</FONT>, a 
pair of one−byte cells can be treated as a</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 101752px"><NOBR>short <FONT 
face=Times>integer, and four adjacent bytes form a </FONT>long<FONT face=Times>. 
A pointer is a group of cells (often two or four) that 
can</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 101771px"><NOBR>hold an 
address. So if <FONT face=Courier>c </FONT>is a <FONT face=Courier>char 
</FONT>and <FONT face=Courier>p </FONT>is a pointer that points to it, we could 
represent the situation this</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 101791px"><NOBR>way:</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 101969px"><NOBR>The unary 
operator <FONT face=Courier>&amp; </FONT>gives the address of an object, so the 
statement</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 102008px"><NOBR>p = 
c</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 102045px"><NOBR>assigns the 
address of <FONT face=Courier>c </FONT>to the variable <FONT 
face=Courier>p</FONT>, and <FONT face=Courier>p </FONT>is said to ``point to'' 
<FONT face=Courier>c</FONT>. The <FONT face=Courier>&amp; </FONT>operator only 
applies to objects</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 102064px"><NOBR>in memory: 
variables and array elements. It cannot be applied to expressions, constants, or 
<FONT face=Courier>register</FONT></NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 102084px"><NOBR>variables.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 102124px"><NOBR>The unary 
operator <FONT face=Courier>* </FONT>is the <I>indirection </I>or 
<I>dereferencing </I>operator; when applied to a pointer, it accesses 
the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 102144px"><NOBR>object the 
pointer points to. Suppose that <FONT face=Courier>x </FONT>and <FONT 
face=Courier>y </FONT>are integers and <FONT face=Courier>ip </FONT>is a pointer 
to <FONT face=Courier>int</FONT>. This artificial</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 102163px"><NOBR>sequence shows 
how to declare a pointer and how to use <FONT face=Courier>&amp; </FONT>and 
<FONT face=Courier>*</FONT>:</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 102203px"><NOBR>int x = 1, y = 
2, z[10];</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 102219px"><NOBR>int *ip; /* ip 
is a pointer to int */</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 101197px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 102277px"><NOBR>Chapter 5 − 
Pointers and Arrays</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 102277px"><NOBR>86</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 102343px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=87><B>Page 87</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 102435px"><NOBR>ip = x /* ip 
now points to x */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 102452px"><NOBR>y = *ip; /* y 
is now 1 */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 102468px"><NOBR>*ip = 0; /* x 
is now 0 */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 102485px"><NOBR>ip = /* ip now 
points to z[0] */</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 102521px"><NOBR>The 
declaration of <FONT face=Courier>x</FONT>, <FONT face=Courier>y</FONT>, and 
<FONT face=Courier>z </FONT>are what we've seen all along. The declaration of 
the pointer <FONT face=Courier>ip</FONT>,</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 102560px"><NOBR>int 
*ip;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 102597px"><NOBR>is intended as 
a mnemonic; it says that the expression <FONT face=Courier>*ip </FONT>is an 
<FONT face=Courier>int</FONT>. The syntax of the declaration for a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 102617px"><NOBR>variable 
mimics the syntax of expressions in which the variable might appear. This 
reasoning applies to</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 102637px"><NOBR>function 
declarations as well. For <B><SPAN 
class=goohl2>example</SPAN></B>,</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 102676px"><NOBR>double *dp, 
atof(char *);</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 102712px"><NOBR>says that in 
an expression <FONT face=Courier>*dp </FONT>and <FONT face=Courier>atof(s) 
</FONT>have values of <FONT face=Courier>double</FONT>, and that the argument of 
<FONT face=Courier>atof </FONT>is a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 102732px"><NOBR>pointer to 
<FONT face=Courier>char</FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 102772px"><NOBR>You should 
also note the implication that a pointer is constrained to point to a particular 
kind of object: every</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 102792px"><NOBR>pointer points 
to a specific data type. (There is one exception: a ``pointer to <FONT 
face=Courier>void</FONT>'' is used to hold any type of</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 102811px"><NOBR>pointer but 
cannot be dereferenced itself. We'll come back to it in <FONT face=Times 
color=#0000ff><A 
href="#109">Section 
5.11</A></FONT><A 
href="#109"></A>.)</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 102851px"><NOBR>If <FONT 
face=Courier>ip </FONT>points to the integer <FONT face=Courier>x</FONT>, then 
<FONT face=Courier>*ip </FONT>can occur in any context where <FONT 
face=Courier>x </FONT>could, so</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 102890px"><NOBR>*ip = *ip + 
10;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 102927px"><NOBR>increments 
<FONT face=Courier>*ip </FONT>by 10.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 102967px"><NOBR>The unary 
operators <FONT face=Courier>* </FONT>and <FONT face=Courier>&amp; </FONT>bind 
more tightly than arithmetic operators, so the 
assignment</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 103006px"><NOBR>y = *ip + 
1</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 103042px"><NOBR>takes whatever 
<FONT face=Courier>ip </FONT>points at, adds 1, and assigns the result to <FONT 
face=Courier>y</FONT>, while</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 103082px"><NOBR>*ip += 
1</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 103118px"><NOBR>increments 
what <FONT face=Courier>ip </FONT>points to, as 
do</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 103158px"><NOBR>++*ip</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 103194px"><NOBR>and</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 103234px"><NOBR>(*ip)++</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 103270px"><NOBR>The 
parentheses are necessary in this last <B><SPAN class=goohl2>example</SPAN></B>; 
without them, the expression would increment <FONT face=Courier>ip 
</FONT>instead</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 103290px"><NOBR>of what it 
points to, because unary operators like <FONT face=Courier>* </FONT>and <FONT 
face=Courier>++ </FONT>associate right to left.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 103330px"><NOBR>Finally, since 
pointers are variables, they can be used without dereferencing. For <B><SPAN 
class=goohl2>example</SPAN></B>, if <FONT face=Courier>iq </FONT>is 
another</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 103349px"><NOBR>pointer to 
<FONT face=Courier>int</FONT>,</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 103389px"><NOBR>iq = 
ip</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 103425px"><NOBR>copies the 
contents of <FONT face=Courier>ip </FONT>into <FONT face=Courier>iq</FONT>, thus 
making <FONT face=Courier>iq </FONT>point to whatever <FONT face=Courier>ip 
</FONT>pointed to.</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 102385px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 103465px"><NOBR>Chapter 5 − 
Pointers and Arrays</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 103465px"><NOBR>87</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 103531px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=88><B>Page 88</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=4><SPAN style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 103625px"><NOBR><B>5.2 
Pointers and Function Arguments</B></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 103672px"><NOBR>Since C passes 
arguments to functions by value, there is no direct way for the called function 
to alter a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 103691px"><NOBR>variable in 
the calling function. For instance, a sorting routine might exchange two 
out−of−order arguments</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 103711px"><NOBR>with a 
function called <FONT face=Courier>swap</FONT>. It is not enough to 
write</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 103751px"><NOBR>swap(a, 
b);</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 103787px"><NOBR>where the 
<FONT face=Courier>swap </FONT>function is defined 
as</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 103826px"><NOBR>void swap(int 
x, int y) /* WRONG */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 103843px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 103859px"><NOBR>int 
temp;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 103892px"><NOBR>temp = 
x;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 103909px"><NOBR>x = 
y;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 103925px"><NOBR>y = 
temp;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 103942px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 103978px"><NOBR>Because of 
call by value, <FONT face=Courier>swap </FONT>can't affect the arguments <FONT 
face=Courier>a </FONT>and <FONT face=Courier>b </FONT>in the routine that called 
it. The function</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 103998px"><NOBR>above swaps 
<I>copies </I>of <FONT face=Courier>a </FONT>and <FONT 
face=Courier>b</FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 104038px"><NOBR>The way to 
obtain the desired effect is for the calling program to pass <I>pointers </I>to 
the values to be changed:</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 104077px"><NOBR>swap(</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 104114px"><NOBR>Since the 
operator <FONT face=Courier>&amp; </FONT>produces the address of a variable, 
<FONT face=Courier>&amp;a </FONT>is a pointer to <FONT face=Courier>a</FONT>. In 
<FONT face=Courier>swap </FONT>itself, the parameters</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 104134px"><NOBR>are declared 
as pointers, and the operands are accessed indirectly through 
them.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 104173px"><NOBR>void swap(int 
*px, int *py) /* interchange *px and *py */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 104189px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 104206px"><NOBR>int 
temp;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 104239px"><NOBR>temp = 
*px;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 104255px"><NOBR>*px = 
*py;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 104272px"><NOBR>*py = 
temp;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 104288px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 104325px"><NOBR>Pictorially:</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 103573px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 104653px"><NOBR>5.2 Pointers 
and Function Arguments</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 104653px"><NOBR>88</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 104719px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=89><B>Page 89</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 105324px"><NOBR>Pointer 
arguments enable a function to access and change objects in the function that 
called it. As an <B><SPAN class=goohl2>example</SPAN></B>,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 105344px"><NOBR>consider a 
function <FONT face=Courier>getint </FONT>that performs free−format input 
conversion by breaking a stream of characters</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 105364px"><NOBR>into integer 
values, one integer per call. <FONT face=Courier>getint </FONT>has to return the 
value it found and also signal end of file</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 105384px"><NOBR>when there is 
no more input. These values have to be passed back by separate paths, for no 
matter what value</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 105403px"><NOBR>is used for 
<FONT face=Courier>EOF</FONT>, that could also be the value of an input 
integer.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 105443px"><NOBR>One solution 
is to have <FONT face=Courier>getint </FONT>return the end of file status as its 
function value, while using a pointer</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 105463px"><NOBR>argument to 
store the converted integer back in the calling function. This is the scheme 
used by <FONT face=Courier>scanf </FONT>as</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 105483px"><NOBR>well; see <A 
href="#142"></A><FONT 
face=Times color=#0000ff><A 
href="#142">Section 
7.4</A></FONT><A 
href="#142"></A>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 105522px"><NOBR>The following 
loop fills an array with integers by calls to <FONT 
face=Courier>getint</FONT>:</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 105562px"><NOBR>int n, 
array[SIZE], getint(int *);</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 105595px"><NOBR>for (n = 0; n 
&lt; SIZE &amp;getint(!= EOF; n++)</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 105611px"><NOBR>;</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 105648px"><NOBR>Each call sets 
<FONT face=Courier>array[n] </FONT>to the next integer found in the input and 
increments <FONT face=Courier>n</FONT>. Notice that it is essential 
to</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 105667px"><NOBR>pass the 
address of <FONT face=Courier>array[n] </FONT>to <FONT 
face=Courier>getint</FONT>. Otherwise there is no way for <FONT 
face=Courier>getint </FONT>to communicate the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 105687px"><NOBR>converted 
integer back to the caller.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 105727px"><NOBR>Our version of 
<FONT face=Courier>getint </FONT>returns <FONT face=Courier>EOF </FONT>for end 
of file, zero if the next input is not a number, and a positive</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 105747px"><NOBR>value if the 
input contains a valid number.</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 105786px"><NOBR>#include 
&lt;ctype.h&gt;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 104761px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 105841px"><NOBR>5.2 Pointers 
and Function Arguments</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 105841px"><NOBR>89</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 105907px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=90><B>Page 90</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 105999px"><NOBR>int 
getch(void);</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 106016px"><NOBR>void 
ungetch(int);</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 106049px"><NOBR>/* getint: get 
next integer from input into *pn */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 106065px"><NOBR>int getint(int 
*pn)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 106082px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 106098px"><NOBR>int c, 
sign;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 106131px"><NOBR>while 
(isspace(c = getch())) /* skip white space */</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 106148px"><NOBR>;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 106164px"><NOBR>if 
(!isdigit(c) &amp;c != EOF &amp;c != '+' &amp;c != '−') {</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 106181px"><NOBR>ungetch(c); /* 
it is not a number */</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 106197px"><NOBR>return 
0;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 106214px"><NOBR>}</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 106230px"><NOBR>sign = (c == 
'−') ? −1 : 1;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 106247px"><NOBR>if (c == '+' 
|| c == '−')</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 106263px"><NOBR>c = 
getch();</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 106280px"><NOBR>for (*pn = 0; 
isdigit(c), c = getch())</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 106296px"><NOBR>*pn = 10 * *pn 
+ (c − '0');</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 106313px"><NOBR>*pn *= 
sign;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 106329px"><NOBR>if (c != 
EOF)</NOBR></DIV>
<DIV 
style="LEFT: 199px; POSITION: absolute; TOP: 106346px"><NOBR>ungetch(c);</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 106362px"><NOBR>return 
c;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 106379px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 106415px"><NOBR>Throughout 
<FONT face=Courier>getint</FONT>, <FONT face=Courier>*pn </FONT>is used as an 
ordinary <FONT face=Courier>int </FONT>variable. We have also used <FONT 
face=Courier>getch </FONT>and <FONT face=Courier>ungetch</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 106435px"><NOBR>(described in 
<FONT face=Times color=#0000ff><A 
href="#69">Section 
4.3</A></FONT>) so the one extra character that must be read can be pushed back 
onto the input.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 106474px"><NOBR><I><B>Exercise 
5−1. </B></I>As written, <FONT face=Courier>getint </FONT>treats a <FONT 
face=Courier>+ </FONT>or <FONT face=Courier>− </FONT>not followed by a digit as 
a valid representation of zero.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 106494px"><NOBR>Fix it to push 
such a character back on the input.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 106534px"><NOBR><I><B>Exercise 
5−2. </B></I>Write <FONT face=Courier>getfloat</FONT>, the floating−point analog 
of <FONT face=Courier>getint</FONT>. What type does <FONT face=Courier>getfloat 
</FONT>return</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 106554px"><NOBR>as its 
function value?</NOBR></DIV></SPAN></FONT><FONT face=Times size=4><SPAN 
style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 106595px"><NOBR><B>5.3 
Pointers and Arrays</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 106642px"><NOBR>In C, there is 
a strong relationship between pointers and arrays, strong enough that pointers 
and arrays should</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 106661px"><NOBR>be discussed 
simultaneously. Any operation that can be achieved by array subscripting can 
also be done with</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 106681px"><NOBR>pointers. The 
pointer version will in general be faster but, at least to the uninitiated, 
somewhat harder to</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 106701px"><NOBR>understand.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 106741px"><NOBR>The 
declaration</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 106780px"><NOBR>int 
a[10];</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 106816px"><NOBR>defines an 
array of size 10, that is, a block of 10 consecutive objects named <FONT 
face=Courier>a[0]</FONT>, <FONT face=Courier>a[1]</FONT>, ...,<FONT 
face=Courier>a[9]</FONT>.</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 105949px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 107029px"><NOBR>5.3 Pointers 
and Arrays</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 107029px"><NOBR>90</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 107095px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=91><B>Page 91</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 107187px"><NOBR>The notation 
<FONT face=Courier>a[i] </FONT>refers to the <FONT face=Courier>i</FONT>−th 
element of the array. If <FONT face=Courier>pa </FONT>is a pointer to an 
integer, declared as</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 107227px"><NOBR>int 
*pa;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 107263px"><NOBR>then the 
assignment</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 107303px"><NOBR>pa = 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 107339px"><NOBR>sets <FONT 
face=Courier>pa </FONT>to point to element zero of <FONT face=Courier>a</FONT>; 
that is, <FONT face=Courier>pa </FONT>contains the address of <FONT 
face=Courier>a[0]</FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 107609px"><NOBR>Now the 
assignment</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 107648px"><NOBR>x = 
*pa;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 107685px"><NOBR>will copy the 
contents of <FONT face=Courier>a[0] </FONT>into <FONT 
face=Courier>x</FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 107724px"><NOBR>If <FONT 
face=Courier>pa </FONT>points to a particular element of an array, then by 
definition <FONT face=Courier>pa+1 </FONT>points to the next element, <FONT 
face=Courier>pa+i</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 107744px"><NOBR>points <FONT 
face=Courier>i </FONT>elements after <FONT face=Courier>pa</FONT>, and <FONT 
face=Courier>pa−i </FONT>points <FONT face=Courier>i </FONT>elements before. 
Thus, if <FONT face=Courier>pa </FONT>points to <FONT 
face=Courier>a[0]</FONT>,</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 107784px"><NOBR>*(pa+1)</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 107820px"><NOBR>refers to the 
contents of <FONT face=Courier>a[1]</FONT>, <FONT face=Courier>pa+i </FONT>is 
the address of <FONT face=Courier>a[i]</FONT>, and <FONT face=Courier>*(pa+i) 
</FONT>is the contents of <FONT face=Courier>a[i]</FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 108100px"><NOBR>These remarks 
are true regardless of the type or size of the variables in the array <FONT 
face=Courier>a</FONT>. The meaning of ``adding 1</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 108120px"><NOBR>to a 
pointer,'' and by extension, all pointer arithmetic, is that <FONT 
face=Courier>pa+1 </FONT>points to the next object, and <FONT face=Courier>pa+i 
</FONT>points</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 108139px"><NOBR>to the <FONT 
face=Courier>i</FONT>−th object beyond <FONT 
face=Courier>pa</FONT>.</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 107137px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 108217px"><NOBR>5.3 Pointers 
and Arrays</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 108217px"><NOBR>91</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 108283px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=92><B>Page 92</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 108375px"><NOBR>The 
correspondence between indexing and pointer arithmetic is very close. By 
definition, the value of a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 108395px"><NOBR>variable or 
expression of type array is the address of element zero of the array. Thus after 
the assignment</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 108434px"><NOBR>pa = 
</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 108472px"><NOBR>pa <FONT 
face=Times>and </FONT>a <FONT face=Times>have identical values. Since the name 
of an array is a synonym for the location of the initial 
element,</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 108491px"><NOBR>the assignment 
<FONT face=Courier>pa=&amp;a[0] </FONT>can also be written 
as</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 108530px"><NOBR>pa = 
a;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 108567px"><NOBR>Rather more 
surprising, at first sight, is the fact that a reference to <FONT 
face=Courier>a[i] </FONT>can also be written as <FONT 
face=Courier>*(a+i)</FONT>. In</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 108586px"><NOBR>evaluating 
<FONT face=Courier>a[i]</FONT>, C converts it to <FONT face=Courier>*(a+i) 
</FONT>immediately; the two forms are equivalent. Applying the 
operator</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 108607px"><NOBR>&amp; <FONT 
face=Times>to both parts of this equivalence, it follows that </FONT>&amp;a[i] 
<FONT face=Times>and </FONT>a+i <FONT face=Times>are also identical: </FONT>a+i 
<FONT face=Times>is the address of the</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 108627px"><NOBR>i<FONT 
face=Times>−th element beyond </FONT>a<FONT face=Times>. As the other side of 
this coin, if </FONT>pa <FONT face=Times>is a pointer, expressions might use it 
with a</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 108646px"><NOBR>subscript; 
<FONT face=Courier>pa[i] </FONT>is identical to <FONT 
face=Courier>*(pa+i)</FONT>. In short, an array−and−index expression is 
equivalent to one</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 108666px"><NOBR>written as a 
pointer and offset.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 108705px"><NOBR>There is one 
difference between an array name and a pointer that must be kept in mind. A 
pointer is a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 108725px"><NOBR>variable, so 
<FONT face=Courier>pa=a </FONT>and <FONT face=Courier>pa++ </FONT>are legal. But 
an array name is not a variable; constructions like <FONT face=Courier>a=pa 
</FONT>and <FONT face=Courier>a++</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 108745px"><NOBR>are 
illegal.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 108784px"><NOBR>When an array 
name is passed to a function, what is passed is the location of the initial 
element. Within the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 108804px"><NOBR>called 
function, this argument is a local variable, and so an array name parameter is a 
pointer, that is, a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 108824px"><NOBR>variable 
containing an address. We can use this fact to write another version of <FONT 
face=Courier>strlen</FONT>, which computes the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 108844px"><NOBR>length of a 
string.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 108883px"><NOBR>/* strlen: 
return length of string s */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 108900px"><NOBR>int 
strlen(char *s)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 108916px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 108933px"><NOBR>int 
n;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 108966px"><NOBR>for (n = 0; *s 
!= '\0', s++)</NOBR></DIV>
<DIV 
style="LEFT: 199px; POSITION: absolute; TOP: 108982px"><NOBR>n++;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 108999px"><NOBR>return 
n;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 109015px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 109052px"><NOBR>Since <FONT 
face=Courier>s </FONT>is a pointer, incrementing it is perfectly legal; <FONT 
face=Courier>s++ </FONT>has no effect on the character string in the 
function</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 109072px"><NOBR>that called 
<FONT face=Courier>strlen</FONT>, but merely increments <FONT 
face=Courier>strlen</FONT>'s private copy of the pointer. That means that calls 
like</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 109111px"><NOBR>strlen("hello, 
world"); /* string constant */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 109127px"><NOBR>strlen(array); 
/* char array[100]; */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 109144px"><NOBR>strlen(ptr); 
/* char *ptr; */</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 109180px"><NOBR>all 
work.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 109220px"><NOBR>As formal 
parameters in a function definition,</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 109259px"><NOBR>char 
s[];</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 109296px"><NOBR>and</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 109335px"><NOBR>char 
*s;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 108325px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 109405px"><NOBR>5.3 Pointers 
and Arrays</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 109405px"><NOBR>92</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 109471px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=93><B>Page 93</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 109563px"><NOBR>are 
equivalent; we prefer the latter because it says more explicitly that the 
variable is a pointer. When an array</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 109583px"><NOBR>name is passed 
to a function, the function can at its convenience believe that it has been 
handed either an array</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 109603px"><NOBR>or a pointer, 
and manipulate it accordingly. It can even use both notations if it seems 
appropriate and clear.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 109642px"><NOBR>It is possible 
to pass part of an array to a function, by passing a pointer to the beginning of 
the subarray. For</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 109662px"><NOBR><B><SPAN 
class=goohl2>example</SPAN></B>, if <FONT face=Courier>a </FONT>is an 
array,</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 109702px"><NOBR>f(</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 109735px"><NOBR>and</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 109775px"><NOBR>f(a+2)</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 109811px"><NOBR>both pass to 
the function <FONT face=Courier>f </FONT>the address of the subarray that starts 
at <FONT face=Courier>a[2]</FONT>. Within <FONT face=Courier>f</FONT>, the 
parameter declaration</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 109831px"><NOBR>can 
read</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 109871px"><NOBR>f(int arr[]) { 
... }</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 109907px"><NOBR>or</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 109946px"><NOBR>f(int *arr) { 
... }</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 109983px"><NOBR>So as far as 
<FONT face=Courier>f </FONT>is concerned, the fact that the parameter refers to 
part of a larger array is of no consequence.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 110022px"><NOBR>If one is sure 
that the elements exist, it is also possible to index backwards in an array; 
<FONT face=Courier>p[−1]</FONT>, <FONT face=Courier>p[−2]</FONT>, 
and</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 110042px"><NOBR>so on are 
syntactically legal, and refer to the elements that immediately precede <FONT 
face=Courier>p[0]</FONT>. Of course, it is illegal</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 110062px"><NOBR>to refer to 
objects that are not within the array bounds.</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=4><SPAN style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 110103px"><NOBR><B>5.4 Address 
Arithmetic</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 110150px"><NOBR>If <FONT 
face=Courier>p </FONT>is a pointer to some element of an array, then <FONT 
face=Courier>p++ </FONT>increments <FONT face=Courier>p </FONT>to point to the 
next element, and <FONT face=Courier>p+=i</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 110170px"><NOBR>increments it 
to point <FONT face=Courier>i </FONT>elements beyond where it currently does. 
These and similar constructions are the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 110190px"><NOBR>simples forms 
of pointer or address arithmetic.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 110229px"><NOBR>C is 
consistent and regular in its approach to address arithmetic; its integration of 
pointers, arrays, and address</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 110249px"><NOBR>arithmetic is 
one of the strengths of the language. Let us illustrate by writing a rudimentary 
storage allocator.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 110269px"><NOBR>There are two 
routines. The first, <FONT face=Courier>alloc(n)</FONT>, returns a pointer to 
<FONT face=Courier>n </FONT>consecutive character positions, which</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 110289px"><NOBR>can be used by 
the caller of <FONT face=Courier>alloc </FONT>for storing characters. The 
second, <FONT face=Courier>afree(p)</FONT>, releases the storage 
thus</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 110308px"><NOBR>acquired so it 
can be re−used later. The routines are ``rudimentary'' because the calls to 
<FONT face=Courier>afree </FONT>must be made</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 110328px"><NOBR>in the 
opposite order to the calls made on <FONT face=Courier>alloc</FONT>. That is, 
the storage managed by <FONT face=Courier>alloc </FONT>and <FONT 
face=Courier>afree </FONT>is a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 110348px"><NOBR>stack, or 
last−in, first−out. The standard library provides analogous functions called 
<FONT face=Courier>malloc </FONT>and <FONT face=Courier>free 
</FONT>that</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 110368px"><NOBR>have no such 
restrictions; in <A 
href="#165"></A><FONT 
face=Times color=#0000ff><A 
href="#165">Section 
8.7 </A></FONT>we will show how they can be implemented.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 110407px"><NOBR>The easiest 
implementation is to have <FONT face=Courier>alloc </FONT>hand out pieces of a 
large character array that we will call</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 110428px"><NOBR>allocbuf<FONT 
face=Times>. This array is private to </FONT>alloc <FONT face=Times>and 
</FONT>afree<FONT face=Times>. Since they deal in pointers, not array indices, 
no</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 110447px"><NOBR>other routine 
need know the name of the array, which can be declared <FONT face=Courier>static 
</FONT>in the source file containing</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 110468px"><NOBR>alloc <FONT 
face=Times>and </FONT>afree<FONT face=Times>, and thus be invisible outside it. 
In practical implementations, the array may well not 
even</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 110487px"><NOBR>have a name; 
it might instead be obtained by calling <FONT face=Courier>malloc </FONT>or by 
asking the operating system for a pointer</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 110506px"><NOBR>to some 
unnamed block of storage.</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 109513px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 110593px"><NOBR>5.4 Address 
Arithmetic</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 110593px"><NOBR>93</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 110659px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=94><B>Page 94</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 110751px"><NOBR>The other 
information needed is how much of <FONT face=Courier>allocbuf </FONT>has been 
used. We use a pointer, called <FONT face=Courier>allocp</FONT>,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 110771px"><NOBR>that points to 
the next free element. When <FONT face=Courier>alloc </FONT>is asked for <FONT 
face=Courier>n </FONT>characters, it checks to see if there is 
enough</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 110791px"><NOBR>room left in 
<FONT face=Courier>allocbuf</FONT>. If so, <FONT face=Courier>alloc 
</FONT>returns the current value of <FONT face=Courier>allocp </FONT>(i.e., the 
beginning of the free</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 110811px"><NOBR>block), then 
increments it by <FONT face=Courier>n </FONT>to point to the next free area. If 
there is no room, <FONT face=Courier>alloc </FONT>returns 
zero.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 110831px"><NOBR>afree(p) <FONT 
face=Times>merely sets </FONT>allocp <FONT face=Times>to </FONT>p <FONT 
face=Times>if </FONT>p <FONT face=Times>is inside </FONT>allocbuf<FONT 
face=Times>.</FONT></NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 111195px"><NOBR>#define 
ALLOCSIZE 10000 /* size of available space */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 111228px"><NOBR>static char 
allocbuf[ALLOCSIZE]; /* storage for alloc */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 111244px"><NOBR>static char 
*allocp = allocbuf; /* next free position */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 111277px"><NOBR>char 
*alloc(int n) /* return pointer to n characters */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 111294px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 111310px"><NOBR>if (allocbuf + 
ALLOCSIZE − allocp &gt;= n) { /* it fits */</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 111327px"><NOBR>allocp += 
n;</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 111343px"><NOBR>return allocp 
− n; /* old p */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 111360px"><NOBR>} else /* not 
enough room */</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 111376px"><NOBR>return 
0;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 111393px"><NOBR>}</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 111426px"><NOBR>void 
afree(char *p) /* free storage pointed to by p */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 111442px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 111459px"><NOBR>if (p &gt;= 
allocbuf &amp;p &lt; allocbuf + ALLOCSIZE)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 111475px"><NOBR>allocp = 
p;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 111492px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 111528px"><NOBR>In general a 
pointer can be initialized just as any other variable can, though normally the 
only meaningful</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 111548px"><NOBR>values are 
zero or an expression involving the address of previously defined data of 
appropriate type. The</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 111568px"><NOBR>declaration</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 111607px"><NOBR>static char 
*allocp = allocbuf;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 111644px"><NOBR>defines <FONT 
face=Courier>allocp </FONT>to be a character pointer and initializes it to point 
to the beginning of <FONT face=Courier>allocbuf</FONT>, which is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 111664px"><NOBR>the next free 
position when the program starts. This could also have been 
written</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 111703px"><NOBR>static char 
*allocp = </NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 111739px"><NOBR>since the 
array name <I>is </I>the address of the zeroth element.</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 110701px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 111781px"><NOBR>5.4 Address 
Arithmetic</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 111781px"><NOBR>94</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 111847px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=95><B>Page 95</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 111939px"><NOBR>The 
test</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 111979px"><NOBR>if (allocbuf + 
ALLOCSIZE − allocp &gt;= n) { /* it fits */</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 112015px"><NOBR>checks if 
there's enough room to satisfy a request for <FONT face=Courier>n 
</FONT>characters. If there is, the new value of <FONT 
face=Courier>allocp</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 112035px"><NOBR>would be at 
most one beyond the end of <FONT face=Courier>allocbuf</FONT>. If the request 
can be satisfied, <FONT face=Courier>alloc </FONT>returns a pointer</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 112055px"><NOBR>to the 
beginning of a block of characters (notice the declaration of the function 
itself). If not, <FONT face=Courier>alloc </FONT>must</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 112075px"><NOBR>return some 
signal that there is no space left. C guarantees that zero is never a valid 
address for data, so a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 112094px"><NOBR>return value 
of zero can be used to signal an abnormal event, in this case no 
space.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 112134px"><NOBR>Pointers and 
integers are not interchangeable. Zero is the sole exception: the constant zero 
may be assigned to</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 112154px"><NOBR>a pointer, and 
a pointer may be compared with the constant zero. The symbolic constant <FONT 
face=Courier>NULL </FONT>is often used in</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 112174px"><NOBR>place of zero, 
as a mnemonic to indicate more clearly that this is a special value for a 
pointer. <FONT face=Courier>NULL </FONT>is defined</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 112193px"><NOBR>in <FONT 
face=Courier>&lt;stdio.h&gt;</FONT>. We will use <FONT face=Courier>NULL 
</FONT>henceforth.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 112233px"><NOBR>Tests 
like</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 112272px"><NOBR>if (allocbuf + 
ALLOCSIZE − allocp &gt;= n) { /* it fits */</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 112309px"><NOBR>and</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 112348px"><NOBR>if (p &gt;= 
allocbuf &amp;p &lt; allocbuf + ALLOCSIZE)</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 112385px"><NOBR>show several 
important facets of pointer arithmetic. First, pointers may be compared under 
certain</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 112405px"><NOBR>circumstances. 
If <FONT face=Courier>p </FONT>and <FONT face=Courier>q </FONT>point to members 
of the same array, then relations like <FONT face=Courier>==</FONT>, <FONT 
face=Courier>!=</FONT>, <FONT face=Courier>&lt;</FONT>, <FONT 
face=Courier>&gt;=</FONT>, etc., work</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 112424px"><NOBR>properly. For 
<B><SPAN class=goohl2>example</SPAN></B>,</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 112464px"><NOBR>p &lt; 
q</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 112500px"><NOBR>is true if 
<FONT face=Courier>p </FONT>points to an earlier element of the array than <FONT 
face=Courier>q </FONT>does. Any pointer can be meaningfully 
compared</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 112520px"><NOBR>for equality 
or inequality with zero. But the behavior is undefined for arithmetic or 
comparisons with pointers</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 112540px"><NOBR>that do not 
point to members of the same array. (There is one exception: the address of the 
first element past</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 112560px"><NOBR>the end of an 
array can be used in pointer arithmetic.)</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 112599px"><NOBR>Second, we 
have already observed that a pointer and an integer may be added or subtracted. 
The construction</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 112639px"><NOBR>p + 
n</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 112675px"><NOBR>means the 
address of the <FONT face=Courier>n</FONT>−th object beyond the one <FONT 
face=Courier>p </FONT>currently points to. This is true regardless of the 
kind</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 112695px"><NOBR>of object 
<FONT face=Courier>p </FONT>points to; <FONT face=Courier>n </FONT>is scaled 
according to the size of the objects <FONT face=Courier>p </FONT>points to, 
which is determined by the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 112715px"><NOBR>declaration of 
<FONT face=Courier>p</FONT>. If an <FONT face=Courier>int </FONT>is four bytes, 
for <B><SPAN class=goohl2>example</SPAN></B>, the <FONT face=Courier>int 
</FONT>will be scaled by four.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 112754px"><NOBR>Pointer 
subtraction is also valid: if <FONT face=Courier>p </FONT>and <FONT 
face=Courier>q </FONT>point to elements of the same array, and <FONT 
face=Courier>p&lt;q</FONT>, then <FONT face=Courier>q−p+1 </FONT>is 
the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 112774px"><NOBR>number of 
elements from <FONT face=Courier>p </FONT>to <FONT face=Courier>q 
</FONT>inclusive. This fact can be used to write yet another version of <FONT 
face=Courier>strlen</FONT>:</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 112814px"><NOBR>/* strlen: 
return length of string s */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 112830px"><NOBR>int 
strlen(char *s)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 112847px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 112863px"><NOBR>char *p = 
s;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 112896px"><NOBR>while (*p != 
'\0')</NOBR></DIV>
<DIV 
style="LEFT: 199px; POSITION: absolute; TOP: 112913px"><NOBR>p++;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 112929px"><NOBR>return p − 
s;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 111889px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 112969px"><NOBR>5.4 Address 
Arithmetic</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 112969px"><NOBR>95</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 113035px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=96><B>Page 96</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 113127px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 113164px"><NOBR>In its 
declaration, <FONT face=Courier>p </FONT>is initialized to <FONT 
face=Courier>s</FONT>, that is, to point to the first character of the string. 
In the <FONT face=Courier>while </FONT>loop,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 113183px"><NOBR>each character 
in turn is examined until the <FONT face=Courier>'\0' </FONT>at the end is seen. 
Because <FONT face=Courier>p </FONT>points to characters, <FONT 
face=Courier>p++</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 113203px"><NOBR>advances <FONT 
face=Courier>p </FONT>to the next character each time, and <FONT 
face=Courier>p−s </FONT>gives the number of characters advanced over, that is, 
the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 113223px"><NOBR>string length. 
(The number of characters in the string could be too large to store in an <FONT 
face=Courier>int</FONT>. The header</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 113244px"><NOBR>&lt;stddef.h&gt; 
<FONT face=Times>defines a type </FONT>ptrdiff_t <FONT face=Times>that is large 
enough to hold the signed difference of two 
pointer</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 113263px"><NOBR>values. If we 
were being cautious, however, we would use <FONT face=Courier>size_t </FONT>for 
the return value of <FONT face=Courier>strlen</FONT>, to match</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 113282px"><NOBR>the standard 
library version. <FONT face=Courier>size_t </FONT>is the unsigned integer type 
returned by the <FONT face=Courier>sizeof </FONT>operator.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 113322px"><NOBR>Pointer 
arithmetic is consistent: if we had been dealing with <FONT 
face=Courier>float</FONT>s, which occupy more storage that <FONT 
face=Courier>char</FONT>s,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 113342px"><NOBR>and if <FONT 
face=Courier>p </FONT>were a pointer to <FONT face=Courier>float</FONT>, <FONT 
face=Courier>p++ </FONT>would advance to the next <FONT 
face=Courier>float</FONT>. Thus we could write another</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 113362px"><NOBR>version of 
<FONT face=Courier>alloc </FONT>that maintains <FONT face=Courier>float</FONT>s 
instead of <FONT face=Courier>char</FONT>s, merely by changing <FONT 
face=Courier>char </FONT>to <FONT face=Courier>float 
</FONT>throughout</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 113382px"><NOBR>alloc <FONT 
face=Times>and </FONT>afree<FONT face=Times>. All the pointer manipulations 
automatically take into account the size of the 
objects</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 113401px"><NOBR>pointed 
to.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 113441px"><NOBR>The valid 
pointer operations are assignment of pointers of the same type, adding or 
subtracting a pointer and</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 113461px"><NOBR>an integer, 
subtracting or comparing two pointers to members of the same array, and 
assigning or comparing</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 113480px"><NOBR>to zero. All 
other pointer arithmetic is illegal. It is not legal to add two pointers, or to 
multiply or divide or</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 113500px"><NOBR>shift or mask 
them, or to add <FONT face=Courier>float </FONT>or <FONT face=Courier>double 
</FONT>to them, or even, except for <FONT face=Courier>void *</FONT>, to assign 
a pointer of</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 113520px"><NOBR>one type to a 
pointer of another type without a cast.</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=4><SPAN style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 113561px"><NOBR><B>5.5 
Character Pointers and Functions</B></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 113608px"><NOBR>A <I>string 
constant</I>, written as</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 113647px"><NOBR>"I am a 
string"</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 113684px"><NOBR>is an array of 
characters. In the internal representation, the array is terminated with the 
null character <FONT face=Courier>'\0' </FONT>so</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 113704px"><NOBR>that programs 
can find the end. The length in storage is thus one more than the number of 
characters between</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 113723px"><NOBR>the double 
quotes.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 113763px"><NOBR>Perhaps the 
most common occurrence of string constants is as arguments to functions, as 
in</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 113802px"><NOBR>printf("hello, 
world\n");</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 113839px"><NOBR>When a 
character string like this appears in a program, access to it is through a 
character pointer; <FONT face=Courier>printf</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 113859px"><NOBR>receives a 
pointer to the beginning of the character array. That is, a string constant is 
accessed by a pointer to</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 113878px"><NOBR>its first 
element.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 113918px"><NOBR>String 
constants need not be function arguments. If <FONT face=Courier>pmessage 
</FONT>is declared as</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 113957px"><NOBR>char 
*pmessage;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 113994px"><NOBR>then the 
statement</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 114033px"><NOBR>pmessage = 
"now is the time";</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 114070px"><NOBR>assigns to 
<FONT face=Courier>pmessage </FONT>a pointer to the character array. This is 
<I>not </I>a string copy; only pointers are involved. C</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 114090px"><NOBR>does not 
provide any operators for processing an entire string of characters as a 
unit.</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 113077px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 114157px"><NOBR>5.5 Character 
Pointers and Functions</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 114157px"><NOBR>96</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 114223px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=97><B>Page 97</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 114315px"><NOBR>There is an 
important difference between these definitions:</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 114355px"><NOBR>char 
amessage[] = "now is the time"; /* an array */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 114371px"><NOBR>char *pmessage 
= "now is the time"; /* a pointer */</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 114409px"><NOBR>amessage <FONT 
face=Times>is an array, just big enough to hold the sequence of characters and 
</FONT>'\0' <FONT face=Times>that initializes 
it.</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 114427px"><NOBR>Individual 
characters within the array may be changed but <FONT face=Courier>amessage 
</FONT>will always refer to the same storage.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 114447px"><NOBR>On the other 
hand, <FONT face=Courier>pmessage </FONT>is a pointer, initialized to point to a 
string constant; the pointer may</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 114467px"><NOBR>subsequently 
be modified to point elsewhere, but the result is undefined if you try to modify 
the string</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 114487px"><NOBR>contents.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 114698px"><NOBR>We will 
illustrate more aspects of pointers and arrays by studying versions of two 
useful functions adapted</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 114718px"><NOBR>from the 
standard library. The first function is <FONT face=Courier>strcpy(s,t)</FONT>, 
which copies the string <FONT face=Courier>t </FONT>to the string <FONT 
face=Courier>s</FONT>. It</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 114737px"><NOBR>would be nice 
just to say <FONT face=Courier>s=t </FONT>but this copies the pointer, not the 
characters. To copy the characters, we need a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 114757px"><NOBR>loop. The 
array version first:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 114797px"><NOBR>/* strcpy: 
copy t to s; array subscript version */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 114813px"><NOBR>void 
strcpy(char *s, char *t)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 114830px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 114846px"><NOBR>int 
i;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 114879px"><NOBR>i = 
0;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 114896px"><NOBR>while ((s[i] = 
t[i]) != '\0')</NOBR></DIV>
<DIV 
style="LEFT: 199px; POSITION: absolute; TOP: 114912px"><NOBR>i++;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 114929px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 114965px"><NOBR>For contrast, 
here is a version of <FONT face=Courier>strcpy </FONT>with 
pointers:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 115004px"><NOBR>/* strcpy: 
copy t to s; pointer version */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 115021px"><NOBR>void 
strcpy(char *s, char *t)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 115037px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 115054px"><NOBR>int 
i;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 115087px"><NOBR>i = 
0;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 115103px"><NOBR>while ((*s = 
*t) != '\0') {</NOBR></DIV>
<DIV 
style="LEFT: 199px; POSITION: absolute; TOP: 115120px"><NOBR>s++;</NOBR></DIV>
<DIV 
style="LEFT: 199px; POSITION: absolute; TOP: 115136px"><NOBR>t++;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 115153px"><NOBR>}</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 115169px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 115206px"><NOBR>Because 
arguments are passed by value, <FONT face=Courier>strcpy </FONT>can use the 
parameters <FONT face=Courier>s </FONT>and <FONT face=Courier>t </FONT>in any 
way it pleases. Here</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 115226px"><NOBR>they are 
conveniently initialized pointers, which are marched along the arrays a 
character at a time, until the</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 115246px"><NOBR>'\0' <FONT 
face=Times>that terminates </FONT>t <FONT face=Times>has been copied into 
</FONT>s<FONT face=Times>.</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 115285px"><NOBR>In practice, 
<FONT face=Courier>strcpy </FONT>would not be written as we showed it above. 
Experienced C programmers would prefer</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 114265px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 115345px"><NOBR>5.5 Character 
Pointers and Functions</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 115345px"><NOBR>97</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 115411px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=98><B>Page 98</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 115503px"><NOBR>/* strcpy: 
copy t to s; pointer version 2 */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 115520px"><NOBR>void 
strcpy(char *s, char *t)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 115536px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 115553px"><NOBR>while ((*s++ = 
*t++) != '\0')</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 115569px"><NOBR>;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 115586px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 115622px"><NOBR>This moves the 
increment of <FONT face=Courier>s </FONT>and <FONT face=Courier>t </FONT>into 
the test part of the loop. The value of <FONT face=Courier>*t++ </FONT>is the 
character that <FONT face=Courier>t</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 115642px"><NOBR>pointed to 
before <FONT face=Courier>t </FONT>was incremented; the postfix <FONT 
face=Courier>++ </FONT>doesn't change <FONT face=Courier>t </FONT>until after 
this character has been</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 115662px"><NOBR>fetched. In 
the same way, the character is stored into the old <FONT face=Courier>s 
</FONT>position before <FONT face=Courier>s </FONT>is incremented. 
This</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 115681px"><NOBR>character is 
also the value that is compared against <FONT face=Courier>'\0' </FONT>to 
control the loop. The net effect is that characters</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 115701px"><NOBR>are copied 
from <FONT face=Courier>t </FONT>to <FONT face=Courier>s</FONT>, up and 
including the terminating <FONT face=Courier>'\0'</FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 115741px"><NOBR>As the final 
abbreviation, observe that a comparison against <FONT face=Courier>'\0' 
</FONT>is redundant, since the question is merely</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 115761px"><NOBR>whether the 
expression is zero. So the function would likely be written 
as</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 115800px"><NOBR>/* strcpy: 
copy t to s; pointer version 3 */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 115817px"><NOBR>void 
strcpy(char *s, char *t)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 115833px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 115850px"><NOBR>while (*s++ = 
*t++)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 115866px"><NOBR>;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 115883px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 115919px"><NOBR>Although this 
may seem cryptic at first sight, the notational convenience is considerable, and 
the idiom should</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 115939px"><NOBR>be mastered, 
because you will see it frequently in C programs.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 115978px"><NOBR>The <FONT 
face=Courier>strcpy </FONT>in the standard library (<FONT 
face=Courier>&lt;string.h&gt;</FONT>) returns the target string as its function 
value.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 116018px"><NOBR>The second 
routine that we will examine is <FONT face=Courier>strcmp(s,t)</FONT>, which 
compares the character strings <FONT face=Courier>s </FONT>and <FONT 
face=Courier>t</FONT>,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 116038px"><NOBR>and returns 
negative, zero or positive if <FONT face=Courier>s </FONT>is lexicographically 
less than, equal to, or greater than <FONT face=Courier>t</FONT>. The 
value</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 116058px"><NOBR>is obtained by 
subtracting the characters at the first position where <FONT face=Courier>s 
</FONT>and <FONT face=Courier>t </FONT>disagree.</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 116097px"><NOBR>/* strcmp: 
return &lt;0 if s&lt;t, 0 if s==t, &gt;0 if s&gt;t */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 116114px"><NOBR>int 
strcmp(char *s, char *t)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 116130px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 116147px"><NOBR>int 
i;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 116180px"><NOBR>for (i = 0; 
s[i] == t[i]; i++)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 116196px"><NOBR>if (s[i] == 
'\0')</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 116213px"><NOBR>return 
0;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 116229px"><NOBR>return s[i] − 
t[i];</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 116246px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 116282px"><NOBR>The pointer 
version of <FONT face=Courier>strcmp</FONT>:</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 116321px"><NOBR>/* strcmp: 
return &lt;0 if s&lt;t, 0 if s==t, &gt;0 if s&gt;t */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 116338px"><NOBR>int 
strcmp(char *s, char *t)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 116354px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 116371px"><NOBR>for ( ; *s == 
*t; s++, t++)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 116387px"><NOBR>if (*s == 
'\0')</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 116404px"><NOBR>return 
0;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 116420px"><NOBR>return *s − 
*t;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 116437px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 116473px"><NOBR>Since <FONT 
face=Courier>++ </FONT>and <FONT face=Courier>−− </FONT>are either prefix or 
postfix operators, other combinations of <FONT face=Courier>* </FONT>and <FONT 
face=Courier>++ </FONT>and <FONT face=Courier>−− </FONT>occur,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 116493px"><NOBR>although less 
frequently. For <B><SPAN class=goohl2>example</SPAN></B>,</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 115453px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 116533px"><NOBR>5.5 Character 
Pointers and Functions</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 116533px"><NOBR>98</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 116599px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=99><B>Page 99</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 116691px"><NOBR>*−−p</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 116728px"><NOBR>decrements 
<FONT face=Courier>p </FONT>before fetching the character that <FONT 
face=Courier>p </FONT>points to. In fact, the pair of 
expressions</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 116767px"><NOBR>*p++ = val; /* 
push val onto stack */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 116783px"><NOBR>val = *−−p; /* 
pop top of stack into val */</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 116820px"><NOBR>are the 
standard idiom for pushing and popping a stack; see <A 
href="#69"></A><FONT 
face=Times color=#0000ff><A 
href="#69">Section 
4.3</A></FONT><A 
href="#69"></A>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 116860px"><NOBR>The header 
<FONT face=Courier>&lt;string.h&gt; </FONT>contains declarations for the 
functions mentioned in this section, plus a variety of</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 116879px"><NOBR>other 
string−handling functions from the standard library.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 116919px"><NOBR><I><B>Exercise 
5−3. </B></I>Write a pointer version of the function <FONT face=Courier>strcat 
</FONT>that we showed in <FONT face=Times color=#0000ff><A 
href="#36">Chapter 
2</A></FONT>: <FONT face=Courier>strcat(s,t)</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 116939px"><NOBR>copies the 
string <FONT face=Courier>t </FONT>to the end of <FONT 
face=Courier>s</FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 116978px"><NOBR><I><B>Exercise 
5−4. </B></I>Write the function <FONT face=Courier>strend(s,t)</FONT>, which 
returns 1 if the string <FONT face=Courier>t </FONT>occurs at the end of 
the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 116998px"><NOBR>string <FONT 
face=Courier>s</FONT>, and zero otherwise.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 117038px"><NOBR><I><B>Exercise 
5−5. </B></I>Write versions of the library functions <FONT 
face=Courier>strncpy</FONT>, <FONT face=Courier>strncat</FONT>, and <FONT 
face=Courier>strncmp</FONT>, which operate on</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 117058px"><NOBR>at most the 
first <FONT face=Courier>n </FONT>characters of their argument strings. For 
<B><SPAN class=goohl2>example</SPAN></B>, <FONT face=Courier>strncpy(s,t,n) 
</FONT>copies at most <FONT face=Courier>n</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 117077px"><NOBR>characters of 
<FONT face=Courier>t </FONT>to <FONT face=Courier>s</FONT>. Full descriptions 
are in <FONT face=Times color=#0000ff><A 
href="#221">Appendix 
B</A></FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 117117px"><NOBR><I><B>Exercise 
5−6. </B></I>Rewrite appropriate programs from earlier chapters and exercises 
with pointers instead of array</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 117137px"><NOBR>indexing. Good 
possibilities include <FONT face=Courier>getline </FONT>(<A 
href="#11"></A><FONT 
face=Times color=#0000ff><A 
href="#11">Chapters 
1 </A></FONT>and <A 
href="#64"></A><FONT 
face=Times color=#0000ff><A 
href="#64">4</A></FONT><A 
href="#64"></A>), 
<FONT face=Courier>atoi</FONT>, <FONT face=Courier>itoa</FONT>, and their 
variants (<A 
href="#36"></A><FONT 
face=Times color=#0000ff><A 
href="#36">Chapters</A></FONT></NOBR></DIV></SPAN></FONT><FONT 
face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 117157px"><NOBR><A 
href="#36">2</A><FONT 
face=Times color=#000000>, <A 
href="#53"></A></FONT><A 
href="#53">3</A><FONT 
face=Times color=#000000><A 
href="#53"></A>, 
and </FONT><A 
href="#64">4</A><FONT 
face=Times color=#000000>), </FONT><FONT face=Courier color=#000000>reverse 
</FONT><FONT face=Times color=#000000>(</FONT><A 
href="#53">Chapter 
3</A><FONT face=Times color=#000000><A 
href="#53"></A>), 
and </FONT><FONT face=Courier color=#000000>strindex </FONT><FONT face=Times 
color=#000000>and </FONT><FONT face=Courier color=#000000>getop </FONT><FONT 
face=Times color=#000000>(</FONT><A 
href="#64">Chapter 
4</A><FONT face=Times color=#000000>).</FONT></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=4><SPAN style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 117198px"><NOBR><B>5.6 Pointer 
Arrays; Pointers to Pointers</B></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 117244px"><NOBR>Since pointers 
are variables themselves, they can be stored in arrays just as other variables 
can. Let us</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 117264px"><NOBR>illustrate by 
writing a program that will sort a set of text lines into alphabetic order, a 
stripped−down version</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 117284px"><NOBR>of the UNIX 
program <FONT face=Courier>sort</FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 117324px"><NOBR>In <FONT 
face=Times color=#0000ff><A 
href="#53">Chapter 
3</A></FONT><A 
href="#53"></A>, 
we presented a Shell sort function that would sort an array of integers, and in 
<FONT face=Times color=#0000ff><A 
href="#64">Chapter 
4 </A></FONT>we</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 117343px"><NOBR>improved on it 
with a quicksort. The same algorithms will work, except that now we have to deal 
with lines of</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 117363px"><NOBR>text, which 
are of different lengths, and which, unlike integers, can't be compared or moved 
in a single</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 117383px"><NOBR>operation. We 
need a data representation that will cope efficiently and conveniently with 
variable−length text</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 117403px"><NOBR>lines.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 117442px"><NOBR>This is where 
the array of pointers enters. If the lines to be sorted are stored end−to−end in 
one long character</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 117462px"><NOBR>array, then 
each line can be accessed by a pointer to its first character. The pointers 
themselves can bee stored</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 117482px"><NOBR>in an array. 
Two lines can be compared by passing their pointers to <FONT 
face=Courier>strcmp</FONT>. When two out−of−order lines</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 117502px"><NOBR>have to be 
exchanged, the pointers in the pointer array are exchanged, not the text lines 
themselves.</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 116641px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 117721px"><NOBR>5.6 Pointer 
Arrays; Pointers to Pointers</NOBR></DIV>
<DIV 
style="LEFT: 820px; POSITION: absolute; TOP: 117721px"><NOBR>99</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 117787px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=100><B>Page 100</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 117879px"><NOBR>This 
eliminates the twin problems of complicated storage management and high overhead 
that would go with</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 117899px"><NOBR>moving the 
lines themselves.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 117939px"><NOBR>The sorting 
process has three steps:</NOBR></DIV>
<DIV style="LEFT: 116px; POSITION: absolute; TOP: 117978px"><NOBR><I>read all 
the lines of input</I></NOBR></DIV>
<DIV style="LEFT: 116px; POSITION: absolute; TOP: 117998px"><NOBR><I>sort 
them</I></NOBR></DIV>
<DIV style="LEFT: 116px; POSITION: absolute; TOP: 118018px"><NOBR><I>print them 
in order</I></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 118057px"><NOBR>As usual, it's 
best to divide the program into functions that match this natural division, with 
the main routine</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 118077px"><NOBR>controlling 
the other functions. Let us defer the sorting step for a moment, and concentrate 
on the data</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 118097px"><NOBR>structure and 
the input and output.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 118137px"><NOBR>The input 
routine has to collect and save the characters of each line, and build an array 
of pointers to the lines.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 118156px"><NOBR>It will also 
have to count the number of input lines, since that information is needed for 
sorting and printing.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 118176px"><NOBR>Since the 
input function can only cope with a finite number of input lines, it can return 
some illegal count like</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 118197px"><NOBR>−1 <FONT 
face=Times>if too much input is 
presented.</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 118236px"><NOBR>The output 
routine only has to print the lines in the order in which they appear in the 
array of pointers.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 118275px"><NOBR>#include 
&lt;stdio.h&gt;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 118292px"><NOBR>#include 
&lt;string.h&gt;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 118325px"><NOBR>#define 
MAXLINES 5000 /* max #lines to be sorted */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 118358px"><NOBR>char 
*lineptr[MAXLINES]; /* pointers to text lines */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 118391px"><NOBR>int 
readlines(char *lineptr[], int nlines);</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 118407px"><NOBR>void 
writelines(char *lineptr[], int nlines);</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 118440px"><NOBR>void 
qsort(char *lineptr[], int left, int right);</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 118473px"><NOBR>/* sort input 
lines */</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 118490px"><NOBR>main()</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 118506px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 118523px"><NOBR>int nlines; /* 
number of input lines read */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 118556px"><NOBR>if ((nlines = 
readlines(lineptr, MAXLINES)) &gt;= 0) {</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 118572px"><NOBR>qsort(lineptr, 
0, nlines−1);</NOBR></DIV>
<DIV 
style="LEFT: 199px; POSITION: absolute; TOP: 118589px"><NOBR>writelines(lineptr, 
nlines);</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 118605px"><NOBR>return 
0;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 118622px"><NOBR>} else 
{</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 118638px"><NOBR>printf("error: 
input too big to sort\n");</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 118655px"><NOBR>return 
1;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 118671px"><NOBR>}</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 118688px"><NOBR>}</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 118721px"><NOBR>#define MAXLEN 
1000 /* max length of any input line */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 118737px"><NOBR>int 
getline(char *, int);</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 118754px"><NOBR>char 
*alloc(int);</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 118787px"><NOBR>/* readlines: 
read input lines */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 118803px"><NOBR>int 
readlines(char *lineptr[], int maxlines)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 118820px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 118836px"><NOBR>int len, 
nlines;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 118853px"><NOBR>char *p, 
line[MAXLEN];</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 117829px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 118909px"><NOBR>5.6 Pointer 
Arrays; Pointers to Pointers</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 118909px"><NOBR>100</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 118975px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=101><B>Page 101</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 119067px"><NOBR>nlines = 
0;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 119084px"><NOBR>while ((len = 
getline(line, MAXLEN)) &gt; 0)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 119100px"><NOBR>if (nlines 
&gt;= maxlines || p = alloc(len) == NULL)</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 119117px"><NOBR>return 
−1;</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 119133px"><NOBR>else 
{</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 119150px"><NOBR>line[len−1] = 
'\0'; /* delete newline */</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 119166px"><NOBR>strcpy(p, 
line);</NOBR></DIV>
<DIV 
style="LEFT: 232px; POSITION: absolute; TOP: 119183px"><NOBR>lineptr[nlines++] = 
p;</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 119199px"><NOBR>}</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 119216px"><NOBR>return 
nlines;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 119232px"><NOBR>}</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 119265px"><NOBR>/* writelines: 
write output lines */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 119282px"><NOBR>void 
writelines(char *lineptr[], int nlines)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 119298px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 119315px"><NOBR>int 
i;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 119348px"><NOBR>for (i = 0; i 
&lt; nlines; i++)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 119364px"><NOBR>printf("%s\n", 
lineptr[i]);</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 119381px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 119417px"><NOBR>The function 
<FONT face=Courier>getline </FONT>is from <FONT face=Times color=#0000ff><A 
href="#30">Section 
1.9</A></FONT><A 
href="#30"></A>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 119457px"><NOBR>The main new 
thing is the declaration for <FONT 
face=Courier>lineptr</FONT>:</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 119496px"><NOBR>char 
*lineptr[MAXLINES]</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 119533px"><NOBR>says that 
<FONT face=Courier>lineptr </FONT>is an array of <FONT face=Courier>MAXLINES 
</FONT>elements, each element of which is a pointer to a <FONT 
face=Courier>char</FONT>. That</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 119552px"><NOBR>is, <FONT 
face=Courier>lineptr[i] </FONT>is a character pointer, and <FONT 
face=Courier>*lineptr[i] </FONT>is the character it points to, the first 
character of</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 119572px"><NOBR>the <FONT 
face=Courier>i</FONT>−th saved text line.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 119612px"><NOBR>Since <FONT 
face=Courier>lineptr </FONT>is itself the name of an array, it can be treated as 
a pointer in the same manner as in our</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 119632px"><NOBR>earlier 
examples, and <FONT face=Courier>writelines </FONT>can be written instead 
as</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 119671px"><NOBR>/* writelines: 
write output lines */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 119687px"><NOBR>void 
writelines(char *lineptr[], int nlines)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 119704px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 119720px"><NOBR>while 
(nlines−− &gt; 0)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 119737px"><NOBR>printf("%s\n", 
*lineptr++);</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 119753px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 119790px"><NOBR>Initially, 
<FONT face=Courier>*lineptr </FONT>points to the first line; each element 
advances it to the next line pointer while <FONT 
face=Courier>nlines</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 119810px"><NOBR>is counted 
down.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 119849px"><NOBR>With input and 
output under control, we can proceed to sorting. The quicksort from <A 
href="#64"></A><FONT 
face=Times color=#0000ff><A 
href="#64">Chapter 
4 </A></FONT>needs minor</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 119869px"><NOBR>changes: the 
declarations have to be modified, and the comparison operation must be done by 
calling</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 119890px"><NOBR>strcmp<FONT 
face=Times>. The algorithm remains the same, which gives us some confidence that 
it will still work.</FONT></NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 119928px"><NOBR>/* qsort: sort 
v[left]...v[right] into increasing order */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 119945px"><NOBR>void 
qsort(char *v[], int left, int right)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 119961px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 119978px"><NOBR>int i, 
last;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 119994px"><NOBR>void swap(char 
*v[], int i, int j);</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 120027px"><NOBR>if (left &gt;= 
right) /* do nothing if array contains */</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 120044px"><NOBR>return; /* 
fewer than two elements */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 120060px"><NOBR>swap(v, left, 
(left + right)/2);</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 119017px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 120097px"><NOBR>5.6 Pointer 
Arrays; Pointers to Pointers</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 120097px"><NOBR>101</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 120163px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=102><B>Page 102</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 120255px"><NOBR>last = 
left;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 120272px"><NOBR>for (i = 
left+1; i &lt;= right; i++)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 120288px"><NOBR>if 
(strcmp(v[i], v[left]) &lt; 0)</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 120305px"><NOBR>swap(v, 
++last, i);</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 120321px"><NOBR>swap(v, left, 
last);</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 120338px"><NOBR>qsort(v, left, 
last−1);</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 120354px"><NOBR>qsort(v, 
last+1, right);</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 120371px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 120407px"><NOBR>Similarly, the 
swap routine needs only trivial changes:</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 120446px"><NOBR>/* swap: 
interchange v[i] and v[j] */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 120463px"><NOBR>void swap(char 
*v[], int i, int j)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 120479px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 120496px"><NOBR>char 
*temp;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 120529px"><NOBR>temp = 
v[i];</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 120545px"><NOBR>v[i] = 
v[j];</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 120562px"><NOBR>v[j] = 
temp;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 120578px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 120615px"><NOBR>Since any 
individual element of <FONT face=Courier>v </FONT>(alias <FONT 
face=Courier>lineptr</FONT>) is a character pointer, <FONT face=Courier>temp 
</FONT>must be also, so one can be</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 120635px"><NOBR>copied to the 
other.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 120674px"><NOBR><I><B>Exercise 
5−7. </B></I>Rewrite <FONT face=Courier>readlines </FONT>to store lines in an 
array supplied by <FONT face=Courier>main</FONT>, rather than calling <FONT 
face=Courier>alloc </FONT>to</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 120694px"><NOBR>maintain 
storage. How much faster is the program?</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=4><SPAN style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 120735px"><NOBR><B>5.7 
Multi−dimensional Arrays</B></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 120782px"><NOBR>C provides 
rectangular multi−dimensional arrays, although in practice they are much less 
used than arrays of</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 120802px"><NOBR>pointers. In 
this section, we will show some of their properties.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 120841px"><NOBR>Consider the 
problem of date conversion, from day of the month to day of the year and vice 
versa. For</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 120861px"><NOBR><B><SPAN 
class=goohl2>example</SPAN></B>, March 1 is the 60th day of a non−leap year, and 
the 61st day of a leap year. Let us define two</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 120881px"><NOBR>functions to 
do the conversions: <FONT face=Courier>day_of_year </FONT>converts the month and 
day into the day of the year, and</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 120902px"><NOBR>month_day 
<FONT face=Times>converts the day of the year into the month and day. Since this 
latter function computes two</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 120921px"><NOBR>values, the 
month and day arguments will be pointers:</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 120960px"><NOBR>month_day(1988, 60, 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 120994px"><NOBR>sets <FONT 
face=Courier>m </FONT>to 2 and <FONT face=Courier>d </FONT>to 29 (February 
29th).</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 121033px"><NOBR>These 
functions both need the same information, a table of the number of days in each 
month (``thirty days</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 121053px"><NOBR>hath September 
...''). Since the number of days per month differs for leap years and non−leap 
years, it's easier</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 121073px"><NOBR>to separate 
them into two rows of a two−dimensional array than to keep track of what happens 
to February</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 121093px"><NOBR>during 
computation. The array and the functions for performing the transformations are 
as follows:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 121132px"><NOBR>static char 
daytab[2][13] = {</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 121149px"><NOBR>{0, 31, 28, 
31, 30, 31, 30, 31, 31, 30, 31, 30, 31},</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 121165px"><NOBR>{0, 31, 29, 
31, 30, 31, 30, 31, 31, 30, 31, 30, 31}</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 121182px"><NOBR>};</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 121215px"><NOBR>/* 
day_of_year: set day of year from month day */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 121231px"><NOBR>int 
day_of_year(int year, int month, int day)</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 121248px"><NOBR>{</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 120205px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 121285px"><NOBR>5.7 
Multi−dimensional Arrays</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 121285px"><NOBR>102</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 121351px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=103><B>Page 103</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 121443px"><NOBR>int i, 
leap;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 121460px"><NOBR>leap = year%4 
== 0 &amp;year%100 != 0 || year%400 == 0;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 121476px"><NOBR>for (i = 1; i 
&lt; month; i++)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 121493px"><NOBR>day += 
daytab[leap][i];</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 121509px"><NOBR>return 
day;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 121526px"><NOBR>}</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 121559px"><NOBR>/* month_day: 
set month, day from day of year */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 121575px"><NOBR>void 
month_day(int year, int yearday, int *pmonth, int *pday)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 121592px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 121608px"><NOBR>int i, 
leap;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 121641px"><NOBR>leap = year%4 
== 0 &amp;year%100 != 0 || year%400 == 0;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 121658px"><NOBR>for (i = 1; 
yearday &gt; daytab[leap][i]; i++)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 121674px"><NOBR>yearday −= 
daytab[leap][i];</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 121691px"><NOBR>*pmonth = 
i;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 121707px"><NOBR>*pday = 
yearday;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 121724px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 121760px"><NOBR>Recall that 
the arithmetic value of a logical expression, such as the one for <FONT 
face=Courier>leap</FONT>, is either zero (false) or one</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 121780px"><NOBR>(true), so it 
can be used as a subscript of the array <FONT 
face=Courier>daytab</FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 121819px"><NOBR>The array 
<FONT face=Courier>daytab </FONT>has to be external to both <FONT 
face=Courier>day_of_year </FONT>and <FONT face=Courier>month_day</FONT>, so they 
can both use it. We</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 121839px"><NOBR>made it <FONT 
face=Courier>char </FONT>to illustrate a legitimate use of <FONT 
face=Courier>char </FONT>for storing small non−character 
integers.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 121880px"><NOBR>daytab <FONT 
face=Times>is the first two−dimensional array we have dealt with. In C, a 
two−dimensional array is really a</FONT></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 121899px"><NOBR>one−dimensional 
array, each of whose elements is an array. Hence subscripts are written 
as</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 121938px"><NOBR>daytab[i][j] 
/* [row][col] */</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 121975px"><NOBR>rather 
than</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 122014px"><NOBR>daytab[i,j] /* 
WRONG */</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 122050px"><NOBR>Other than 
this notational distinction, a two−dimensional array can be treated in much the 
same way as in</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 122070px"><NOBR>other 
languages. Elements are stored by rows, so the rightmost subscript, or column, 
varies fastest as elements</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 122090px"><NOBR>are accessed 
in storage order.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 122130px"><NOBR>An array is 
initialized by a list of initializers in braces; each row of a two−dimensional 
array is initialized by a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 122149px"><NOBR>corresponding 
sub−list. We started the array <FONT face=Courier>daytab </FONT>with a column of 
zero so that month numbers can run</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 122169px"><NOBR>from the 
natural 1 to 12 instead of 0 to 11. Since space is not at a premium here, this 
is clearer than adjusting</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 122189px"><NOBR>the 
indices.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 122229px"><NOBR>If a 
two−dimensional array is to be passed to a function, the parameter declaration 
in the function must</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 122248px"><NOBR>include the 
number of columns; the number of rows is irrelevant, since what is passed is, as 
before, a pointer</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 122268px"><NOBR>to an array of 
rows, where each row is an array of 13 <FONT face=Courier>int</FONT>s. In this 
particular case, it is a pointer to objects that</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 122288px"><NOBR>are arrays of 
13 <FONT face=Courier>int</FONT>s. Thus if the array <FONT face=Courier>daytab 
</FONT>is to be passed to a function <FONT face=Courier>f</FONT>, the 
declaration of <FONT face=Courier>f </FONT>would</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 122308px"><NOBR>be:</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 122347px"><NOBR>f(int 
daytab[2][13]) { ... }</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 122384px"><NOBR>It could also 
be</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 122423px"><NOBR>f(int 
daytab[][13]) { ... }</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 121393px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 122473px"><NOBR>5.7 
Multi−dimensional Arrays</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 122473px"><NOBR>103</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 122539px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=104><B>Page 104</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 122631px"><NOBR>since the 
number of rows is irrelevant, or it could be</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 122671px"><NOBR>f(int 
(*daytab)[13]) { ... }</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 122707px"><NOBR>which says 
that the parameter is a pointer to an array of 13 integers. The parentheses are 
necessary since</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 122727px"><NOBR>brackets <FONT 
face=Courier>[] </FONT>have higher precedence than <FONT face=Courier>*</FONT>. 
Without parentheses, the declaration</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 122766px"><NOBR>int 
*daytab[13]</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 122803px"><NOBR>is an array of 
13 pointers to integers. More generally, only the first dimension (subscript) of 
an array is free;</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 122823px"><NOBR>all the others 
have to be specified.</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff 
size=3><SPAN style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 122862px"><NOBR><A 
href="#112">Section 
5.12 </A><FONT face=Times color=#000000>has a further discussion of complicated 
declarations.</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 122902px"><NOBR><I><B>Exercise 
5−8. </B></I>There is no error checking in <FONT face=Courier>day_of_year 
</FONT>or <FONT face=Courier>month_day</FONT>. Remedy this 
defect.</NOBR></DIV></SPAN></FONT><FONT face=Times size=4><SPAN 
style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 122943px"><NOBR><B>5.8 
Initialization of Pointer Arrays</B></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 122990px"><NOBR>Consider the 
problem of writing a function <FONT face=Courier>month_name(n)</FONT>, which 
returns a pointer to a character string</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 123010px"><NOBR>containing the 
name of the <FONT face=Courier>n</FONT>−th month. This is an ideal application 
for an internal <FONT face=Courier>static 
</FONT>array.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 123030px"><NOBR>month_name 
<FONT face=Times>contains a private array of character strings, and returns a 
pointer to the proper one when</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 123049px"><NOBR>called. This 
section shows how that array of names is initialized.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 123089px"><NOBR>The syntax is 
similar to previous initializations:</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 123128px"><NOBR>/* month_name: 
return name of n−th month */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 123145px"><NOBR>char 
*month_name(int n)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 123161px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 123178px"><NOBR>static char 
*name[] = {</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 123194px"><NOBR>"Illegal 
month",</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 123211px"><NOBR>"January", 
"February", "March",</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 123227px"><NOBR>"April", 
"May", "June",</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 123244px"><NOBR>"July", 
"August", "September",</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 123260px"><NOBR>"October", 
"November", "December"</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 123277px"><NOBR>};</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 123310px"><NOBR>return (n &lt; 
1 || n &gt; 12) ? name[0] : name[n];</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 123326px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 123363px"><NOBR>The 
declaration of <FONT face=Courier>name</FONT>, which is an array of character 
pointers, is the same as <FONT face=Courier>lineptr </FONT>in the 
sorting</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 123382px"><NOBR><B><SPAN 
class=goohl2>example</SPAN></B>. The initializer is a list of character strings; 
each is assigned to the corresponding position in the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 123402px"><NOBR>array. The 
characters of the <FONT face=Courier>i</FONT>−th string are placed somewhere, 
and a pointer to them is stored in <FONT 
face=Courier>name[i]</FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 123422px"><NOBR>Since the size 
of the array <FONT face=Courier>name </FONT>is not specified, the compiler 
counts the initializers and fills in the correct</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 123442px"><NOBR>number.</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=4><SPAN style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 123483px"><NOBR><B>5.9 
Pointers vs. Multi−dimensional Arrays</B></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 123530px"><NOBR>Newcomers to C 
are sometimes confused about the difference between a two−dimensional array and 
an array</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 123550px"><NOBR>of pointers, 
such as <FONT face=Courier>name </FONT>in the <B><SPAN 
class=goohl2>example</SPAN></B> above. Given the 
definitions</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 123589px"><NOBR>int 
a[10][20];</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 123605px"><NOBR>int 
*b[10];</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 122581px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 123661px"><NOBR>5.8 
Initialization of Pointer Arrays</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 123661px"><NOBR>104</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 123727px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=105><B>Page 105</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 123819px"><NOBR>then <FONT 
face=Courier>a[3][4] </FONT>and <FONT face=Courier>b[3][4] </FONT>are both 
syntactically legal references to a single <FONT face=Courier>int</FONT>. But 
<FONT face=Courier>a </FONT>is a true</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 123839px"><NOBR>two−dimensional 
array: 200 <FONT face=Courier>int</FONT>−sized locations have been set aside, 
and the conventional rectangular</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 123859px"><NOBR>subscript 
calculation 20 * <I>row </I>+<I>col </I>is used to find the element <FONT 
face=Courier>a[row,col]</FONT>. For <FONT face=Courier>b</FONT>, however, the 
definition</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 123879px"><NOBR>only allocates 
10 pointers and does not initialize them; initialization must be done 
explicitly, either statically</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 123898px"><NOBR>or with code. 
Assuming that each element of <FONT face=Courier>b </FONT>does point to a 
twenty−element array, then there will be 200</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 123919px"><NOBR>int<FONT 
face=Times>s set aside, plus ten cells for the pointers. The important advantage 
of the pointer array is that the rows of</FONT></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 123938px"><NOBR>the array may 
be of different lengths. That is, each element of <FONT face=Courier>b 
</FONT>need not point to a twenty−element vector;</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 123958px"><NOBR>some may point 
to two elements, some to fifty, and some to none at all.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 123997px"><NOBR>Although we 
have phrased this discussion in terms of integers, by far the most frequent use 
of arrays of</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 124017px"><NOBR>pointers is to 
store character strings of diverse lengths, as in the function <FONT 
face=Courier>month_name</FONT>. Compare the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 124037px"><NOBR>declaration 
and picture for an array of pointers:</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 124076px"><NOBR>char *name[] = 
{ "Illegal month", "Jan", "Feb", "Mar" };</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 124311px"><NOBR>with those for 
a two−dimensional array:</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 124350px"><NOBR>char 
aname[][15] = { "Illegal month", "Jan", "Feb", "Mar" 
};</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 124538px"><NOBR><I><B>Exercise 
5−9. </B></I>Rewrite the routines <FONT face=Courier>day_of_year </FONT>and 
<FONT face=Courier>month_day </FONT>with pointers instead of 
indexing.</NOBR></DIV></SPAN></FONT><FONT face=Times size=4><SPAN 
style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 124579px"><NOBR><B>5.10 
Command−line Arguments</B></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 124626px"><NOBR>In 
environments that support C, there is a way to pass command−line arguments or 
parameters to a program</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 124646px"><NOBR>when it begins 
executing. When <FONT face=Courier>main </FONT>is called, it is called with two 
arguments. The first (conventionally</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 124665px"><NOBR>called <FONT 
face=Courier>argc</FONT>, for argument count) is the number of command−line 
arguments the program was invoked with;</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 124685px"><NOBR>the second 
(<FONT face=Courier>argv</FONT>, for argument vector) is a pointer to an array 
of character strings that contain the arguments,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 124705px"><NOBR>one per 
string. We customarily use multiple levels of pointers to manipulate these 
character strings.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 124745px"><NOBR>The simplest 
illustration is the program <FONT face=Courier>echo</FONT>, which echoes its 
command−line arguments on a single line,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 124764px"><NOBR>separated by 
blanks. That is, the command</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 124804px"><NOBR>echo hello, 
world</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 123769px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 124849px"><NOBR>5.10 
Command−line Arguments</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 124849px"><NOBR>105</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 124915px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=106><B>Page 106</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 125007px"><NOBR>prints the 
output</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 125047px"><NOBR>hello, 
world</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 125083px"><NOBR>By convention, 
<FONT face=Courier>argv[0] </FONT>is the name by which the program was invoked, 
so <FONT face=Courier>argc </FONT>is at least 1. If <FONT face=Courier>argc 
</FONT>is 1,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 125103px"><NOBR>there are no 
command−line arguments after the program name. In the <B><SPAN 
class=goohl2>example</SPAN></B> above, <FONT face=Courier>argc </FONT>is 3, 
and</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 125124px"><NOBR>argv[0]<FONT 
face=Times>, </FONT>argv[1]<FONT face=Times>, and </FONT>argv[2] <FONT 
face=Times>are </FONT>"echo"<FONT face=Times>, </FONT>"hello,"<FONT face=Times>, 
and </FONT>"world" <FONT face=Times>respectively. The 
first</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 125143px"><NOBR>optional 
argument is <FONT face=Courier>argv[1] </FONT>and the last is <FONT 
face=Courier>argv[argc−1]</FONT>; additionally, the standard requires 
that</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 125163px"><NOBR>argv[argc] 
<FONT face=Times>be a null pointer.</FONT></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 125425px"><NOBR>The first 
version of <FONT face=Courier>echo </FONT>treats <FONT face=Courier>argv 
</FONT>as an array of character pointers:</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 125464px"><NOBR>#include 
&lt;stdio.h&gt;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 125497px"><NOBR>/* echo 
command−line arguments; 1st version */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 125514px"><NOBR>main(int argc, 
char *argv[])</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 125530px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 125547px"><NOBR>int 
i;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 125580px"><NOBR>for (i = 1; i 
&lt; argc; i++)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 125596px"><NOBR>printf("%s%s", 
argv[i], (i &lt; argc−1) ? " " : "");</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 125613px"><NOBR>printf("\n");</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 125629px"><NOBR>return 
0;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 125646px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 125682px"><NOBR>Since <FONT 
face=Courier>argv </FONT>is a pointer to an array of pointers, we can manipulate 
the pointer rather than index the array.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 125702px"><NOBR>This next 
variant is based on incrementing <FONT face=Courier>argv</FONT>, which is a 
pointer to pointer to <FONT face=Courier>char</FONT>, while <FONT 
face=Courier>argc </FONT>is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 125722px"><NOBR>counted 
down:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 125761px"><NOBR>#include 
&lt;stdio.h&gt;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 125794px"><NOBR>/* echo 
command−line arguments; 2nd version */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 125811px"><NOBR>main(int argc, 
char *argv[])</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 125827px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 125844px"><NOBR>while (−−argc 
&gt; 0)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 125860px"><NOBR>printf("%s%s", 
*++argv, (argc &gt; 1) ? " " : "");</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 125877px"><NOBR>printf("\n");</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 125893px"><NOBR>return 
0;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 125910px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 125946px"><NOBR>Since <FONT 
face=Courier>argv </FONT>is a pointer to the beginning of the array of argument 
strings, incrementing it by 1 (<FONT face=Courier>++argv</FONT>)</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 125966px"><NOBR>makes it point 
at the original <FONT face=Courier>argv[1] </FONT>instead of <FONT 
face=Courier>argv[0]</FONT>. Each successive increment moves it along 
to</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 125986px"><NOBR>the next 
argument; <FONT face=Courier>*argv </FONT>is then the pointer to that argument. 
At the same time, <FONT face=Courier>argc </FONT>is decremented; 
when</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 124957px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 126037px"><NOBR>5.10 
Command−line Arguments</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 126037px"><NOBR>106</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 126103px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=107><B>Page 107</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 126195px"><NOBR>it becomes 
zero, there are no arguments left to print.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 126235px"><NOBR>Alternatively, 
we could write the <FONT face=Courier>printf </FONT>statement 
as</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 126274px"><NOBR>printf((argc 
&gt; 1) ? "%s " : "%s", *++argv);</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 126311px"><NOBR>This shows 
that the format argument of <FONT face=Courier>printf </FONT>can be an 
expression too.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 126350px"><NOBR>As a second 
<B><SPAN class=goohl2>example</SPAN></B>, let us make some enhancements to the 
pattern−finding program from <A 
href="#64"></A><FONT 
face=Times color=#0000ff><A 
href="#64">Section 
4.1</A></FONT><A 
href="#64"></A>. 
If</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 126370px"><NOBR>you recall, we 
wired the search pattern deep into the program, an obviously unsatisfactory 
arrangement.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 126390px"><NOBR>Following the 
lead of the UNIX program <FONT face=Courier>grep</FONT>, let us enhance the 
program so the pattern to be matched is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 126410px"><NOBR>specified by 
the first argument on the command line.</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 126449px"><NOBR>#include 
&lt;stdio.h&gt;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 126466px"><NOBR>#include 
&lt;string.h&gt;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 126482px"><NOBR>#define 
MAXLINE 1000</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 126515px"><NOBR>int 
getline(char *line, int max);</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 126548px"><NOBR>/* find: print 
lines that match pattern from 1st arg */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 126565px"><NOBR>main(int argc, 
char *argv[])</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 126581px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 126598px"><NOBR>char 
line[MAXLINE];</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 126614px"><NOBR>int found = 
0;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 126647px"><NOBR>if (argc != 
2)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 126664px"><NOBR>printf("Usage: 
find pattern\n");</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 126680px"><NOBR>else</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 126697px"><NOBR>while 
(getline(line, MAXLINE) &gt; 0)</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 126713px"><NOBR>if 
(strstr(line, argv[1]) != NULL) {</NOBR></DIV>
<DIV style="LEFT: 265px; POSITION: absolute; TOP: 126730px"><NOBR>printf("%s", 
line);</NOBR></DIV>
<DIV 
style="LEFT: 265px; POSITION: absolute; TOP: 126746px"><NOBR>found++;</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 126763px"><NOBR>}</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 126779px"><NOBR>return 
found;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 126796px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 126832px"><NOBR>The standard 
library function <FONT face=Courier>strstr(s,t) </FONT>returns a pointer to the 
first occurrence of the string <FONT face=Courier>t </FONT>in the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 126852px"><NOBR>string <FONT 
face=Courier>s</FONT>, or <FONT face=Courier>NULL </FONT>if there is none. It is 
declared in <FONT face=Courier>&lt;string.h&gt;</FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 126892px"><NOBR>The model can 
now be elaborated to illustrate further pointer constructions. Suppose we want 
to allow two</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 126911px"><NOBR>optional 
arguments. One says ``print all the lines <I>except </I>those that match the 
pattern;'' the second says</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 126931px"><NOBR>``precede each 
printed line by its line number.''</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 126971px"><NOBR>A common 
convention for C programs on UNIX systems is that an argument that begins with a 
minus sign</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 126991px"><NOBR>introduces an 
optional flag or parameter. If we choose <FONT face=Courier>−x </FONT>(for 
``except'') to signal the inversion, and <FONT 
face=Courier>−n</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 127010px"><NOBR>(``number'') 
to request line numbering, then the command</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 127050px"><NOBR>find −x 
−n<I>pattern</I></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 127086px"><NOBR>will print 
each line that doesn't match the pattern, preceded by its line 
number.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 127126px"><NOBR>Optional 
arguments should be permitted in any order, and the rest of the program should 
be independent of</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 127146px"><NOBR>the number of 
arguments that we present. Furthermore, it is convenient for users if option 
arguments can be</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 127165px"><NOBR>combined, as 
in</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 126145px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 127225px"><NOBR>5.10 
Command−line Arguments</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 127225px"><NOBR>107</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 127291px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=108><B>Page 108</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 127383px"><NOBR>find −nx 
<I>pattern</I></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 127420px"><NOBR>Here is the 
program:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 127459px"><NOBR>#include 
&lt;stdio.h&gt;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 127475px"><NOBR>#include 
&lt;string.h&gt;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 127492px"><NOBR>#define 
MAXLINE 1000</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 127525px"><NOBR>int 
getline(char *line, int max);</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 127558px"><NOBR>/* find: print 
lines that match pattern from 1st arg */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 127574px"><NOBR>main(int argc, 
char *argv[])</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 127591px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 127607px"><NOBR>char 
line[MAXLINE];</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 127624px"><NOBR>long lineno = 
0;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 127640px"><NOBR>int c, except 
= 0, number = 0, found = 0;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 127673px"><NOBR>while (−−argc 
&gt; 0 &amp;(*++argv)[0] == '−')</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 127690px"><NOBR>while (c = 
*++argv[0])</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 127706px"><NOBR>switch (c) 
{</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 127723px"><NOBR>case 
'x':</NOBR></DIV>
<DIV style="LEFT: 265px; POSITION: absolute; TOP: 127739px"><NOBR>except = 
1;</NOBR></DIV>
<DIV 
style="LEFT: 265px; POSITION: absolute; TOP: 127756px"><NOBR>break;</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 127772px"><NOBR>case 
'n':</NOBR></DIV>
<DIV style="LEFT: 265px; POSITION: absolute; TOP: 127789px"><NOBR>number = 
1;</NOBR></DIV>
<DIV 
style="LEFT: 265px; POSITION: absolute; TOP: 127805px"><NOBR>break;</NOBR></DIV>
<DIV 
style="LEFT: 232px; POSITION: absolute; TOP: 127822px"><NOBR>default:</NOBR></DIV>
<DIV style="LEFT: 265px; POSITION: absolute; TOP: 127838px"><NOBR>printf("find: 
illegal option %c\n", c);</NOBR></DIV>
<DIV style="LEFT: 265px; POSITION: absolute; TOP: 127855px"><NOBR>argc = 
0;</NOBR></DIV>
<DIV style="LEFT: 265px; POSITION: absolute; TOP: 127871px"><NOBR>found = 
−1;</NOBR></DIV>
<DIV 
style="LEFT: 265px; POSITION: absolute; TOP: 127888px"><NOBR>break;</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 127904px"><NOBR>}</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 127921px"><NOBR>if (argc != 
1)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 127937px"><NOBR>printf("Usage: 
find −x −n pattern\n");</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 127954px"><NOBR>else</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 127970px"><NOBR>while 
(getline(line, MAXLINE) &gt; 0) {</NOBR></DIV>
<DIV 
style="LEFT: 232px; POSITION: absolute; TOP: 127987px"><NOBR>lineno++;</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 128003px"><NOBR>if 
((strstr(line, *argv) != NULL) != except) {</NOBR></DIV>
<DIV style="LEFT: 265px; POSITION: absolute; TOP: 128020px"><NOBR>if 
(number)</NOBR></DIV>
<DIV style="LEFT: 298px; POSITION: absolute; TOP: 128036px"><NOBR>printf("%ld:", 
lineno);</NOBR></DIV>
<DIV style="LEFT: 265px; POSITION: absolute; TOP: 128053px"><NOBR>printf("%s", 
line);</NOBR></DIV>
<DIV 
style="LEFT: 265px; POSITION: absolute; TOP: 128069px"><NOBR>found++;</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 128086px"><NOBR>}</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 128102px"><NOBR>}</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 128119px"><NOBR>return 
found;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 128135px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 128173px"><NOBR>argc <FONT 
face=Times>is decremented and </FONT>argv <FONT face=Times>is incremented before 
each optional argument. At the end of the loop, if 
there</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 128192px"><NOBR>are no errors, 
<FONT face=Courier>argc </FONT>tells how many arguments remain unprocessed and 
<FONT face=Courier>argv </FONT>points to the first of these. 
Thus</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 128212px"><NOBR>argc <FONT 
face=Times>should be 1 and </FONT>*argv <FONT face=Times>should point at the 
pattern. Notice that </FONT>*++argv <FONT face=Times>is a pointer to an 
argument</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 128231px"><NOBR>string, so 
<FONT face=Courier>(*++argv)[0] </FONT>is its first character. (An alternate 
valid form would be <FONT face=Courier>**++argv</FONT>.) Because <FONT 
face=Courier>[]</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 128251px"><NOBR>binds tighter 
than <FONT face=Courier>* </FONT>and <FONT face=Courier>++</FONT>, the 
parentheses are necessary; without them the expression would be taken 
as</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 128272px"><NOBR>*++(argv[0])<FONT 
face=Times>. In fact, that is what we have used in the inner loop, where the 
task is to walk along a</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 128291px"><NOBR>specific 
argument string. In the inner loop, the expression <FONT face=Courier>*++argv[0] 
</FONT>increments the pointer <FONT face=Courier>argv[0]</FONT>!</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 128330px"><NOBR>It is rare 
that one uses pointer expressions more complicated than these; in such cases, 
breaking them into two</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 128350px"><NOBR>or three steps 
will be more intuitive.</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 127333px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 128413px"><NOBR>5.10 
Command−line Arguments</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 128413px"><NOBR>108</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 128479px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=109><B>Page 109</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 128571px"><NOBR><I><B>Exercise 
5−10. </B></I>Write the program <FONT face=Courier>expr</FONT>, which evaluates 
a reverse Polish expression from the command</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 128591px"><NOBR>line, where 
each operator or operand is a separate argument. For <B><SPAN 
class=goohl2>example</SPAN></B>,</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 128630px"><NOBR>expr 2 3 4 + 
*</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 128667px"><NOBR>evaluates 2 * 
(3+4).</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 128707px"><NOBR><I><B>Exercise 
5−11. </B></I>Modify the program <FONT face=Courier>entab </FONT>and <FONT 
face=Courier>detab </FONT>(written as exercises in <FONT face=Times 
color=#0000ff><A 
href="#11">Chapter 
1</A></FONT>) to accept a list of</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 128726px"><NOBR>tab stops as 
arguments. Use the default tab settings if there are no arguments.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 128766px"><NOBR><I><B>Exercise 
5−12. </B></I>Extend <FONT face=Courier>entab </FONT>and <FONT 
face=Courier>detab </FONT>to accept the 
shorthand</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 128805px"><NOBR>entab <I>−m 
+n</I></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 128842px"><NOBR>to mean tab 
stops every <I>n </I>columns, starting at column <I>m</I>. Choose convenient 
(for the user) default behavior.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 128881px"><NOBR><I><B>Exercise 
5−13. </B></I>Write the program <FONT face=Courier>tail</FONT>, which prints the 
last <I>n </I>lines of its input. By default, <I>n </I>is set to 10, 
let</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 128901px"><NOBR>us say, but it 
can be changed by an optional argument so that</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 128941px"><NOBR>tail 
<I>−n</I></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 128977px"><NOBR>prints the 
last <I>n </I>lines. The program should behave rationally no matter how 
unreasonable the input or the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 128997px"><NOBR>value of 
<I>n</I>. Write the program so it makes the best use of available storage; lines 
should be stored as in the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 129017px"><NOBR>sorting 
program of <FONT face=Times color=#0000ff><A 
href="#99">Section 
5.6</A></FONT>, not in a two−dimensional array of fixed 
size.</NOBR></DIV></SPAN></FONT><FONT face=Times size=4><SPAN 
style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 129058px"><NOBR><B>5.11 
Pointers to Functions</B></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 129105px"><NOBR>In C, a 
function itself is not a variable, but it is possible to define pointers to 
functions, which can be assigned,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 129124px"><NOBR>placed in 
arrays, passed to functions, returned by functions, and so on. We will 
illustrate this by modifying the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 129144px"><NOBR>sorting 
procedure written earlier in this chapter so that if the optional argument <FONT 
face=Courier>−n </FONT>is given, it will sort the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 129164px"><NOBR>input lines 
numerically instead of lexicographically.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 129204px"><NOBR>A sort often 
consists of three parts − a comparison that determines the ordering of any pair 
of objects, an</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 129223px"><NOBR>exchange that 
reverses their order, and a sorting algorithm that makes comparisons and 
exchanges until the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 129243px"><NOBR>objects are in 
order. The sorting algorithm is independent of the comparison and exchange 
operations, so by</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 129263px"><NOBR>passing 
different comparison and exchange functions to it, we can arrange to sort by 
different criteria. This is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 129283px"><NOBR>the approach 
taken in our new sort.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 129322px"><NOBR>Lexicographic 
comparison of two lines is done by <FONT face=Courier>strcmp</FONT>, as before; 
we will also need a routine <FONT face=Courier>numcmp</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 129342px"><NOBR>that compares 
two lines on the basis of numeric value and returns the same kind of condition 
indication as</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 129363px"><NOBR>strcmp <FONT 
face=Times>does. These functions are declared ahead of </FONT>main <FONT 
face=Times>and a pointer to the appropriate one is passed to</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 129383px"><NOBR>qsort<FONT 
face=Times>. We have skimped on error processing for arguments, so as to 
concentrate on the main issues.</FONT></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 129421px"><NOBR>#include 
&lt;stdio.h&gt;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 129438px"><NOBR>#include 
&lt;string.h&gt;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 129471px"><NOBR>#define 
MAXLINES 5000 /* max #lines to be sorted */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 129487px"><NOBR>char 
*lineptr[MAXLINES]; /* pointers to text lines */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 129520px"><NOBR>int 
readlines(char *lineptr[], int nlines);</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 129537px"><NOBR>void 
writelines(char *lineptr[], int nlines);</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 128521px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 129601px"><NOBR>5.11 Pointers 
to Functions</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 129601px"><NOBR>109</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 129667px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=110><B>Page 110</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 129759px"><NOBR>void 
qsort(void *lineptr[], int left, int right,</NOBR></DIV>
<DIV style="LEFT: 224px; POSITION: absolute; TOP: 129776px"><NOBR>int 
(*comp)(void *, void *));</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 129792px"><NOBR>int 
numcmp(char *, char *);</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 129825px"><NOBR>/* sort input 
lines */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 129842px"><NOBR>main(int argc, 
char *argv[])</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 129858px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 129875px"><NOBR>int nlines; /* 
number of input lines read */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 129891px"><NOBR>int numeric = 
0; /* 1 if numeric sort */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 129924px"><NOBR>if (argc &gt; 
1 &amp;strcmp(argv[1], "−n") == 0)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 129941px"><NOBR>numeric = 
1;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 129957px"><NOBR>if ((nlines = 
readlines(lineptr, MAXLINES)) &gt;= 0) {</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 129974px"><NOBR>qsort((void**) 
lineptr, 0, nlines−1,</NOBR></DIV>
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 129990px"><NOBR>(int 
(*)(void*,void*))(numeric ? numcmp : strcmp));</NOBR></DIV>
<DIV 
style="LEFT: 199px; POSITION: absolute; TOP: 130007px"><NOBR>writelines(lineptr, 
nlines);</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 130023px"><NOBR>return 
0;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 130040px"><NOBR>} else 
{</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 130056px"><NOBR>printf("input 
too big to sort\n");</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 130073px"><NOBR>return 
1;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 130089px"><NOBR>}</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 130106px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 130142px"><NOBR>In the call to 
<FONT face=Courier>qsort</FONT>, <FONT face=Courier>strcmp </FONT>and <FONT 
face=Courier>numcmp </FONT>are addresses of functions. Since they are known to 
be functions,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 130162px"><NOBR>the <FONT 
face=Courier>&amp; </FONT>is not necessary, in the same way that it is not 
needed before an array name.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 130201px"><NOBR>We have 
written <FONT face=Courier>qsort </FONT>so it can process any data type, not 
just character strings. As indicated by the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 130221px"><NOBR>function 
prototype, <FONT face=Courier>qsort </FONT>expects an array of pointers, two 
integers, and a function with two pointer</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 130241px"><NOBR>arguments. The 
generic pointer type <FONT face=Courier>void * </FONT>is used for the pointer 
arguments. Any pointer can be cast to</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 130262px"><NOBR>void * <FONT 
face=Times>and back again without loss of information, so we can call 
</FONT>qsort <FONT face=Times>by casting arguments to </FONT>void</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 130282px"><NOBR>*<FONT 
face=Times>. The elaborate cast of the function argument casts the arguments of 
the comparison function. These will</FONT></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 130300px"><NOBR>generally have 
no effect on actual representation, but assure the compiler that all is 
well.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 130340px"><NOBR>/* qsort: sort 
v[left]...v[right] into increasing order */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 130356px"><NOBR>void 
qsort(void *v[], int left, int right,</NOBR></DIV>
<DIV style="LEFT: 224px; POSITION: absolute; TOP: 130373px"><NOBR>int 
(*comp)(void *, void *))</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 130389px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 130406px"><NOBR>int i, 
last;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 130439px"><NOBR>void swap(void 
*v[], int, int);</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 130472px"><NOBR>if (left &gt;= 
right) /* do nothing if array contains */</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 130488px"><NOBR>return; /* 
fewer than two elements */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 130505px"><NOBR>swap(v, left, 
(left + right)/2);</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 130521px"><NOBR>last = 
left;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 130538px"><NOBR>for (i = 
left+1; i &lt;= right; i++)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 130554px"><NOBR>if 
((*comp)(v[i], v[left]) &lt; 0)</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 130571px"><NOBR>swap(v, 
++last, i);</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 130587px"><NOBR>swap(v, left, 
last);</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 130604px"><NOBR>qsort(v, left, 
last−1, comp);</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 130620px"><NOBR>qsort(v, 
last+1, right, comp);</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 130637px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 130673px"><NOBR>The 
declarations should be studied with some care. The fourth parameter of <FONT 
face=Courier>qsort </FONT>is</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 130713px"><NOBR>int 
(*comp)(void *, void *)</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 130749px"><NOBR>which says 
that <FONT face=Courier>comp </FONT>is a pointer to a function that has two 
<FONT face=Courier>void * </FONT>arguments and returns an <FONT 
face=Courier>int</FONT>.</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 129709px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 130789px"><NOBR>5.11 Pointers 
to Functions</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 130789px"><NOBR>110</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 130855px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=111><B>Page 111</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 130947px"><NOBR>The use of 
<FONT face=Courier>comp </FONT>in the line</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 130987px"><NOBR>if 
((*comp)(v[i], v[left]) &lt; 0)</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 131023px"><NOBR>is consistent 
with the declaration: <FONT face=Courier>comp </FONT>is a pointer to a function, 
<FONT face=Courier>*comp </FONT>is the function, 
and</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 131063px"><NOBR>(*comp)(v[i], 
v[left])</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 131099px"><NOBR>is the call to 
it. The parentheses are needed so the components are correctly associated; 
without them,</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 131138px"><NOBR>int *comp(void 
*, void *) /* WRONG */</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 131175px"><NOBR>says that 
<FONT face=Courier>comp </FONT>is a function returning a pointer to an <FONT 
face=Courier>int</FONT>, which is very different.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 131215px"><NOBR>We have 
already shown <FONT face=Courier>strcmp</FONT>, which compares two strings. Here 
is <FONT face=Courier>numcmp</FONT>, which compares two strings</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 131234px"><NOBR>on a leading 
numeric value, computed by calling <FONT 
face=Courier>atof</FONT>:</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 131274px"><NOBR>#include 
&lt;stdlib.h&gt;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 131307px"><NOBR>/* numcmp: 
compare s1 and s2 numerically */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 131323px"><NOBR>int 
numcmp(char *s1, char *s2)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 131340px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 131356px"><NOBR>double v1, 
v2;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 131389px"><NOBR>v1 = 
atof(s1);</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 131406px"><NOBR>v2 = 
atof(s2);</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 131422px"><NOBR>if (v1 &lt; 
v2)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 131439px"><NOBR>return 
−1;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 131455px"><NOBR>else if (v1 
&gt; v2)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 131472px"><NOBR>return 
1;</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 131488px"><NOBR>else</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 131505px"><NOBR>return 
0;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 131521px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 131558px"><NOBR>The <FONT 
face=Courier>swap </FONT>function, which exchanges two pointers, is identical to 
what we presented earlier in the chapter,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 131578px"><NOBR>except that 
the declarations are changed to <FONT face=Courier>void 
*</FONT>.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 131617px"><NOBR>void swap(void 
*v[], int i, int j;)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 131633px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 131650px"><NOBR>void 
*temp;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 131683px"><NOBR>temp = 
v[i];</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 131699px"><NOBR>v[i] = 
v[j];</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 131716px"><NOBR>v[j] = 
temp;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 131732px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 131769px"><NOBR>A variety of 
other options can be added to the sorting program; some make challenging 
exercises.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 131809px"><NOBR><I><B>Exercise 
5−14. </B></I>Modify the sort program to handle a <FONT face=Courier>−r 
</FONT>flag, which indicates sorting in reverse (decreasing)</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 131828px"><NOBR>order. Be sure 
that <FONT face=Courier>−r </FONT>works with <FONT 
face=Courier>−n</FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 131868px"><NOBR><I><B>Exercise 
5−15. </B></I>Add the option <FONT face=Courier>−f </FONT>to fold upper and 
lower case together, so that case distinctions are not</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 131888px"><NOBR>made during 
sorting; for <B><SPAN class=goohl2>example</SPAN></B>, <FONT face=Courier>a 
</FONT>and <FONT face=Courier>A </FONT>compare equal.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 131927px"><NOBR><I><B>Exercise 
5−16. </B></I>Add the <FONT face=Courier>−d </FONT>(``directory order'') option, 
which makes comparisons only on letters, numbers</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 130897px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 131977px"><NOBR>5.11 Pointers 
to Functions</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 131977px"><NOBR>111</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 132043px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=112><B>Page 112</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 132135px"><NOBR>and blanks. 
Make sure it works in conjunction with <FONT 
face=Courier>−f</FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 132175px"><NOBR><I><B>Exercise 
5−17. </B></I>Add a field−searching capability, so sorting may bee done on 
fields within lines, each field</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 132195px"><NOBR>sorted 
according to an independent set of options. (The index for this book was sorted 
with <FONT face=Courier>−df </FONT>for the index</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 132214px"><NOBR>category and 
<FONT face=Courier>−n </FONT>for the page 
numbers.)</NOBR></DIV></SPAN></FONT><FONT face=Times size=4><SPAN 
style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 132256px"><NOBR><B>5.12 
Complicated Declarations</B></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 132302px"><NOBR>C is sometimes 
castigated for the syntax of its declarations, particularly ones that involve 
pointers to</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 132322px"><NOBR>functions. The 
syntax is an attempt to make the declaration and the use agree; it works well 
for simple cases,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 132342px"><NOBR>but it can be 
confusing for the harder ones, because declarations cannot be read left to 
right, and because</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 132362px"><NOBR>parentheses 
are over−used. The difference between</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 132401px"><NOBR>int *f(); /* 
f: function returning pointer to int */</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 132438px"><NOBR>and</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 132477px"><NOBR>int (*pf)(); 
/* pf: pointer to function returning int */ </NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 132514px"><NOBR>illustrates 
the problem: <FONT face=Courier>* </FONT>is a prefix operator and it has lower 
precedence than <FONT face=Courier>()</FONT>, so parentheses are</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 132533px"><NOBR>necessary to 
force the proper association.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 132573px"><NOBR>Although truly 
complicated declarations rarely arise in practice, it is important to know how 
to understand</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 132593px"><NOBR>them, and, if 
necessary, how to create them. One good way to synthesize declarations is in 
small steps with</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 132613px"><NOBR>typedef<FONT 
face=Times>, which is discussed in <A 
href="#133"></A></FONT><FONT 
face=Times color=#0000ff><A 
href="#133">Section 
6.7</A></FONT><FONT face=Times><A 
href="#133"></A>. 
As an alternative, in this section we will present a pair 
of</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 132632px"><NOBR>programs that 
convert from valid C to a word description and back again. The word description 
reads left to</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 132652px"><NOBR>right.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 132692px"><NOBR>The first, 
<FONT face=Courier>dcl</FONT>, is the more complex. It converts a C declaration 
into a word description, as in these examples:</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 132731px"><NOBR>char 
**argv</NOBR></DIV>
<DIV style="LEFT: 141px; POSITION: absolute; TOP: 132748px"><NOBR>argv: pointer 
to char</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 132764px"><NOBR>int 
(*daytab)[13]</NOBR></DIV>
<DIV style="LEFT: 141px; POSITION: absolute; TOP: 132781px"><NOBR>daytab: 
pointer to array[13] of int</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 132797px"><NOBR>int 
*daytab[13]</NOBR></DIV>
<DIV style="LEFT: 141px; POSITION: absolute; TOP: 132814px"><NOBR>daytab: 
array[13] of pointer to int</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 132830px"><NOBR>void 
*comp()</NOBR></DIV>
<DIV style="LEFT: 141px; POSITION: absolute; TOP: 132847px"><NOBR>comp: function 
returning pointer to void</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 132863px"><NOBR>void 
(*comp)()</NOBR></DIV>
<DIV style="LEFT: 141px; POSITION: absolute; TOP: 132880px"><NOBR>comp: pointer 
to function returning void</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 132896px"><NOBR>char 
(*(*x())[])()</NOBR></DIV>
<DIV style="LEFT: 141px; POSITION: absolute; TOP: 132913px"><NOBR>x: function 
returning pointer to array[] of</NOBR></DIV>
<DIV style="LEFT: 141px; POSITION: absolute; TOP: 132929px"><NOBR>pointer to 
function returning char</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 132946px"><NOBR>char 
(*(*x[3])())[5]</NOBR></DIV>
<DIV style="LEFT: 141px; POSITION: absolute; TOP: 132962px"><NOBR>x: array[3] of 
pointer to function returning</NOBR></DIV>
<DIV style="LEFT: 141px; POSITION: absolute; TOP: 132979px"><NOBR>pointer to 
array[5] of char</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 133016px"><NOBR>dcl <FONT 
face=Times>is based on the grammar that specifies a declarator, which is spelled 
out precisely in </FONT><FONT face=Times color=#0000ff><A 
href="#193">Appendix 
A,</A></FONT></NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff 
size=3><SPAN style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 133035px"><NOBR><A 
href="#193">Section 
8.5</A><FONT face=Times color=#000000>; this is a simplified 
form:</FONT></NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 133091px"><NOBR><I>dcl: 
optional *'s direct−dcl</I></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 133107px"><NOBR><I>direct−dcl 
name</I></NOBR></DIV>
<DIV 
style="LEFT: 249px; POSITION: absolute; TOP: 133124px"><NOBR><I>(dcl)</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 132085px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 133165px"><NOBR>5.12 
Complicated Declarations</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 133165px"><NOBR>112</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 133231px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=113><B>Page 113</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 249px; POSITION: absolute; TOP: 133323px"><NOBR><I>direct−dcl()</I></NOBR></DIV>
<DIV 
style="LEFT: 249px; POSITION: absolute; TOP: 133340px"><NOBR><I>direct−dcl[optional 
size]</I></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 133393px"><NOBR>In words, a 
<I>dcl </I>is a <I>direct−dcl</I>, perhaps preceded by *'s. A <I>direct−dcl 
</I>is a name, or a parenthesized <I>dcl</I>, or a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 133412px"><NOBR><I>direct−dcl 
</I>followed by parentheses, or a <I>direct−dcl </I>followed by brackets with an 
optional size.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 133452px"><NOBR>This grammar 
can be used to parse functions. For instance, consider this 
declarator:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 133491px"><NOBR>(*pfa[])()</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 133529px"><NOBR>pfa <FONT 
face=Times>will be identified as a </FONT><I><FONT face=Times>name 
</FONT></I><FONT face=Times>and thus as a </FONT><I><FONT 
face=Times>direct−dcl</FONT></I><FONT face=Times>. Then </FONT>pfa[] <FONT 
face=Times>is also a </FONT><I><FONT face=Times>direct−dcl</FONT></I><FONT 
face=Times>. Then </FONT>*pfa[] <FONT 
face=Times>is</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 133548px"><NOBR>recognized as 
a <I>dcl</I>, so <FONT face=Courier>(*pfa[]) </FONT>is a <I>direct−dcl</I>. Then 
<FONT face=Courier>(*pfa[])() </FONT>is a <I>direct−dcl </I>and thus a 
<I>dcl</I>. We</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 133567px"><NOBR>can also 
illustrate the parse with a tree like this (where <I>direct−dcl </I>has been 
abbreviated to <I>dir−dcl</I>):</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 134194px"><NOBR>The heart of 
the <FONT face=Courier>dcl </FONT>program is a pair of functions, <FONT 
face=Courier>dcl </FONT>and <FONT face=Courier>dirdcl</FONT>, that parse a 
declaration according to</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 134214px"><NOBR>this grammar. 
Because the grammar is recursively defined, the functions call each other 
recursively as they</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 134234px"><NOBR>recognize 
pieces of a declaration; the program is called a recursive−descent 
parser.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 134273px"><NOBR>/* dcl: parse 
a declarator */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 134290px"><NOBR>void 
dcl(void)</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 134306px"><NOBR>{</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 133273px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 134353px"><NOBR>5.12 
Complicated Declarations</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 134353px"><NOBR>113</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 134419px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=114><B>Page 114</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 134511px"><NOBR>int 
ns;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 134544px"><NOBR>for (ns = 0; 
gettoken() == '*'; ) /* count *'s */</NOBR></DIV>
<DIV 
style="LEFT: 199px; POSITION: absolute; TOP: 134561px"><NOBR>ns++;</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 134577px"><NOBR>dirdcl();</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 134594px"><NOBR>while (ns−− 
&gt; 0)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 134610px"><NOBR>strcat(out, " 
pointer to");</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 134627px"><NOBR>}</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 134660px"><NOBR>/* dirdcl: 
parse a direct declarator */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 134676px"><NOBR>void 
dirdcl(void)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 134693px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 134709px"><NOBR>int 
type;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 134742px"><NOBR>if (tokentype 
== '(') { /* ( dcl ) */</NOBR></DIV>
<DIV 
style="LEFT: 199px; POSITION: absolute; TOP: 134759px"><NOBR>dcl();</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 134775px"><NOBR>if (tokentype 
!= ')')</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 134792px"><NOBR>printf("error: 
missing )\n");</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 134808px"><NOBR>} else if 
(tokentype == NAME) /* variable name */</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 134825px"><NOBR>strcpy(name, 
token);</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 134841px"><NOBR>else</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 134858px"><NOBR>printf("error: 
expected name or (dcl)\n");</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 134874px"><NOBR>while 
((type=gettoken()) == PARENS || type == BRACKETS)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 134891px"><NOBR>if (type == 
PARENS)</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 134907px"><NOBR>strcat(out, " 
function returning");</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 134924px"><NOBR>else 
{</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 134940px"><NOBR>strcat(out, " 
array");</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 134957px"><NOBR>strcat(out, 
token);</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 134973px"><NOBR>strcat(out, " 
of");</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 134990px"><NOBR>}</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 135006px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 135043px"><NOBR>Since the 
programs are intended to be illustrative, not bullet−proof, there are 
significant restrictions on <FONT face=Courier>dcl</FONT>. It</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 135062px"><NOBR>can only 
handle a simple data type line <FONT face=Courier>char </FONT>or <FONT 
face=Courier>int</FONT>. It does not handle argument types in functions, 
or</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 135082px"><NOBR>qualifiers 
like <FONT face=Courier>const</FONT>. Spurious blanks confuse it. It doesn't do 
much error recovery, so invalid declarations</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 135102px"><NOBR>will also 
confuse it. These improvements are left as exercises.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 135142px"><NOBR>Here are the 
global variables and the main routine:</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 135181px"><NOBR>#include 
&lt;stdio.h&gt;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 135197px"><NOBR>#include 
&lt;string.h&gt;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 135214px"><NOBR>#include 
&lt;ctype.h&gt;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 135247px"><NOBR>#define 
MAXTOKEN 100</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 135280px"><NOBR>enum { NAME, 
PARENS, BRACKETS };</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 135313px"><NOBR>void 
dcl(void);</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 135329px"><NOBR>void 
dirdcl(void);</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 135362px"><NOBR>int 
gettoken(void);</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 135379px"><NOBR>int tokentype; 
/* type of last token */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 135395px"><NOBR>char 
token[MAXTOKEN]; /* last token string */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 135412px"><NOBR>char 
name[MAXTOKEN]; /* identifier name */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 135428px"><NOBR>char 
datatype[MAXTOKEN]; /* data type = char, int, etc. */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 135445px"><NOBR>char 
out[1000];</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 135478px"><NOBR>main() /* 
convert declaration to words */</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 135494px"><NOBR>{</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 134461px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 135541px"><NOBR>5.12 
Complicated Declarations</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 135541px"><NOBR>114</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 135607px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=115><B>Page 115</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 135699px"><NOBR>while 
(gettoken() != EOF) { /* 1st token on line */</NOBR></DIV>
<DIV 
style="LEFT: 199px; POSITION: absolute; TOP: 135716px"><NOBR>strcpy(datatype, 
token); /* is the datatype */</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 135732px"><NOBR>out[0] = 
'\0';</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 135749px"><NOBR>dcl(); /* 
parse rest of line */</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 135765px"><NOBR>if (tokentype 
!= '\n')</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 135782px"><NOBR>printf("syntax 
error\n");</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 135798px"><NOBR>printf("%s: %s 
%s\n", name, out, datatype);</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 135815px"><NOBR>}</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 135831px"><NOBR>return 
0;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 135848px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 135884px"><NOBR>The function 
<FONT face=Courier>gettoken </FONT>skips blanks and tabs, then finds the next 
token in the input; a ``token'' is a name, a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 135904px"><NOBR>pair of 
parentheses, a pair of brackets perhaps including a number, or any other single 
character.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 135943px"><NOBR>int 
gettoken(void) /* return next token */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 135960px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 135976px"><NOBR>int c, 
getch(void);</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 135993px"><NOBR>void 
ungetch(int);</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 136009px"><NOBR>char *p = 
token;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 136042px"><NOBR>while ((c = 
getch()) == ' ' || c == '\t')</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 136059px"><NOBR>;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 136075px"><NOBR>if (c == '(') 
{</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 136092px"><NOBR>if ((c = 
getch()) == ')') {</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 136108px"><NOBR>strcpy(token, 
"()");</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 136125px"><NOBR>return 
tokentype = PARENS;</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 136141px"><NOBR>} else 
{</NOBR></DIV>
<DIV 
style="LEFT: 232px; POSITION: absolute; TOP: 136158px"><NOBR>ungetch(c);</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 136174px"><NOBR>return 
tokentype = '(';</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 136191px"><NOBR>}</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 136207px"><NOBR>} else if (c 
== '[') {</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 136224px"><NOBR>for (*p++ = c; 
(*p++ = getch()) != ']'; )</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 136240px"><NOBR>;</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 136257px"><NOBR>*p = 
'\0';</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 136273px"><NOBR>return 
tokentype = BRACKETS;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 136290px"><NOBR>} else if 
(isalpha(c)) {</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 136306px"><NOBR>for (*p++ = c; 
isalnum(c = getch()); )</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 136323px"><NOBR>*p++ = 
c;</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 136339px"><NOBR>*p = 
'\0';</NOBR></DIV>
<DIV 
style="LEFT: 199px; POSITION: absolute; TOP: 136356px"><NOBR>ungetch(c);</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 136372px"><NOBR>return 
tokentype = NAME;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 136389px"><NOBR>} 
else</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 136405px"><NOBR>return 
tokentype = c;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 136438px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 136476px"><NOBR>getch <FONT 
face=Times>and </FONT>ungetch <FONT face=Times>are discussed in </FONT><FONT 
face=Times color=#0000ff><A 
href="#64">Chapter 
4</A></FONT><FONT face=Times>.</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 136514px"><NOBR>Going in the 
other direction is easier, especially if we do not worry about generating 
redundant parentheses.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 136534px"><NOBR>The program 
<FONT face=Courier>undcl </FONT>converts a word description like ``<FONT 
face=Courier>x </FONT>is a function returning a pointer to an array 
of</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 136554px"><NOBR>pointers to 
functions returning <FONT face=Courier>char</FONT>,'' which we will express 
as</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 141px; POSITION: absolute; TOP: 136593px"><NOBR>x () * [] * () 
char</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 136630px"><NOBR>to</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 136669px"><NOBR>char 
(*(*x())[])()</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 135649px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 136729px"><NOBR>5.12 
Complicated Declarations</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 136729px"><NOBR>115</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 136795px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=116><B>Page 116</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 136887px"><NOBR>The 
abbreviated input syntax lets us reuse the <FONT face=Courier>gettoken 
</FONT>function. <FONT face=Courier>undcl </FONT>also uses the same 
external</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 136907px"><NOBR>variables as 
<FONT face=Courier>dcl </FONT>does.</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 136946px"><NOBR>/* undcl: 
convert word descriptions to declarations */</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 136963px"><NOBR>main()</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 136979px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 136996px"><NOBR>int 
type;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 137012px"><NOBR>char 
temp[MAXTOKEN];</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 137045px"><NOBR>while 
(gettoken() != EOF) {</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 137062px"><NOBR>strcpy(out, 
token);</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 137078px"><NOBR>while ((type = 
gettoken()) != '\n')</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 137095px"><NOBR>if (type == 
PARENS || type == BRACKETS)</NOBR></DIV>
<DIV style="LEFT: 265px; POSITION: absolute; TOP: 137111px"><NOBR>strcat(out, 
token);</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 137128px"><NOBR>else if (type 
== '*') {</NOBR></DIV>
<DIV style="LEFT: 265px; POSITION: absolute; TOP: 137144px"><NOBR>sprintf(temp, 
"(*%s)", out);</NOBR></DIV>
<DIV style="LEFT: 265px; POSITION: absolute; TOP: 137161px"><NOBR>strcpy(out, 
temp);</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 137177px"><NOBR>} else if 
(type == NAME) {</NOBR></DIV>
<DIV style="LEFT: 265px; POSITION: absolute; TOP: 137194px"><NOBR>sprintf(temp, 
"%s %s", token, out);</NOBR></DIV>
<DIV style="LEFT: 265px; POSITION: absolute; TOP: 137210px"><NOBR>strcpy(out, 
temp);</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 137227px"><NOBR>} 
else</NOBR></DIV>
<DIV 
style="LEFT: 265px; POSITION: absolute; TOP: 137243px"><NOBR>printf("invalid 
input at %s\n", token);</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 137260px"><NOBR>}</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 137276px"><NOBR>return 
0;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 137293px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 137329px"><NOBR><I><B>Exercise 
5−18. </B></I>Make <FONT face=Courier>dcl </FONT>recover from input 
errors.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 137369px"><NOBR><I><B>Exercise 
5−19. </B></I>Modify <FONT face=Courier>undcl </FONT>so that it does not add 
redundant parentheses to declarations.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 137409px"><NOBR><I><B>Exercise 
5−20. </B></I>Expand <FONT face=Courier>dcl </FONT>to handle declarations with 
function argument types, qualifiers like <FONT face=Courier>const</FONT>, 
and</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 137428px"><NOBR>so 
on.</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 320px; POSITION: absolute; TOP: 137471px"><NOBR><A 
href="#64">Back 
to Chapter 4 </A><FONT face=Times color=#000000>−− </FONT><A 
href="#1">Index 
</A><FONT face=Times color=#000000>−− </FONT><A 
href="#117">Chapter 
6</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 136837px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 137917px"><NOBR>5.12 
Complicated Declarations</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 137917px"><NOBR>116</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 137983px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=117><B>Page 117</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 320px; POSITION: absolute; TOP: 138098px"><NOBR><A 
href="#86">Back 
to Chapter 5 </A><FONT face=Times color=#000000>−− </FONT><A 
href="#1">Index 
</A><FONT face=Times color=#000000>−− </FONT><A 
href="#138">Chapter 
7</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=4><SPAN 
style="FONT-SIZE: 26px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 138143px"><NOBR><B>Chapter 6 − 
Structures</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 138195px"><NOBR>A structure is 
a collection of one or more variables, possibly of different types, grouped 
together under a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 138214px"><NOBR>single name 
for convenient handling. (Structures are called ``records'' in some languages, 
notably Pascal.)</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 138234px"><NOBR>Structures 
help to organize complicated data, particularly in large programs, because they 
permit a group of</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 138254px"><NOBR>related 
variables to be treated as a unit instead of as separate entities.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 138294px"><NOBR>One 
traditional <B><SPAN class=goohl2>example</SPAN></B> of a structure is the 
payroll record: an employee is described by a set of attributes</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 138313px"><NOBR>such as name, 
address, social security number, salary, etc. Some of these in turn could be 
structures: a name</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 138333px"><NOBR>has several 
components, as does an address and even a salary. Another <B><SPAN 
class=goohl2>example</SPAN></B>, more typical for C, comes</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 138353px"><NOBR>from graphics: 
a point is a pair of coordinate, a rectangle is a pair of points, and so 
on.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 138393px"><NOBR>The main 
change made by the ANSI standard is to define structure assignment − structures 
may be copied and</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 138412px"><NOBR>assigned to, 
passed to functions, and returned by functions. This has been supported by most 
compilers for</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 138432px"><NOBR>many years, 
but the properties are now precisely defined. Automatic structures and arrays 
may now also be</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 138452px"><NOBR>initialized.</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=4><SPAN style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 138493px"><NOBR><B>6.1 Basics 
of Structures</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 138540px"><NOBR>Let us create 
a few structures suitable for graphics. The basic object is a point, which we 
will assume has an <I>x</I></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 138560px"><NOBR>coordinate and 
a <I>y </I>coordinate, both integers.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 138836px"><NOBR>The two 
components can be placed in a structure declared like 
this:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 138876px"><NOBR>struct point 
{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 138892px"><NOBR>int 
x;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 138909px"><NOBR>int 
y;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 138925px"><NOBR>};</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 138962px"><NOBR>The keyword 
<FONT face=Courier>struct </FONT>introduces a structure declaration, which is a 
list of declarations enclosed in braces. An</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 138981px"><NOBR>optional name 
called a <I>structure tag </I>may follow the word <FONT face=Courier>struct 
</FONT>(as with <FONT face=Courier>point </FONT>here). The tag names 
this</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 139001px"><NOBR>kind of 
structure, and can be used subsequently as a shorthand for the part of the 
declaration in braces.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 139041px"><NOBR>The variables 
named in a structure are called <I>members</I>. A structure member or tag and an 
ordinary (i.e.,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 139061px"><NOBR>non−member) 
variable can have the same name without conflict, since they can always be 
distinguished by</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 138025px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 139105px"><NOBR>Chapter 6 − 
Structures</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 139105px"><NOBR>117</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 139171px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=118><B>Page 118</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 139263px"><NOBR>context. 
Furthermore, the same member names may occur in different structures, although 
as a matter of style</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 139283px"><NOBR>one would 
normally use the same names only for closely related objects.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 139323px"><NOBR>A <FONT 
face=Courier>struct </FONT>declaration defines a type. The right brace that 
terminates the list of members may be followed by</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 139342px"><NOBR>a list of 
variables, just as for any basic type. That is,</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 139382px"><NOBR>struct { ... } 
x, y, z;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 139418px"><NOBR>is 
syntactically analogous to</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 139458px"><NOBR>int x, y, 
z;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 139494px"><NOBR>in the sense 
that each statement declares <FONT face=Courier>x</FONT>, <FONT face=Courier>y 
</FONT>and <FONT face=Courier>z </FONT>to be variables of the named type and 
causes space to be</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 139514px"><NOBR>set aside for 
them.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 139554px"><NOBR>A structure 
declaration that is not followed by a list of variables reserves no storage; it 
merely describes a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 139573px"><NOBR>template or 
shape of a structure. If the declaration is tagged, however, the tag can be used 
later in definitions</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 139593px"><NOBR>of instances 
of the structure. For <B><SPAN class=goohl2>example</SPAN></B>, given the 
declaration of <FONT face=Courier>point 
</FONT>above,</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 139633px"><NOBR>struct point 
pt;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 139669px"><NOBR>defines a 
variable <FONT face=Courier>pt </FONT>which is a structure of type <FONT 
face=Courier>struct point</FONT>. A structure can be initialized by</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 139689px"><NOBR>following its 
definition with a list of initializers, each a constant expression, for the 
members:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 139728px"><NOBR>struct maxpt = 
{ 320, 200 };</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 139765px"><NOBR>An automatic 
structure may also be initialized by assignment or by calling a function that 
returns a structure</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 139785px"><NOBR>of the right 
type.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 139824px"><NOBR>A member of a 
particular structure is referred to in an expression by a construction of the 
form</NOBR></DIV>
<DIV 
style="LEFT: 128px; POSITION: absolute; TOP: 139864px"><NOBR><I>structure−name.member</I></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 139903px"><NOBR>The structure 
member operator ``.'' connects the structure name and the member name. To print 
the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 139923px"><NOBR>coordinates of 
the point <FONT face=Courier>pt</FONT>, for 
instance,</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 139963px"><NOBR>printf("%d,%d", 
pt.x, pt.y);</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 139999px"><NOBR>or to compute 
the distance from the origin (0,0) to <FONT 
face=Courier>pt</FONT>,</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 140039px"><NOBR>double dist, 
sqrt(double);</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 140072px"><NOBR>dist = 
sqrt((double)pt.x * pt.x + (double)pt.y * pt.y);</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 140108px"><NOBR>Structures can 
be nested. One representation of a rectangle is a pair of points that denote the 
diagonally</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 140128px"><NOBR>opposite 
corners:</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 139213px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 140293px"><NOBR>Chapter 6 − 
Structures</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 140293px"><NOBR>118</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 140359px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=119><B>Page 119</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 140661px"><NOBR>struct rect 
{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 140678px"><NOBR>struct point 
pt1;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 140694px"><NOBR>struct point 
pt2;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 140711px"><NOBR>};</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 140747px"><NOBR>The <FONT 
face=Courier>rect </FONT>structure contains two <FONT face=Courier>point 
</FONT>structures. If we declare <FONT face=Courier>screen 
</FONT>as</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 140786px"><NOBR>struct rect 
screen;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 140823px"><NOBR>then</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 140862px"><NOBR>screen.pt1.x</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 140899px"><NOBR>refers to the 
<I>x </I>coordinate of the <FONT face=Courier>pt1 </FONT>member of <FONT 
face=Courier>screen</FONT>.</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=4><SPAN style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 140940px"><NOBR><B>6.2 
Structures and Functions</B></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 140987px"><NOBR>The only legal 
operations on a structure are copying it or assigning to it as a unit, taking 
its address with <FONT face=Courier>&amp;</FONT>,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 141006px"><NOBR>and accessing 
its members. Copy and assignment include passing arguments to functions and 
returning values</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 141026px"><NOBR>from functions 
as well. Structures may not be compared. A structure may be initialized by a 
list of constant</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 141046px"><NOBR>member values; 
an automatic structure may also be initialized by an assignment.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 141086px"><NOBR>Let us 
investigate structures by writing some functions to manipulate points and 
rectangles. There are at least</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 141105px"><NOBR>three possible 
approaches: pass components separately, pass an entire structure, or pass a 
pointer to it. Each</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 141125px"><NOBR>has its good 
points and bad points.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 141165px"><NOBR>The first 
function, <FONT face=Courier>makepoint</FONT>, will take two integers and return 
a <FONT face=Courier>point </FONT>structure:</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 141204px"><NOBR>/* makepoint: 
make a point from x and y components */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 141221px"><NOBR>struct point 
makepoint(int x, int y)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 141237px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 141254px"><NOBR>struct point 
temp;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 141287px"><NOBR>temp.x = 
x;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 141303px"><NOBR>temp.y = 
y;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 141320px"><NOBR>return 
temp;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 141336px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 141373px"><NOBR>Notice that 
there is no conflict between the argument name and the member with the same 
name; indeed the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 141393px"><NOBR>re−use of the 
names stresses the relationship.</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 141433px"><NOBR>makepoint 
<FONT face=Times>can now be used to initialize any structure dynamically, or to 
provide structure arguments to a</FONT></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 140401px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 141481px"><NOBR>6.2 Structures 
and Functions</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 141481px"><NOBR>119</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 141547px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=120><B>Page 120</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 141639px"><NOBR>function:</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 141679px"><NOBR>struct rect 
screen;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 141695px"><NOBR>struct point 
middle;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 141712px"><NOBR>struct point 
makepoint(int, int);</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 141745px"><NOBR>screen.pt1 = 
makepoint(0,0);</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 141761px"><NOBR>screen.pt2 = 
makepoint(XMAX, YMAX);</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 141778px"><NOBR>middle = 
makepoint((screen.pt1.x + screen.pt2.x)/2,</NOBR></DIV>
<DIV style="LEFT: 290px; POSITION: absolute; TOP: 141794px"><NOBR>(screen.pt1.y 
+ screen.pt2.y)/2);</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 141831px"><NOBR>The next step 
is a set of functions to do arithmetic on points. For 
instance,</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 141870px"><NOBR>/* addpoints: 
add two points */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 141887px"><NOBR>struct 
addpoint(struct point p1, struct point p2)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 141903px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 141920px"><NOBR>p1.x += 
p2.x;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 141936px"><NOBR>p1.y += 
p2.y;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 141953px"><NOBR>return 
p1;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 141969px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 142006px"><NOBR>Here both the 
arguments and the return value are structures. We incremented the components in 
<FONT face=Courier>p1 </FONT>rather</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 142025px"><NOBR>than using an 
explicit temporary variable to emphasize that structure parameters are passed by 
value like any</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 142045px"><NOBR>others.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 142085px"><NOBR>As another 
<B><SPAN class=goohl2>example</SPAN></B>, the function <FONT 
face=Courier>ptinrect </FONT>tests whether a point is inside a rectangle, where 
we have</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 142105px"><NOBR>adopted the 
convention that a rectangle includes its left and bottom sides but not its top 
and right sides:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 142144px"><NOBR>/* ptinrect: 
return 1 if p in r, 0 if not */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 142160px"><NOBR>int 
ptinrect(struct point p, struct rect r)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 142177px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 142193px"><NOBR>return p.x 
&gt;= r.pt1.x &amp;p.x &lt; r.pt2.x</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 142210px"><NOBR>&amp;p.y &gt;= 
r.pt1.y &amp;p.y &lt; r.pt2.y;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 142226px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 142263px"><NOBR>This assumes 
that the rectangle is presented in a standard form where the <FONT 
face=Courier>pt1 </FONT>coordinates are less than 
the</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 142284px"><NOBR>pt2 <FONT 
face=Times>coordinates. The following function returns a rectangle guaranteed to 
be in canonical form:</FONT></NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 142322px"><NOBR>#define min(a, 
b) ((a) &lt; (b) ? (a) : (b))</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 142339px"><NOBR>#define max(a, 
b) ((a) &gt; (b) ? (a) : (b))</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 142372px"><NOBR>/* canonrect: 
canonicalize coordinates of rectangle */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 142388px"><NOBR>struct rect 
canonrect(struct rect r)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 142405px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 142421px"><NOBR>struct rect 
temp;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 142454px"><NOBR>temp.pt1.x = 
min(r.pt1.x, r.pt2.x);</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 142471px"><NOBR>temp.pt1.y = 
min(r.pt1.y, r.pt2.y);</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 142487px"><NOBR>temp.pt2.x = 
max(r.pt1.x, r.pt2.x);</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 142504px"><NOBR>temp.pt2.y = 
max(r.pt1.y, r.pt2.y);</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 142520px"><NOBR>return 
temp;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 142537px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 142573px"><NOBR>If a large 
structure is to be passed to a function, it is generally more efficient to pass 
a pointer than to copy the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 142593px"><NOBR>whole 
structure. Structure pointers are just like pointers to ordinary variables. The 
declaration</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 142632px"><NOBR>struct point 
*pp;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 141589px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 142669px"><NOBR>6.2 Structures 
and Functions</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 142669px"><NOBR>120</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 142735px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=121><B>Page 121</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 142827px"><NOBR>says that 
<FONT face=Courier>pp </FONT>is a pointer to a structure of type <FONT 
face=Courier>struct point</FONT>. If <FONT face=Courier>pp </FONT>points to a 
<FONT face=Courier>point </FONT>structure, <FONT face=Courier>*pp 
</FONT>is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 142847px"><NOBR>the structure, 
and <FONT face=Courier>(*pp).x </FONT>and <FONT face=Courier>(*pp).y </FONT>are 
the members. To use <FONT face=Courier>pp</FONT>, we might write, for <B><SPAN 
class=goohl2>example</SPAN></B>,</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 142886px"><NOBR>struct point 
origin, *pp;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 142919px"><NOBR>pp = 
</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 142936px"><NOBR>printf("origin 
is (%d,%d)\n", (*pp).x, (*pp).y);</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 142972px"><NOBR>The 
parentheses are necessary in <FONT face=Courier>(*pp).x </FONT>because the 
precedence of the structure member operator <FONT face=Courier>. 
</FONT>is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 142992px"><NOBR>higher then 
<FONT face=Courier>*</FONT>. The expression <FONT face=Courier>*pp.x 
</FONT>means <FONT face=Courier>*(pp.x)</FONT>, which is illegal here because 
<FONT face=Courier>x </FONT>is not a pointer.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 143032px"><NOBR>Pointers to 
structures are so frequently used that an alternative notation is provided as a 
shorthand. If <FONT face=Courier>p </FONT>is a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 143052px"><NOBR>pointer to a 
structure, then</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 143091px"><NOBR>p−&gt;<I>member−of−structure</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 143128px"><NOBR>refers to the 
particular member. So we could write instead</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 143167px"><NOBR>printf("origin 
is (%d,%d)\n", pp−&gt;x, pp−&gt;y);</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 143203px"><NOBR>Both <FONT 
face=Courier>. </FONT>and <FONT face=Courier>−&gt; </FONT>associate from left to 
right, so if we have</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 143243px"><NOBR>struct rect r, 
*rp = r</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 143279px"><NOBR>then these 
four expressions are equivalent:</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 143319px"><NOBR>r.pt1.x</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 143335px"><NOBR>rp−&gt;pt1.x</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 143352px"><NOBR>(r.pt1).x</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 143368px"><NOBR>(rp−&gt;pt1).x</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 143405px"><NOBR>The structure 
operators <FONT face=Courier>. </FONT>and <FONT face=Courier>−&gt;</FONT>, 
together with <FONT face=Courier>() </FONT>for function calls and <FONT 
face=Courier>[] </FONT>for subscripts, are at the top of</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 143425px"><NOBR>the precedence 
hierarchy and thus bind very tightly. For <B><SPAN 
class=goohl2>example</SPAN></B>, given the 
declaration</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 143464px"><NOBR>struct 
{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 143480px"><NOBR>int 
len;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 143497px"><NOBR>char 
*str;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 143513px"><NOBR>} 
*p;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 143550px"><NOBR>then</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 143589px"><NOBR>++p−&gt;len</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 143626px"><NOBR>increments 
<FONT face=Courier>len</FONT>, not <FONT face=Courier>p</FONT>, because the 
implied parenthesization is <FONT face=Courier>++(p−&gt;len)</FONT>. Parentheses 
can be used to</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 143646px"><NOBR>alter binding: 
<FONT face=Courier>(++p)−&gt;len </FONT>increments <FONT face=Courier>p 
</FONT>before accessing <FONT face=Courier>len</FONT>, and <FONT 
face=Courier>(p++)−&gt;len </FONT>increments <FONT face=Courier>p 
</FONT>afterward.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 143665px"><NOBR>(This last set 
of parentheses is unnecessary.)</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 143705px"><NOBR>In the same 
way, <FONT face=Courier>*p−&gt;str </FONT>fetches whatever <FONT 
face=Courier>str </FONT>points to; <FONT face=Courier>*p−&gt;str++ 
</FONT>increments <FONT face=Courier>str </FONT>after accessing</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 143725px"><NOBR>whatever it 
points to (just like <FONT face=Courier>*s++</FONT>); <FONT 
face=Courier>(*p−&gt;str)++ </FONT>increments whatever <FONT face=Courier>str 
</FONT>points to; and <FONT face=Courier>*p++−&gt;str</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 143745px"><NOBR>increments 
<FONT face=Courier>p </FONT>after accessing whatever <FONT face=Courier>str 
</FONT>points to.</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 142777px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 143857px"><NOBR>6.2 Structures 
and Functions</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 143857px"><NOBR>121</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 143923px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=122><B>Page 122</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=4><SPAN style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 144017px"><NOBR><B>6.3 Arrays 
of Structures</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 144064px"><NOBR>Consider 
writing a program to count the occurrences of each C keyword. We need an array 
of character</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 144083px"><NOBR>strings to 
hold the names, and an array of integers for the counts. One possibility is to 
use two parallel arrays,</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 144104px"><NOBR>keyword <FONT 
face=Times>and </FONT>keycount<FONT face=Times>, as 
in</FONT></NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 144143px"><NOBR>char 
*keyword[NKEYS];</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 144159px"><NOBR>int 
keycount[NKEYS];</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 144196px"><NOBR>But the very 
fact that the arrays are parallel suggests a different organization, an array of 
structures. Each</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 144215px"><NOBR>keyword is a 
pair:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 144255px"><NOBR>char 
*word;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 144271px"><NOBR>int 
cout;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 144308px"><NOBR>and there is 
an array of pairs. The structure declaration</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 144347px"><NOBR>struct key 
{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 144364px"><NOBR>char 
*word;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 144380px"><NOBR>int 
count;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 144397px"><NOBR>} 
keytab[NKEYS];</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 144433px"><NOBR>declares a 
structure type <FONT face=Courier>key</FONT>, defines an array <FONT 
face=Courier>keytab </FONT>of structures of this type, and sets aside storage 
for</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 144453px"><NOBR>them. Each 
element of the array is a structure. This could also be 
written</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 144492px"><NOBR>struct key 
{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 144509px"><NOBR>char 
*word;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 144525px"><NOBR>int 
count;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 144542px"><NOBR>};</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 144575px"><NOBR>struct key 
keytab[NKEYS];</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 144611px"><NOBR>Since the 
structure <FONT face=Courier>keytab </FONT>contains a constant set of names, it 
is easiest to make it an external variable and</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 144631px"><NOBR>initialize it 
once and for all when it is defined. The structure initialization is analogous 
to earlier ones − the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 144651px"><NOBR>definition is 
followed by a list of initializers enclosed in 
braces:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 144690px"><NOBR>struct key 
{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 144707px"><NOBR>char 
*word;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 144723px"><NOBR>int 
count;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 144740px"><NOBR>} keytab[] = 
{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 144756px"><NOBR>"auto", 
0,</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 144773px"><NOBR>"break", 
0,</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 144789px"><NOBR>"case", 
0,</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 144806px"><NOBR>"char", 
0,</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 144822px"><NOBR>"const", 
0,</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 144839px"><NOBR>"continue", 
0,</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 144855px"><NOBR>"default", 
0,</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 144872px"><NOBR>/* ... 
*/</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 144888px"><NOBR>"unsigned", 
0,</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 144905px"><NOBR>"void", 
0,</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 144921px"><NOBR>"volatile", 
0,</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 144938px"><NOBR>"while", 
0</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 144954px"><NOBR>};</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 144991px"><NOBR>The 
initializers are listed in pairs corresponding to the structure members. It 
would be more precise to enclose</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 143965px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 145045px"><NOBR>6.3 Arrays of 
Structures</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 145045px"><NOBR>122</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 145111px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=123><B>Page 123</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 145203px"><NOBR>the 
initializers for each "row" or structure in braces, as 
in</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 145243px"><NOBR>{ "auto", 0 
},</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 145259px"><NOBR>{ "break", 0 
},</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 145276px"><NOBR>{ "case", 0 
},</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 145292px"><NOBR>...</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 145329px"><NOBR>but inner 
braces are not necessary when the initializers are simple variables or character 
strings, and when all</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 145348px"><NOBR>are present. 
As usual, the number of entries in the array <FONT face=Courier>keytab 
</FONT>will be computed if the initializers are</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 145368px"><NOBR>present and 
the <FONT face=Courier>[] </FONT>is left empty.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 145408px"><NOBR>The keyword 
counting program begins with the definition of <FONT face=Courier>keytab</FONT>. 
The main routine reads the input by</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 145428px"><NOBR>repeatedly 
calling a function <FONT face=Courier>getword </FONT>that fetches one word at a 
time. Each word is looked up in <FONT face=Courier>keytab</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 145447px"><NOBR>with a version 
of the binary search function that we wrote in <A 
href="#53"></A><FONT 
face=Times color=#0000ff><A 
href="#53">Chapter 
3</A></FONT><A 
href="#53"></A>. 
The list of keywords must be sorted in</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 145467px"><NOBR>increasing 
order in the table.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 145507px"><NOBR>#include 
&lt;stdio.h&gt;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 145523px"><NOBR>#include 
&lt;ctype.h&gt;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 145540px"><NOBR>#include 
&lt;string.h&gt;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 145573px"><NOBR>#define 
MAXWORD 100</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 145606px"><NOBR>int 
getword(char *, int);</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 145622px"><NOBR>int <B><SPAN 
class=goohl0>binsearch</SPAN></B>(char *, struct key *, int);</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 145655px"><NOBR>/* count C 
keywords */</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 145672px"><NOBR>main()</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 145688px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 145705px"><NOBR>int 
n;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 145721px"><NOBR>char 
word[MAXWORD];</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 145754px"><NOBR>while 
(getword(word, MAXWORD) != EOF)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 145771px"><NOBR>if 
(isalpha(word[0]))</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 145787px"><NOBR>if ((n = 
<B><SPAN class=goohl0>binsearch</SPAN></B>(word, keytab, NKEYS)) &gt;= 
0)</NOBR></DIV>
<DIV 
style="LEFT: 265px; POSITION: absolute; TOP: 145804px"><NOBR>keytab[n].count++;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 145820px"><NOBR>for (n = 0; n 
&lt; NKEYS; n++)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 145837px"><NOBR>if 
(keytab[n].count &gt; 0)</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 145853px"><NOBR>printf("%4d 
%s\n",</NOBR></DIV>
<DIV 
style="LEFT: 265px; POSITION: absolute; TOP: 145870px"><NOBR>keytab[n].count, 
keytab[n].word);</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 145886px"><NOBR>return 
0;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 145903px"><NOBR>}</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 145936px"><NOBR>/* <B><SPAN 
class=goohl0>binsearch</SPAN></B>: find word in tab[0]...tab[n−1] 
*/</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 145952px"><NOBR>int <B><SPAN 
class=goohl0>binsearch</SPAN></B>(char *word, struct key tab[], int 
n)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 145969px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 145985px"><NOBR>int 
cond;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 146002px"><NOBR>int low, high, 
mid;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 146035px"><NOBR>low = 
0;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 146051px"><NOBR>high = n − 
1;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 146068px"><NOBR>while (low 
&lt;= high) {</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 146084px"><NOBR>mid = 
(low+high) / 2;</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 146101px"><NOBR>if ((cond = 
strcmp(word, tab[mid].word)) &lt; 0)</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 146117px"><NOBR>high = mid − 
1;</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 146134px"><NOBR>else if (cond 
&gt; 0)</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 146150px"><NOBR>low = mid + 
1;</NOBR></DIV>
<DIV 
style="LEFT: 199px; POSITION: absolute; TOP: 146167px"><NOBR>else</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 146183px"><NOBR>return 
mid;</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 146200px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 145153px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 146233px"><NOBR>6.3 Arrays of 
Structures</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 146233px"><NOBR>123</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 146299px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=124><B>Page 124</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 146391px"><NOBR>return 
−1;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 146408px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 146444px"><NOBR>We will show 
the function <FONT face=Courier>getword </FONT>in a moment; for now it suffices 
to say that each call to <FONT face=Courier>getword </FONT>finds</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 146464px"><NOBR>a word, which 
is copied into the array named as its first argument.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 146503px"><NOBR>The quantity 
<FONT face=Courier>NKEYS </FONT>is the number of keywords in <FONT 
face=Courier>keytab</FONT>. Although we could count this by hand, it's a 
lot</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 146523px"><NOBR>easier and 
safer to do it by machine, especially if the list is subject to change. One 
possibility would be to</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 146543px"><NOBR>terminate the 
list of initializers with a null pointer, then loop along <FONT 
face=Courier>keytab </FONT>until the end is found.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 146583px"><NOBR>But this is 
more than is needed, since the size of the array is completely determined at 
compile time. The size</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 146602px"><NOBR>of the array 
is the size of one entry times the number of entries, so the number of entries 
is just</NOBR></DIV>
<DIV style="LEFT: 128px; POSITION: absolute; TOP: 146642px"><NOBR><I>size of 
</I><FONT face=Courier>keytab / </FONT><I>size of </I><FONT face=Courier>struct 
key</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 146682px"><NOBR>C provides a 
compile−time unary operator called <FONT face=Courier>sizeof </FONT>that can be 
used to compute the size of any object.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 146701px"><NOBR>The 
expressions</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 146741px"><NOBR>sizeof 
<I>object</I></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 146777px"><NOBR>and</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 146817px"><NOBR>sizeof 
(<I>type name</I>)</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 146853px"><NOBR>yield an 
integer equal to the size of the specified object or type in bytes. (Strictly, 
<FONT face=Courier>sizeof </FONT>produces an</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 146873px"><NOBR>unsigned 
integer value whose type, <FONT face=Courier>size_t</FONT>, is defined in the 
header <FONT face=Courier>&lt;stddef.h&gt;</FONT>.) An object can be 
a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 146893px"><NOBR>variable or 
array or structure. A type name can be the name of a basic type like <FONT 
face=Courier>int </FONT>or <FONT face=Courier>double</FONT>, or a 
derived</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 146913px"><NOBR>type like a 
structure or a pointer.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 146952px"><NOBR>In our case, 
the number of keywords is the size of the array divided by the size of one 
element. This</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 146972px"><NOBR>computation is 
used in a <FONT face=Courier>#define </FONT>statement to set the value of <FONT 
face=Courier>NKEYS</FONT>:</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 147011px"><NOBR>#define NKEYS 
(sizeof keytab / sizeof(struct key))</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 147048px"><NOBR>Another way to 
write this is to divide the array size by the size of a specific 
element:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 147087px"><NOBR>#define NKEYS 
(sizeof keytab / sizeof(keytab[0]))</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 147124px"><NOBR>This has the 
advantage that it does not need to be changed if the type changes.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 147163px"><NOBR>A <FONT 
face=Courier>sizeof </FONT>can not be used in a <FONT face=Courier>#if 
</FONT>line, because the preprocessor does not parse type names. But 
the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 147183px"><NOBR>expression in 
the <FONT face=Courier>#define </FONT>is not evaluated by the preprocessor, so 
the code here is legal.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 147223px"><NOBR>Now for the 
function <FONT face=Courier>getword</FONT>. We have written a more general <FONT 
face=Courier>getword </FONT>than is necessary for this</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 147243px"><NOBR>program, but 
it is not complicated. <FONT face=Courier>getword </FONT>fetches the next 
``word'' from the input, where a word is either a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 147262px"><NOBR>string of 
letters and digits beginning with a letter, or a single non−white space 
character. The function value is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 147282px"><NOBR>the first 
character of the word, or <FONT face=Courier>EOF </FONT>for end of file, or the 
character itself if it is not alphabetic.</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 147322px"><NOBR>/* getword: 
get next word or character from input */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 147338px"><NOBR>int 
getword(char *word, int lim)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 147355px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 147371px"><NOBR>int c, 
getch(void);</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 147388px"><NOBR>void 
ungetch(int);</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 146341px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 147421px"><NOBR>6.3 Arrays of 
Structures</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 147421px"><NOBR>124</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 147487px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=125><B>Page 125</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 147579px"><NOBR>char *w = 
word;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 147612px"><NOBR>while 
(isspace(c = getch()))</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 147629px"><NOBR>;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 147645px"><NOBR>if (c != 
EOF)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 147662px"><NOBR>*w++ = 
c;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 147678px"><NOBR>if 
(!isalpha(c)) {</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 147695px"><NOBR>*w = 
'\0';</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 147711px"><NOBR>return 
c;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 147728px"><NOBR>}</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 147744px"><NOBR>for ( ; −−lim 
&gt; 0; w++)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 147761px"><NOBR>if 
(!isalnum(*w = getch())) {</NOBR></DIV>
<DIV 
style="LEFT: 232px; POSITION: absolute; TOP: 147777px"><NOBR>ungetch(*w);</NOBR></DIV>
<DIV 
style="LEFT: 232px; POSITION: absolute; TOP: 147794px"><NOBR>break;</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 147810px"><NOBR>}</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 147827px"><NOBR>*w = 
'\0';</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 147843px"><NOBR>return 
word[0];</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 147860px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 147897px"><NOBR>getword <FONT 
face=Times>uses the </FONT>getch <FONT face=Times>and </FONT>ungetch <FONT 
face=Times>that we wrote in <A 
href="#64"></A></FONT><FONT 
face=Times color=#0000ff><A 
href="#64">Chapter 
4</A></FONT><FONT face=Times><A 
href="#64"></A>. 
When the collection of an</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 147916px"><NOBR>alphanumeric 
token stops, <FONT face=Courier>getword </FONT>has gone one character too far. 
The call to <FONT face=Courier>ungetch </FONT>pushes that</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 147936px"><NOBR>character back 
on the input for the next call. <FONT face=Courier>getword </FONT>also uses 
<FONT face=Courier>isspace </FONT>to skip whitespace, <FONT face=Courier>isalpha 
</FONT>to</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 147955px"><NOBR>identify 
letters, and <FONT face=Courier>isalnum </FONT>to identify letters and digits; 
all are from the standard header <FONT 
face=Courier>&lt;ctype.h&gt;</FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 147995px"><NOBR><I><B>Exercise 
6−1. </B></I>Our version of <FONT face=Courier>getword </FONT>does not properly 
handle underscores, string constants, comments, or</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 148015px"><NOBR>preprocessor 
control lines. Write a better version.</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=4><SPAN style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 148056px"><NOBR><B>6.4 
Pointers to Structures</B></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 148103px"><NOBR>To illustrate 
some of the considerations involved with pointers to and arrays of structures, 
let us write the</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 148123px"><NOBR>keyword−counting 
program again, this time using pointers instead of array indices.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 148162px"><NOBR>The external 
declaration of <FONT face=Courier>keytab </FONT>need not change, but <FONT 
face=Courier>main </FONT>and <FONT face=Courier><B><SPAN 
class=goohl0>binsearch</SPAN></B> </FONT>do need 
modification.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 148202px"><NOBR>#include 
&lt;stdio.h&gt;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 148218px"><NOBR>#include 
&lt;ctype.h&gt;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 148235px"><NOBR>#include 
&lt;string.h&gt;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 148251px"><NOBR>#define 
MAXWORD 100</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 148284px"><NOBR>int 
getword(char *, int);</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 148301px"><NOBR>struct key 
*<B><SPAN class=goohl0>binsearch</SPAN></B>(char *, struct key *, 
int);</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 148334px"><NOBR>/* count C 
keywords; pointer version */</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 148350px"><NOBR>main()</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 148367px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 148383px"><NOBR>char 
word[MAXWORD];</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 148400px"><NOBR>struct key 
*p;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 148433px"><NOBR>while 
(getword(word, MAXWORD) != EOF)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 148449px"><NOBR>if 
(isalpha(word[0]))</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 148466px"><NOBR>if 
((p=<B><SPAN class=goohl0>binsearch</SPAN></B>(word, keytab, NKEYS)) != 
NULL)</NOBR></DIV>
<DIV 
style="LEFT: 265px; POSITION: absolute; TOP: 148482px"><NOBR>p−&gt;count++;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 148499px"><NOBR>for (p = 
keytab; p &lt; keytab + NKEYS; p++)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 148515px"><NOBR>if 
(p−&gt;count &gt; 0)</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 148532px"><NOBR>printf("%4d 
%s\n", p−&gt;count, p−&gt;word);</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 148548px"><NOBR>return 
0;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 148565px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 147529px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 148609px"><NOBR>6.4 Pointers 
to Structures</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 148609px"><NOBR>125</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 148675px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=126><B>Page 126</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 148784px"><NOBR>/* <B><SPAN 
class=goohl0>binsearch</SPAN></B>: find word in tab[0]...tab[n−1] 
*/</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 148800px"><NOBR>struct key 
*<B><SPAN class=goohl0>binsearch</SPAN></B>(char *word, struck key *tab, int 
n)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 148817px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 148833px"><NOBR>int 
cond;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 148850px"><NOBR>struct key 
*low = </NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 148866px"><NOBR>struct key 
*high = </NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 148883px"><NOBR>struct key 
*mid;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 148916px"><NOBR>while (low 
&lt; high) {</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 148932px"><NOBR>mid = low + 
(high−low) / 2;</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 148949px"><NOBR>if ((cond = 
strcmp(word, mid−&gt;word)) &lt; 0)</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 148965px"><NOBR>high = 
mid;</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 148982px"><NOBR>else if (cond 
&gt; 0)</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 148998px"><NOBR>low = mid + 
1;</NOBR></DIV>
<DIV 
style="LEFT: 199px; POSITION: absolute; TOP: 149015px"><NOBR>else</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 149031px"><NOBR>return 
mid;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 149048px"><NOBR>}</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 149064px"><NOBR>return 
NULL;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 149081px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 149117px"><NOBR>There are 
several things worthy of note here. First, the declaration of <FONT 
face=Courier><B><SPAN class=goohl0>binsearch</SPAN></B> </FONT>must indicate 
that it</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 149137px"><NOBR>returns a 
pointer to <FONT face=Courier>struct key </FONT>instead of an integer; this is 
declared both in the function prototype and in</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 149158px"><NOBR><B><SPAN 
class=goohl0>binsearch</SPAN></B><FONT face=Times>. If </FONT><B><SPAN 
class=goohl0>binsearch</SPAN></B> <FONT face=Times>finds the word, it returns a 
pointer to it; if it fails, it returns </FONT>NULL<FONT 
face=Times>.</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 149196px"><NOBR>Second, the 
elements of <FONT face=Courier>keytab </FONT>are now accessed by pointers. This 
requires significant changes in</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 149217px"><NOBR><B><SPAN 
class=goohl0>binsearch</SPAN></B><FONT 
face=Times>.</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 149256px"><NOBR>The 
initializers for <FONT face=Courier>low </FONT>and <FONT face=Courier>high 
</FONT>are now pointers to the beginning and just past the end of the 
table.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 149295px"><NOBR>The 
computation of the middle element can no longer be 
simply</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 149335px"><NOBR>mid = 
(low+high) / 2 /* WRONG */</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 149371px"><NOBR>because the 
addition of pointers is illegal. Subtraction is legal, however, so <FONT 
face=Courier>high−low </FONT>is the number of</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 149391px"><NOBR>elements, and 
thus</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 149430px"><NOBR>mid = low + 
(high−low) / 2</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 149467px"><NOBR>sets <FONT 
face=Courier>mid </FONT>to the element halfway between <FONT face=Courier>low 
</FONT>and <FONT face=Courier>high</FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 149506px"><NOBR>The most 
important change is to adjust the algorithm to make sure that it does not 
generate an illegal pointer</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 149526px"><NOBR>or attempt to 
access an element outside the array. The problem is that <FONT 
face=Courier>&amp;tab[−1] </FONT>and <FONT face=Courier>&amp;tab[n] </FONT>are 
both</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 149546px"><NOBR>outside the 
limits of the array <FONT face=Courier>tab</FONT>. The former is strictly 
illegal, and it is illegal to dereference the latter. The</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 149566px"><NOBR>language 
definition does guarantee, however, that pointer arithmetic that involves the 
first element beyond the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 149586px"><NOBR>end of an 
array (that is, <FONT face=Courier>&amp;tab[n]</FONT>) will work 
correctly.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 149625px"><NOBR>In <FONT 
face=Courier>main </FONT>we wrote</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 149665px"><NOBR>for (p = 
keytab; p &lt; keytab + NKEYS; p++)</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 149701px"><NOBR>If <FONT 
face=Courier>p </FONT>is a pointer to a structure, arithmetic on <FONT 
face=Courier>p </FONT>takes into account the size of the structure, so <FONT 
face=Courier>p++ </FONT>increments</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 149722px"><NOBR>p <FONT 
face=Times>by the correct amount to get the next element of the array of 
structures, and the test stops the loop at 
the</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 149741px"><NOBR>right 
time.</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 148717px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 149797px"><NOBR>6.4 Pointers 
to Structures</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 149797px"><NOBR>126</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 149863px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=127><B>Page 127</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 149955px"><NOBR>Don't assume, 
however, that the size of a structure is the sum of the sizes of its members. 
Because of</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 149975px"><NOBR>alignment 
requirements for different objects, there may be unnamed ``holes'' in a 
structure. Thus, for instance,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 149995px"><NOBR>if a <FONT 
face=Courier>char </FONT>is one byte and an <FONT face=Courier>int </FONT>four 
bytes, the structure</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 150034px"><NOBR>struct 
{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 150051px"><NOBR>char 
c;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 150067px"><NOBR>int 
i;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 150084px"><NOBR>};</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 150120px"><NOBR>might well 
require eight bytes, not five. The <FONT face=Courier>sizeof </FONT>operator 
returns the proper value.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 150160px"><NOBR>Finally, an 
aside on program format: when a function returns a complicated type like a 
structure pointer, as in</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 150199px"><NOBR>struct key 
*<B><SPAN class=goohl0>binsearch</SPAN></B>(char *word, struct key *tab, int 
n)</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 150236px"><NOBR>the function 
name can be hard to see, and to find with a text editor. Accordingly an 
alternate style is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 150256px"><NOBR>sometimes 
used:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 150295px"><NOBR>struct key 
*</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 150311px"><NOBR><B><SPAN 
class=goohl0>binsearch</SPAN></B>(char *word, struct key *tab, int 
n)</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 150348px"><NOBR>This is a 
matter of personal taste; pick the form you like and hold to 
it.</NOBR></DIV></SPAN></FONT><FONT face=Times size=4><SPAN 
style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 150389px"><NOBR><B>6.5 
Self−referential Structures</B></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 150436px"><NOBR>Suppose we 
want to handle the more general problem of counting the occurrences of <I>all 
</I>the words in some</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 150456px"><NOBR>input. Since 
the list of words isn't known in advance, we can't conveniently sort it and use 
a binary search. Yet</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 150475px"><NOBR>we can't do a 
linear search for each word as it arrives, to see if it's already been seen; the 
program would take</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 150495px"><NOBR>too long. 
(More precisely, its running time is likely to grow quadratically with the 
number of input words.)</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 150515px"><NOBR>How can we 
organize the data to copy efficiently with a list or arbitrary 
words?</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 150555px"><NOBR>One solution 
is to keep the set of words seen so far sorted at all times, by placing each 
word into its proper</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 150574px"><NOBR>position in 
the order as it arrives. This shouldn't be done by shifting words in a linear 
array, though − that also</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 150594px"><NOBR>takes too 
long. Instead we will use a data structure called a <I>binary 
tree</I>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 150634px"><NOBR>The tree 
contains one ``node'' per distinct word; each node contains</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 150673px"><NOBR>A pointer to 
the text of the word,</NOBR></DIV></SPAN></FONT><FONT face=Symbol size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 150668px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 150693px"><NOBR>A count of the 
number of occurrences,</NOBR></DIV></SPAN></FONT><FONT face=Symbol size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 150688px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 150713px"><NOBR>A pointer to 
the left child node,</NOBR></DIV></SPAN></FONT><FONT face=Symbol size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 150708px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 150733px"><NOBR>A pointer to 
the right child node.</NOBR></DIV></SPAN></FONT><FONT face=Symbol size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 150727px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 150772px"><NOBR>No node may 
have more than two children; it might have only zero or one.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 150812px"><NOBR>The nodes are 
maintained so that at any node the left subtree contains only words that are 
lexicographically</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 150832px"><NOBR>less than the 
word at the node, and the right subtree contains only words that are greater. 
This is the tree for</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 150852px"><NOBR>the sentence 
``now is the time for all good men to come to the aid of their party'', as built 
by inserting each</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 150871px"><NOBR>word as it is 
encountered:</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 149905px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 150985px"><NOBR>6.5 
Self−referential Structures</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 150985px"><NOBR>127</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 151051px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=128><B>Page 128</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 151405px"><NOBR>To find out 
whether a new word is already in the tree, start at the root and compare the new 
word to the word</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 151425px"><NOBR>stored at that 
node. If they match, the question is answered affirmatively. If the new record 
is less than the tree</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 151444px"><NOBR>word, continue 
searching at the left child, otherwise at the right child. If there is no child 
in the required</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 151464px"><NOBR>direction, the 
new word is not in the tree, and in fact the empty slot is the proper place to 
add the new word.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 151484px"><NOBR>This process 
is recursive, since the search from any node uses a search from one of its 
children. Accordingly,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 151504px"><NOBR>recursive 
routines for insertion and printing will be most natural.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 151543px"><NOBR>Going back to 
the description of a node, it is most conveniently represented as a structure 
with four</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 151563px"><NOBR>components:</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 151603px"><NOBR>struct tnode { 
/* the tree node: */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 151619px"><NOBR>char *word; /* 
points to the text */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 151636px"><NOBR>int count; /* 
number of occurrences */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 151652px"><NOBR>struct tnode 
*left; /* left child */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 151669px"><NOBR>struct tnode 
*right; /* right child */</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 151685px"><NOBR>};</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 151722px"><NOBR>This recursive 
declaration of a node might look chancy, but it's correct. It is illegal for a 
structure to contain</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 151741px"><NOBR>an instance of 
itself, but</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 141px; POSITION: absolute; TOP: 151781px"><NOBR>struct tnode 
*left;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 151817px"><NOBR>declares <FONT 
face=Courier>left </FONT>to be a pointer to a <FONT face=Courier>tnode</FONT>, 
not a <FONT face=Courier>tnode </FONT>itself.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 151857px"><NOBR>Occasionally, 
one needs a variation of self−referential structures: two structures that refer 
to each other. The</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 151877px"><NOBR>way to handle 
this is:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 151916px"><NOBR>struct t 
{</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 151933px"><NOBR>...</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 151949px"><NOBR>struct s *p; 
/* p points to an s */</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 151966px"><NOBR>};</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 151982px"><NOBR>struct s 
{</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 151999px"><NOBR>...</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 152015px"><NOBR>struct t *q; 
/* q points to a t */</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 152032px"><NOBR>};</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 152068px"><NOBR>The code for 
the whole program is surprisingly small, given a handful of supporting routines 
like <FONT face=Courier>getword</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 152088px"><NOBR>that we have 
already written. The main routine reads words with <FONT face=Courier>getword 
</FONT>and installs them in the tree with</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 152109px"><NOBR>addtree<FONT 
face=Times>.</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 151093px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 152173px"><NOBR>6.5 
Self−referential Structures</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 152173px"><NOBR>128</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 152239px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=129><B>Page 129</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 152331px"><NOBR>#include 
&lt;stdio.h&gt;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 152348px"><NOBR>#include 
&lt;ctype.h&gt;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 152364px"><NOBR>#include 
&lt;string.h&gt;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 152397px"><NOBR>#define 
MAXWORD 100</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 152414px"><NOBR>struct tnode 
*addtree(struct tnode *, char *);</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 152430px"><NOBR>void 
treeprint(struct tnode *);</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 152447px"><NOBR>int 
getword(char *, int);</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 152480px"><NOBR>/* word 
frequency count */</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 152496px"><NOBR>main()</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 152513px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 152529px"><NOBR>struct tnode 
*root;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 152546px"><NOBR>char 
word[MAXWORD];</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 152579px"><NOBR>root = 
NULL;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 152595px"><NOBR>while 
(getword(word, MAXWORD) != EOF)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 152612px"><NOBR>if 
(isalpha(word[0]))</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 152628px"><NOBR>root = 
addtree(root, word);</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 152645px"><NOBR>treeprint(root);</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 152661px"><NOBR>return 
0;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 152678px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 152714px"><NOBR>The function 
<FONT face=Courier>addtree </FONT>is recursive. A word is presented by <FONT 
face=Courier>main </FONT>to the top level (the root) of the tree. 
At</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 152734px"><NOBR>each stage, 
that word is compared to the word already stored at the node, and is percolated 
down to either the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 152754px"><NOBR>left or right 
subtree by a recursive call to <FONT face=Courier>adtree</FONT>. Eventually, the 
word either matches something already in</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 152773px"><NOBR>the tree (in 
which case the count is incremented), or a null pointer is encountered, 
indicating that a node must</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 152793px"><NOBR>be created and 
added to the tree. If a new node is created, <FONT face=Courier>addtree 
</FONT>returns a pointer to it, which is installed</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 152813px"><NOBR>in the parent 
node.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 152852px"><NOBR>struct tnode 
*talloc(void);</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 152869px"><NOBR>char 
*strdup(char *);</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 152902px"><NOBR>/* addtree: 
add a node with w, at or below p */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 152918px"><NOBR>struct 
treenode *addtree(struct tnode *p, char *w)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 152935px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 152951px"><NOBR>int 
cond;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 152984px"><NOBR>if (p == NULL) 
{ /* a new word has arrived */</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 153001px"><NOBR>p = talloc(); 
/* make a new node */</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 153017px"><NOBR>p−&gt;word = 
strdup(w);</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 153034px"><NOBR>p−&gt;count = 
1;</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 153050px"><NOBR>p−&gt;left = 
p−&gt;right = NULL;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 153067px"><NOBR>} else if 
((cond = strcmp(w, p−&gt;word)) == 0)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 153083px"><NOBR>p−&gt;count++; 
/* repeated word */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 153100px"><NOBR>else if (cond 
&lt; 0) /* less than into left subtree */</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 153116px"><NOBR>p−&gt;left = 
addtree(p−&gt;left, w);</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 153133px"><NOBR>else /* 
greater than into right subtree */</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 153149px"><NOBR>p−&gt;right = 
addtree(p−&gt;right, w);</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 153166px"><NOBR>return 
p;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 153182px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 153219px"><NOBR>Storage for 
the new node is fetched by a routine <FONT face=Courier>talloc</FONT>, which 
returns a pointer to a free space suitable for</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 153239px"><NOBR>holding a tree 
node, and the new word is copied into a hidden space by <FONT 
face=Courier>strdup</FONT>. (We will discuss these</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 153259px"><NOBR>routines in a 
moment.) The count is initialized, and the two children are made null. This part 
of the code is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 153278px"><NOBR>executed only 
at the leaves of the tree, when a new node is being added. We have (unwisely) 
omitted error</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 153298px"><NOBR>checking on 
the values returned by <FONT face=Courier>strdup </FONT>and <FONT 
face=Courier>talloc</FONT>.</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 152281px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 153361px"><NOBR>6.5 
Self−referential Structures</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 153361px"><NOBR>129</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 153427px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=130><B>Page 130</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 153520px"><NOBR>treeprint 
<FONT face=Times>prints the tree in sorted order; at each node, it prints the 
left subtree (all the words less than 
this</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 153539px"><NOBR>word), then 
the word itself, then the right subtree (all the words greater). If you feel 
shaky about how</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 153559px"><NOBR>recursion 
works, simulate <FONT face=Courier>treeprint </FONT>as it operates on the tree 
shown above.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 153598px"><NOBR>/* treeprint: 
in−order print of tree p */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 153615px"><NOBR>void 
treeprint(struct tnode *p)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 153631px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 153648px"><NOBR>if (p != NULL) 
{</NOBR></DIV>
<DIV 
style="LEFT: 199px; POSITION: absolute; TOP: 153664px"><NOBR>treeprint(p−&gt;left);</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 153681px"><NOBR>printf("%4d 
%s\n", p−&gt;count, p−&gt;word);</NOBR></DIV>
<DIV 
style="LEFT: 199px; POSITION: absolute; TOP: 153697px"><NOBR>treeprint(p−&gt;right);</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 153714px"><NOBR>}</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 153730px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 153767px"><NOBR>A practical 
note: if the tree becomes ``unbalanced'' because the words don't arrive in 
random order, the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 153787px"><NOBR>running time 
of the program can grow too much. As a worst case, if the words are already in 
order, this</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 153806px"><NOBR>program does 
an expensive simulation of linear search. There are generalizations of the 
binary tree that do not</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 153826px"><NOBR>suffer from 
this worst−case behavior, but we will not describe them here.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 153866px"><NOBR>Before leaving 
this <B><SPAN class=goohl2>example</SPAN></B>, it is also worth a brief 
digression on a problem related to storage allocators.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 153886px"><NOBR>Clearly it's 
desirable that there be only one storage allocator in a program, even though it 
allocates different</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 153905px"><NOBR>kinds of 
objects. But if one allocator is to process requests for, say, pointers to <FONT 
face=Courier>char</FONT>s and pointers to</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 153926px"><NOBR>struct 
tnode<FONT face=Times>s, two questions arise. First, how does it meet the 
requirement of most real machines that</FONT></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 153945px"><NOBR>objects of 
certain types must satisfy alignment restrictions (for <B><SPAN 
class=goohl2>example</SPAN></B>, integers often must be located at 
even</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 153965px"><NOBR>addresses)? 
Second, what declarations can cope with the fact that an allocator must 
necessarily return different</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 153985px"><NOBR>kinds of 
pointers?</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 154024px"><NOBR>Alignment 
requirements can generally be satisfied easily, at the cost of some wasted 
space, by ensuring that</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 154044px"><NOBR>the allocator 
always returns a pointer that meets <I>all </I>alignment restrictions. The <FONT 
face=Courier>alloc </FONT>of <A 
href="#86"></A><FONT 
face=Times color=#0000ff><A 
href="#86">Chapter 
5 </A></FONT>does not</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 154064px"><NOBR>guarantee any 
particular alignment, so we will use the standard library function <FONT 
face=Courier>malloc</FONT>, which does. In</NOBR></DIV></SPAN></FONT><FONT 
face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 154084px"><NOBR><A 
href="#153">Chapter 
8 </A><FONT face=Times color=#000000>we will show one way to implement 
</FONT><FONT face=Courier color=#000000>malloc</FONT><FONT face=Times 
color=#000000>.</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 154123px"><NOBR>The question 
of the type declaration for a function like <FONT face=Courier>malloc </FONT>is 
a vexing one for any language that takes its</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 154143px"><NOBR>type−checking 
seriously. In C, the proper method is to declare that <FONT face=Courier>malloc 
</FONT>returns a pointer to <FONT face=Courier>void</FONT>, then</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 154163px"><NOBR>explicitly 
coerce the pointer into the desired type with a cast. <FONT face=Courier>malloc 
</FONT>and related routines are declared in the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 154183px"><NOBR>standard 
header <FONT face=Courier>&lt;stdlib.h&gt;</FONT>. Thus <FONT 
face=Courier>talloc </FONT>can be written as</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 154222px"><NOBR>#include 
&lt;stdlib.h&gt;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 154255px"><NOBR>/* talloc: 
make a tnode */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 154271px"><NOBR>struct tnode 
*talloc(void)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 154288px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 154304px"><NOBR>return (struct 
tnode *) malloc(sizeof(struct tnode));</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 154321px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 154358px"><NOBR>strdup <FONT 
face=Times>merely copies the string given by its argument into a safe place, 
obtained by a call on </FONT>malloc<FONT 
face=Times>:</FONT></NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 154397px"><NOBR>char 
*strdup(char *s) /* make a duplicate of s */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 154413px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 154430px"><NOBR>char 
*p;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 154463px"><NOBR>p = (char *) 
malloc(strlen(s)+1); /* +1 for '\0' */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 154479px"><NOBR>if (p != 
NULL)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 154496px"><NOBR>strcpy(p, 
s);</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 154512px"><NOBR>return 
p;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 153469px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 154549px"><NOBR>6.5 
Self−referential Structures</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 154549px"><NOBR>130</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 154615px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=131><B>Page 131</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 154707px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 154744px"><NOBR>malloc <FONT 
face=Times>returns </FONT>NULL <FONT face=Times>if no space is available; 
</FONT>strdup <FONT face=Times>passes that value on, leaving error−handling to 
its</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 154763px"><NOBR>caller.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 154803px"><NOBR>Storage 
obtained by calling <FONT face=Courier>malloc </FONT>may be freed for re−use by 
calling <FONT face=Courier>free</FONT>; see <FONT face=Times color=#0000ff><A 
href="#153">Chapters 
8 </A></FONT>and <FONT face=Times color=#0000ff><A 
href="#138">7</A></FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 154843px"><NOBR><I><B>Exercise 
6−2. </B></I>Write a program that reads a C program and prints in alphabetical 
order each group of variable</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 154862px"><NOBR>names that are 
identical in the first 6 characters, but different somewhere thereafter. Don't 
count words within</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 154882px"><NOBR>strings and 
comments. Make 6 a parameter that can be set from the command line.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 154922px"><NOBR><I><B>Exercise 
6−3. </B></I>Write a cross−referencer that prints a list of all words in a 
document, and for each word, a list</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 154942px"><NOBR>of the line 
numbers on which it occurs. Remove noise words like ``the,'' ``and,'' and so 
on.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 154981px"><NOBR><I><B>Exercise 
6−4. </B></I>Write a program that prints the distinct words in its input sorted 
into decreasing order of</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 155001px"><NOBR>frequency of 
occurrence. Precede each word by its count.</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=4><SPAN style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 155042px"><NOBR><B>6.6 Table 
Lookup</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 155089px"><NOBR>In this 
section we will write the innards of a table−lookup package, to illustrate more 
aspects of structures.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 155109px"><NOBR>This code is 
typical of what might be found in the symbol table management routines of a 
macro processor or</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 155128px"><NOBR>a compiler. 
For <B><SPAN class=goohl2>example</SPAN></B>, consider the <FONT 
face=Courier>#define </FONT>statement. When a line 
like</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 155168px"><NOBR>#define IN 
1</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 155204px"><NOBR>is 
encountered, the name <FONT face=Courier>IN </FONT>and the replacement text 
<FONT face=Courier>1 </FONT>are stored in a table. Later, when the name <FONT 
face=Courier>IN</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 155224px"><NOBR>appears in a 
statement like</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 155264px"><NOBR>state = 
IN;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 155300px"><NOBR>it must be 
replaced by <FONT face=Courier>1</FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 155340px"><NOBR>There are two 
routines that manipulate the names and replacement texts. <FONT 
face=Courier>install(s,t) </FONT>records the 
name</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 155360px"><NOBR>s <FONT 
face=Times>and the replacement text </FONT>t <FONT face=Times>in a table; 
</FONT>s <FONT face=Times>and </FONT>t <FONT face=Times>are just character 
strings. </FONT>lookup(s) <FONT face=Times>searches for </FONT>s <FONT 
face=Times>in the</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 155379px"><NOBR>table, and 
returns a pointer to the place where it was found, or <FONT face=Courier>NULL 
</FONT>if it wasn't there.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 155419px"><NOBR>The algorithm 
is a hash−search − the incoming name is converted into a small non−negative 
integer, which is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 155439px"><NOBR>then used to 
index into an array of pointers. An array element points to the beginning of a 
linked list of blocks</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 155458px"><NOBR>describing 
names that have that hash value. It is <FONT face=Courier>NULL </FONT>if no 
names have hashed to that value.</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 154657px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 155737px"><NOBR>6.6 Table 
Lookup</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 155737px"><NOBR>131</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 155803px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=132><B>Page 132</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 155895px"><NOBR>A block in the 
list is a structure containing pointers to the name, the replacement text, and 
the next block in</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 155915px"><NOBR>the list. A 
null next−pointer marks the end of the list.</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 155954px"><NOBR>struct nlist { 
/* table entry: */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 155971px"><NOBR>struct nlist 
*next; /* next entry in chain */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 155987px"><NOBR>char *name; /* 
defined name */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 156004px"><NOBR>char *defn; /* 
replacement text */</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 156020px"><NOBR>};</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 156057px"><NOBR>The pointer 
array is just</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 156096px"><NOBR>#define 
HASHSIZE 101</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 156129px"><NOBR>static struct 
nlist *hashtab[HASHSIZE]; /* pointer table */</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 156166px"><NOBR>The hashing 
function, which is used by both <FONT face=Courier>lookup </FONT>and <FONT 
face=Courier>install</FONT>, adds each character value in the 
string</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 156186px"><NOBR>to a scrambled 
combination of the previous ones and returns the remainder modulo the array 
size. This is not</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 156205px"><NOBR>the best 
possible hash function, but it is short and 
effective.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 156245px"><NOBR>/* hash: form 
hash value for string s */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 156261px"><NOBR>unsigned 
hash(char *s)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 156278px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 156294px"><NOBR>unsigned 
hashval;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 156327px"><NOBR>for (hashval = 
0; *s != '\0'; s++)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 156344px"><NOBR>hashval = *s + 
31 * hashval;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 156360px"><NOBR>return hashval 
% HASHSIZE;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 156377px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 156413px"><NOBR>Unsigned 
arithmetic ensures that the hash value is non−negative.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 156453px"><NOBR>The hashing 
process produces a starting index in the array <FONT 
face=Courier>hashtab</FONT>; if the string is to be found anywhere, 
it</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 156473px"><NOBR>will be in the 
list of blocks beginning there. The search is performed by <FONT 
face=Courier>lookup</FONT>. If <FONT face=Courier>lookup </FONT>finds the 
entry</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 156493px"><NOBR>already 
present, it returns a pointer to it; if not, it returns <FONT 
face=Courier>NULL</FONT>.</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 156532px"><NOBR>/* lookup: 
look for s in hashtab */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 156548px"><NOBR>struct nlist 
*lookup(char *s)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 156565px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 156581px"><NOBR>struct nlist 
*np;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 156614px"><NOBR>for (np = 
hashtab[hash(s)]; np != NULL; np = np−&gt;next)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 156631px"><NOBR>if (strcmp(s, 
np−&gt;name) == 0)</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 156647px"><NOBR>return np; /* 
found */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 156664px"><NOBR>return NULL; 
/* not found */</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 156680px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 156717px"><NOBR>The <FONT 
face=Courier>for </FONT>loop in <FONT face=Courier>lookup </FONT>is the standard 
idiom for walking along a linked list:</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 156756px"><NOBR>for (ptr = 
head; ptr != NULL; ptr = ptr−&gt;next)</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 156773px"><NOBR>...</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 156810px"><NOBR>install <FONT 
face=Times>uses </FONT>lookup <FONT face=Times>to determine whether the name 
being installed is already present; if so, the 
new</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 156829px"><NOBR>definition 
will supersede the old one. Otherwise, a new entry is created. <FONT 
face=Courier>install </FONT>returns <FONT face=Courier>NULL </FONT>if for 
any</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 156849px"><NOBR>reason there 
is no room for a new entry.</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 156888px"><NOBR>struct nlist 
*lookup(char *);</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 155845px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 156925px"><NOBR>6.6 Table 
Lookup</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 156925px"><NOBR>132</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 156991px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=133><B>Page 133</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 157083px"><NOBR>char 
*strdup(char *);</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 157116px"><NOBR>/* install: 
put (name, defn) in hashtab */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 157133px"><NOBR>struct nlist 
*install(char *name, char *defn)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 157149px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 157166px"><NOBR>struct nlist 
*np;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 157182px"><NOBR>unsigned 
hashval;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 157215px"><NOBR>if ((np = 
lookup(name)) == NULL) { /* not found */</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 157232px"><NOBR>np = (struct 
nlist *) malloc(sizeof(*np));</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 157248px"><NOBR>if (np == NULL 
|| (np−&gt;name = strdup(name)) == NULL)</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 157265px"><NOBR>return 
NULL;</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 157281px"><NOBR>hashval = 
hash(name);</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 157298px"><NOBR>np−&gt;next = 
hashtab[hashval];</NOBR></DIV>
<DIV 
style="LEFT: 199px; POSITION: absolute; TOP: 157314px"><NOBR>hashtab[hashval] = 
np;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 157331px"><NOBR>} else /* 
already there */</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 157347px"><NOBR>free((void *) 
np−&gt;defn); /*free previous defn */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 157364px"><NOBR>if 
((np−&gt;defn = strdup(defn)) == NULL)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 157380px"><NOBR>return 
NULL;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 157397px"><NOBR>return 
np;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 157413px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 157450px"><NOBR><I><B>Exercise 
6−5. </B></I>Write a function <FONT face=Courier>undef </FONT>that will remove a 
name and definition from the table maintained by</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 157470px"><NOBR>lookup <FONT 
face=Times>and </FONT>install<FONT 
face=Times>.</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 157509px"><NOBR><I><B>Exercise 
6−6. </B></I>Implement a simple version of the <FONT face=Courier>#define 
</FONT>processor (i.e., no arguments) suitable for use</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 157529px"><NOBR>with C 
programs, based on the routines of this section. You may also find <FONT 
face=Courier>getch </FONT>and <FONT face=Courier>ungetch 
</FONT>helpful.</NOBR></DIV></SPAN></FONT><FONT face=Times size=4><SPAN 
style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 157570px"><NOBR><B>6.7 
Typedef</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 157617px"><NOBR>C provides a 
facility called <FONT face=Courier>typedef </FONT>for creating new data type 
names. For <B><SPAN class=goohl2>example</SPAN></B>, the 
declaration</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 157656px"><NOBR>typedef int 
Length;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 157693px"><NOBR>makes the name 
<FONT face=Courier>Length </FONT>a synonym for <FONT face=Courier>int</FONT>. 
The type <FONT face=Courier>Length </FONT>can be used in declarations, casts, 
etc., in</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 157712px"><NOBR>exactly the 
same ways that the <FONT face=Courier>int </FONT>type can 
be:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 157752px"><NOBR>Length len, 
maxlen;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 157768px"><NOBR>Length 
*lengths[];</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 157805px"><NOBR>Similarly, the 
declaration</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 157844px"><NOBR>typedef char 
*String;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 157881px"><NOBR>makes <FONT 
face=Courier>String </FONT>a synonym for <FONT face=Courier>char * </FONT>or 
character pointer, which may then be used in declarations and</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 157900px"><NOBR>casts:</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 157940px"><NOBR>String p, 
lineptr[MAXLINES], alloc(int);</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 157956px"><NOBR>int 
strcmp(String, String);</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 157973px"><NOBR>p = (String) 
malloc(100);</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 158009px"><NOBR>Notice that 
the type being declared in a <FONT face=Courier>typedef </FONT>appears in the 
position of a variable name, not right after</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 158029px"><NOBR>the word <FONT 
face=Courier>typedef</FONT>. Syntactically, <FONT face=Courier>typedef </FONT>is 
like the storage classes <FONT face=Courier>extern</FONT>, <FONT 
face=Courier>static</FONT>, etc. We have</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 158049px"><NOBR>used 
capitalized names for <FONT face=Courier>typedef</FONT>s, to make them stand 
out.</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 157033px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 158113px"><NOBR>6.7 
Typedef</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 158113px"><NOBR>133</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 158179px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=134><B>Page 134</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 158271px"><NOBR>As a more 
complicated <B><SPAN class=goohl2>example</SPAN></B>, we could make <FONT 
face=Courier>typedef</FONT>s for the tree nodes shown earlier in this 
chapter:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 158311px"><NOBR>typedef struct 
tnode *Treeptr;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 158344px"><NOBR>typedef struct 
tnode { /* the tree node: */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 158360px"><NOBR>char *word; /* 
points to the text */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 158377px"><NOBR>int count; /* 
number of occurrences */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 158393px"><NOBR>struct tnode 
*left; /* left child */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 158410px"><NOBR>struct tnode 
*right; /* right child */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 158426px"><NOBR>} 
Treenode;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 158463px"><NOBR>This creates 
two new type keywords called <FONT face=Courier>Treenode </FONT>(a structure) 
and <FONT face=Courier>Treeptr </FONT>(a pointer to the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 158482px"><NOBR>structure). 
Then the routine <FONT face=Courier>talloc </FONT>could 
become</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 158522px"><NOBR>Treeptr 
talloc(void)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 158538px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 158555px"><NOBR>return 
(Treeptr) malloc(sizeof(Treenode));</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 158571px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 158608px"><NOBR>It must be 
emphasized that a <FONT face=Courier>typedef </FONT>declaration does not create 
a new type in any sense; it merely adds a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 158628px"><NOBR>new name for 
some existing type. Nor are there any new semantics: variables declared this way 
have exactly</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 158647px"><NOBR>the same 
properties as variables whose declarations are spelled out explicitly. In 
effect, <FONT face=Courier>typedef </FONT>is 
like</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 158668px"><NOBR>#define<FONT 
face=Times>, except that since it is interpreted by the compiler, it can cope 
with textual substitutions that are</FONT></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 158687px"><NOBR>beyond the 
capabilities of the preprocessor. For <B><SPAN 
class=goohl2>example</SPAN></B>,</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 158726px"><NOBR>typedef int 
(*PFI)(char *, char *);</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 158763px"><NOBR>creates the 
type <FONT face=Courier>PFI</FONT>, for ``pointer to function (of two <FONT 
face=Courier>char * </FONT>arguments) returning <FONT face=Courier>int</FONT>,'' 
which can be used</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 158783px"><NOBR>in contexts 
like</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 158822px"><NOBR>PFI strcmp, 
numcmp;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 158859px"><NOBR>in the sort 
program of <FONT face=Times color=#0000ff><A 
href="#86">Chapter 
5</A></FONT><A 
href="#86"></A>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 158898px"><NOBR>Besides purely 
aesthetic issues, there are two main reasons for using <FONT 
face=Courier>typedef</FONT>s. The first is to parameterize a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 158918px"><NOBR>program 
against portability problems. If <FONT face=Courier>typedef</FONT>s are used for 
data types that may be machine−dependent,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 158938px"><NOBR>only the <FONT 
face=Courier>typedef</FONT>s need change when the program is moved. One common 
situation is to use <FONT face=Courier>typedef</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 158958px"><NOBR>names for 
various integer quantities, then make an appropriate set of choices of <FONT 
face=Courier>short</FONT>, <FONT face=Courier>int</FONT>, and <FONT 
face=Courier>long </FONT>for</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 158977px"><NOBR>each host 
machine. Types like <FONT face=Courier>size_t </FONT>and <FONT 
face=Courier>ptrdiff_t </FONT>from the standard library are 
examples.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 159017px"><NOBR>The second 
purpose of <FONT face=Courier>typedef</FONT>s is to provide better documentation 
for a program − a type called <FONT face=Courier>Treeptr</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 159037px"><NOBR>may be easier 
to understand than one declared only as a pointer to a complicated 
structure.</NOBR></DIV></SPAN></FONT><FONT face=Times size=4><SPAN 
style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 159078px"><NOBR><B>6.8 
Unions</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 159125px"><NOBR>A <I>union 
</I>is a variable that may hold (at different times) objects of different types 
and sizes, with the compiler</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 159145px"><NOBR>keeping track 
of size and alignment requirements. Unions provide a way to manipulate different 
kinds of data</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 159164px"><NOBR>in a single 
area of storage, without embedding any machine−dependent information in the 
program. They are</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 159184px"><NOBR>analogous to 
variant records in pascal.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 159224px"><NOBR>As an <B><SPAN 
class=goohl2>example</SPAN></B> such as might be found in a compiler symbol 
table manager, suppose that a constant may be an</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 159244px"><NOBR>int<FONT 
face=Times>, a </FONT>float<FONT face=Times>, or a character pointer. The value 
of a particular constant must be stored in a variable of 
the</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 159263px"><NOBR>proper type, 
yet it is most convenient for table management if the value occupies the same 
amount of storage</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 158221px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 159301px"><NOBR>6.8 
Unions</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 159301px"><NOBR>134</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 159367px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=135><B>Page 135</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 159459px"><NOBR>and is stored 
in the same place regardless of its type. This is the purpose of a union − a 
single variable that can</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 159479px"><NOBR>legitimately 
hold any of one of several types. The syntax is based on 
structures:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 159518px"><NOBR>union u_tag 
{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 159535px"><NOBR>int 
ival;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 159551px"><NOBR>float 
fval;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 159568px"><NOBR>char 
*sval;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 159584px"><NOBR>} 
u;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 159621px"><NOBR>The variable 
<FONT face=Courier>u </FONT>will be large enough to hold the largest of the 
three types; the specific size is</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 159641px"><NOBR>implementation−dependent. 
Any of these types may be assigned to <FONT face=Courier>u </FONT>and then used 
in expressions, so long as</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 159661px"><NOBR>the usage is 
consistent: the type retrieved must be the type most recently stored. It is the 
programmer's</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 159680px"><NOBR>responsibility 
to keep track of which type is currently stored in a union; the results 
are</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 159700px"><NOBR>implementation−dependent 
if something is stored as one type and extracted as another.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 159740px"><NOBR>Syntactically, 
members of a union are accessed as</NOBR></DIV>
<DIV 
style="LEFT: 128px; POSITION: absolute; TOP: 159779px"><NOBR><I>union−name</I><FONT 
face=Courier>.</FONT><I>member</I></NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 159819px"><NOBR>or</NOBR></DIV>
<DIV 
style="LEFT: 128px; POSITION: absolute; TOP: 159859px"><NOBR><I>union−pointer</I><FONT 
face=Courier>−&gt;</FONT><I>member</I></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 159898px"><NOBR>just as for 
structures. If the variable <FONT face=Courier>utype </FONT>is used to keep 
track of the current type stored in <FONT face=Courier>u</FONT>, then 
one</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 159918px"><NOBR>might see code 
such as</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 159957px"><NOBR>if (utype == 
INT)</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 159974px"><NOBR>printf("%d\n", 
u.ival);</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 159990px"><NOBR>if (utype == 
FLOAT)</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 160007px"><NOBR>printf("%f\n", 
u.fval);</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 160023px"><NOBR>if (utype == 
STRING)</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 160040px"><NOBR>printf("%s\n", 
u.sval);</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 160056px"><NOBR>else</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 160073px"><NOBR>printf("bad 
type %d in utype\n", utype);</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 160109px"><NOBR>Unions may 
occur within structures and arrays, and vice versa. The notation for accessing a 
member of a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 160129px"><NOBR>union in a 
structure (or vice versa) is identical to that for nested structures. For 
<B><SPAN class=goohl2>example</SPAN></B>, in the structure array</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 160149px"><NOBR>defined 
by</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 160188px"><NOBR>struct 
{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 160205px"><NOBR>char 
*name;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 160221px"><NOBR>int 
flags;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 160238px"><NOBR>int 
utype;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 160254px"><NOBR>union 
{</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 160271px"><NOBR>int 
ival;</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 160287px"><NOBR>float 
fval;</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 160304px"><NOBR>char 
*sval;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 160320px"><NOBR>} 
u;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 160337px"><NOBR>} 
symtab[NSYM];</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 160373px"><NOBR>the member 
<FONT face=Courier>ival </FONT>is referred to as</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 160413px"><NOBR>symtab[i].u.ival</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 160449px"><NOBR>and the first 
character of the string <FONT face=Courier>sval </FONT>by either of</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 159409px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 160489px"><NOBR>6.8 
Unions</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 160489px"><NOBR>135</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 160555px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=136><B>Page 136</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 160647px"><NOBR>*symtab[i].u.sval</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 160680px"><NOBR>symtab[i].u.sval[0]</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 160717px"><NOBR>In effect, a 
union is a structure in which all members have offset zero from the base, the 
structure is big</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 160736px"><NOBR>enough to hold 
the ``widest'' member, and the alignment is appropriate for all of the types in 
the union. The</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 160756px"><NOBR>same 
operations are permitted on unions as on structures: assignment to or copying as 
a unit, taking the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 160776px"><NOBR>address, and 
accessing a member.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 160816px"><NOBR>A union may 
only be initialized with a value of the type of its first member; thus union 
<FONT face=Courier>u </FONT>described above can</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 160835px"><NOBR>only be 
initialized with an integer value.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 160875px"><NOBR>The storage 
allocator in <A 
href="#153"></A><FONT 
face=Times color=#0000ff><A 
href="#153">Chapter 
8 </A></FONT>shows how a union can be used to force a variable to be aligned on 
a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 160895px"><NOBR>particular 
kind of storage boundary.</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=4><SPAN style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 160936px"><NOBR><B>6.9 
Bit−fields</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 160983px"><NOBR>When storage 
space is at a premium, it may be necessary to pack several objects into a single 
machine word;</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 161002px"><NOBR>one common use 
is a set of single−bit flags in applications like compiler symbol tables. 
Externally−imposed</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 161022px"><NOBR>data formats, 
such as interfaces to hardware devices, also often require the ability to get at 
pieces of a word.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 161062px"><NOBR>Imagine a 
fragment of a compiler that manipulates a symbol table. Each identifier in a 
program has certain</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 161082px"><NOBR>information 
associated with it, for <B><SPAN class=goohl2>example</SPAN></B>, whether or not 
it is a keyword, whether or not it is external and/or</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 161101px"><NOBR>static, and so 
on. The most compact way to encode such information is a set of one−bit flags in 
a single <FONT face=Courier>char</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 161121px"><NOBR>or <FONT 
face=Courier>int</FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 161161px"><NOBR>The usual way 
this is done is to define a set of ``masks'' corresponding to the relevant bit 
positions, as in</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 161200px"><NOBR>#define 
KEYWORD 01</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 161217px"><NOBR>#define 
EXTRENAL 02</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 161233px"><NOBR>#define STATIC 
04</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 161270px"><NOBR>or</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 161309px"><NOBR>enum { KEYWORD 
= 01, EXTERNAL = 02, STATIC = 04 };</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 161346px"><NOBR>The numbers 
must be powers of two. Then accessing the bits becomes a matter of 
``bit−fiddling'' with the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 161365px"><NOBR>shifting, 
masking, and complementing operators that were described in <A 
href="#36"></A><FONT 
face=Times color=#0000ff><A 
href="#36">Chapter 
2</A></FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 161405px"><NOBR>Certain idioms 
appear frequently:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 161444px"><NOBR>flags |= 
EXTERNAL | STATIC;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 161481px"><NOBR>turns on the 
<FONT face=Courier>EXTERNAL </FONT>and <FONT face=Courier>STATIC </FONT>bits in 
<FONT face=Courier>flags</FONT>, while</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 161520px"><NOBR>flags 
=(EXTERNAL | STATIC);</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 161557px"><NOBR>turns them 
off, and</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 161596px"><NOBR>if ((flags 
(EXTERNAL | STATIC)) == 0) ...</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 161633px"><NOBR>is true if 
both bits are off.</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 160597px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 161677px"><NOBR>6.9 
Bit−fields</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 161677px"><NOBR>136</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 161743px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=137><B>Page 137</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 161835px"><NOBR>Although these 
idioms are readily mastered, as an alternative C offers the capability of 
defining and accessing</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 161855px"><NOBR>fields within 
a word directly rather than by bitwise logical operators. A <I>bit−field</I>, or 
<I>field </I>for short, is a set of</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 161875px"><NOBR>adjacent bits 
within a single implementation−defined storage unit that we will call a 
``word.'' For <B><SPAN class=goohl2>example</SPAN></B>, the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 161895px"><NOBR>symbol table 
<FONT face=Courier>#define</FONT>s above could be replaced by the definition of 
three fields:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 161934px"><NOBR>struct 
{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 161951px"><NOBR>unsigned int 
is_keyword : 1;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 161967px"><NOBR>unsigned int 
is_extern : 1;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 161984px"><NOBR>unsigned int 
is_static : 1;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 162000px"><NOBR>} 
flags;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 162037px"><NOBR>This defines a 
variable table called <FONT face=Courier>flags </FONT>that contains three 1−bit 
fields. The number following the colon</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 162056px"><NOBR>represents the 
field width in bits. The fields are declared <FONT face=Courier>unsigned int 
</FONT>to ensure that they are unsigned</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 162076px"><NOBR>quantities.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 162116px"><NOBR>Individual 
fields are referenced in the same way as other structure members: <FONT 
face=Courier>flags.is_keyword</FONT>,</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 162136px"><NOBR>flags.is_extern<FONT 
face=Times>, etc. Fields behave like small integers, and may participate in 
arithmetic expressions</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 162155px"><NOBR>just like 
other integers. Thus the previous examples may be written more naturally 
as</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 162195px"><NOBR>flags.is_extern = 
flags.is_static = 1;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 162231px"><NOBR>to turn the 
bits on;</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 162271px"><NOBR>flags.is_extern = 
flags.is_static = 0;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 162307px"><NOBR>to turn them 
off; and</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 162347px"><NOBR>if 
(flags.is_extern == 0 &amp;flags.is_static == 0)</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 162363px"><NOBR>...</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 162400px"><NOBR>to test 
them.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 162439px"><NOBR>Almost 
everything about fields is implementation−dependent. Whether a field may overlap 
a word boundary</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 162459px"><NOBR>is 
implementation−defined. Fields need not be names; unnamed fields (a colon and 
width only) are used for</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 162479px"><NOBR>padding. The 
special width 0 may be used to force alignment at the next word 
boundary.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 162518px"><NOBR>Fields are 
assigned left to right on some machines and right to left on others. This means 
that although fields</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 162538px"><NOBR>are useful for 
maintaining internally−defined data structures, the question of which end comes 
first has to be</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 162558px"><NOBR>carefully 
considered when picking apart externally−defined data; programs that depend on 
such things are not</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 162578px"><NOBR>portable. 
Fields may be declared only as <FONT face=Courier>int</FONT>s; for portability, 
specify <FONT face=Courier>signed </FONT>or <FONT face=Courier>unsigned 
</FONT>explicitly.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 162598px"><NOBR>They are not 
arrays and they do not have addresses, so the <FONT face=Courier>&amp; 
</FONT>operator cannot be applied on them.</NOBR></DIV></SPAN></FONT><FONT 
face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 320px; POSITION: absolute; TOP: 162640px"><NOBR><A 
href="#86">Back 
to Chapter 5 </A><FONT face=Times color=#000000>−− </FONT><A 
href="#1">Index 
</A><FONT face=Times color=#000000>−− </FONT><A 
href="#138">Chapter 
7</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 161785px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 162865px"><NOBR>6.9 
Bit−fields</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 162865px"><NOBR>137</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 162931px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=138><B>Page 138</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 320px; POSITION: absolute; TOP: 163046px"><NOBR><A 
href="#117">Back 
to Chapter 6 </A><FONT face=Times color=#000000>−− </FONT><A 
href="#1">Index 
</A><FONT face=Times color=#000000>−− </FONT><A 
href="#153">Chapter 
8</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=4><SPAN 
style="FONT-SIZE: 26px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 163091px"><NOBR><B>Chapter 7 − 
Input and Output</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 163143px"><NOBR>Input and 
output are not part of the C language itself, so we have not emphasized them in 
our presentation</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 163162px"><NOBR>thus far. 
Nonetheless, programs interact with their environment in much more complicated 
ways than those</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 163182px"><NOBR>we have shown 
before. In this chapter we will describe the standard library, a set of 
functions that provide</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 163202px"><NOBR>input and 
output, string handling, storage management, mathematical routines, and a 
variety of other services</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 163222px"><NOBR>for C 
programs. We will concentrate on input and output</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 163261px"><NOBR>The ANSI 
standard defines these library functions precisely, so that they can exist in 
compatible form on any</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 163281px"><NOBR>system where C 
exists. Programs that confine their system interactions to facilities provided 
by the standard</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 163301px"><NOBR>library can be 
moved from one system to another without change.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 163341px"><NOBR>The properties 
of library functions are specified in more than a dozen headers; we have already 
seen several of</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 163360px"><NOBR>these, 
including <FONT face=Courier>&lt;stdio.h&gt;</FONT>, <FONT 
face=Courier>&lt;string.h&gt;</FONT>, and <FONT 
face=Courier>&lt;ctype.h&gt;</FONT>. We will not present the entire library 
here,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 163380px"><NOBR>since we are 
more interested in writing C programs that use it. The library is described in 
detail in <FONT face=Times color=#0000ff><A 
href="#221">Appendix</A></FONT></NOBR></DIV></SPAN></FONT><FONT 
face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 163400px"><NOBR><A 
href="#221">B</A><FONT 
face=Times color=#000000>.</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=4><SPAN style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 163441px"><NOBR><B>7.1 
Standard Input and Output</B></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 163488px"><NOBR>As we said in 
<A 
href="#11"></A><FONT 
face=Times color=#0000ff><A 
href="#11">Chapter 
1</A></FONT>, the library implements a simple model of text input and output. A 
text stream</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 163508px"><NOBR>consists of a 
sequence of lines; each line ends with a newline character. If the system 
doesn't operate that way,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 163528px"><NOBR>the library 
does whatever necessary to make it appear as if it does. For instance, the 
library might convert</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 163547px"><NOBR>carriage 
return and linefeed to newline on input and back again on output.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 163587px"><NOBR>The simplest 
input mechanism is to read one character at a time from the <I>standard 
input</I>, normally the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 163607px"><NOBR>keyboard, with 
<FONT face=Courier>getchar</FONT>:</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 163646px"><NOBR>int 
getchar(void)</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 163684px"><NOBR>getchar <FONT 
face=Times>returns the next input character each time it is called, or 
</FONT>EOF <FONT face=Times>when it encounters end of file. 
The</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 163702px"><NOBR>symbolic 
constant <FONT face=Courier>EOF </FONT>is defined in <FONT 
face=Courier>&lt;stdio.h&gt;</FONT>. The value is typically −1, bus tests should 
be written in</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 163722px"><NOBR>terms of <FONT 
face=Courier>EOF </FONT>so as to be independent of the specific 
value.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 163762px"><NOBR>In many 
environments, a file may be substituted for the keyboard by using the &lt; 
convention for input</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 163782px"><NOBR>redirection: 
if a program <FONT face=Courier>prog </FONT>uses <FONT 
face=Courier>getchar</FONT>, then the command 
line</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 163821px"><NOBR>prog 
&lt;infile</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 163858px"><NOBR>causes <FONT 
face=Courier>prog </FONT>to read characters from <FONT face=Courier>infile 
</FONT>instead. The switching of the input is done in such a way 
that</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 163878px"><NOBR>prog <FONT 
face=Times>itself is oblivious to the change; in particular, the string 
``</FONT>&lt;infile<FONT face=Times>'' is not included in 
the</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 163897px"><NOBR>command−line 
arguments in <FONT face=Courier>argv</FONT>. Input switching is also invisible 
if the input comes from another program</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 163917px"><NOBR>via a pipe 
mechanism: on some systems, the command line</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 163956px"><NOBR>otherprog | 
prog</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 163993px"><NOBR>runs the two 
programs <FONT face=Courier>otherprog </FONT>and <FONT face=Courier>prog</FONT>, 
and pipes the standard output of <FONT face=Courier>otherprog </FONT>into 
the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 164013px"><NOBR>standard input 
for <FONT face=Courier>prog</FONT>.</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 162973px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 164053px"><NOBR>Chapter 7 − 
Input and Output</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 164053px"><NOBR>138</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 164119px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=139><B>Page 139</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 164211px"><NOBR>The 
function</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 164251px"><NOBR>int 
putchar(int)</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 164287px"><NOBR>is used for 
output: <FONT face=Courier>putchar(c) </FONT>puts the character <FONT 
face=Courier>c </FONT>on the <FONT face=Courier>standard output</FONT>, which is 
by default the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 164307px"><NOBR>screen. <FONT 
face=Courier>putchar </FONT>returns the character written, or <FONT 
face=Courier>EOF </FONT>is an error occurs. Again, output can usually 
be</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 164327px"><NOBR>directed to a 
file with &gt;<I>filename</I>: if <FONT face=Courier>prog </FONT>uses <FONT 
face=Courier>putchar</FONT>,</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 164366px"><NOBR>prog 
&gt;outfile</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 164403px"><NOBR>will write the 
standard output to <FONT face=Courier>outfile </FONT>instead. If pipes are 
supported,</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 164442px"><NOBR>prog | 
anotherprog</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 164479px"><NOBR>puts the 
standard output of <FONT face=Courier>prog </FONT>into the standard input of 
<FONT face=Courier>anotherprog</FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 164518px"><NOBR>Output 
produced by <FONT face=Courier>printf </FONT>also finds its way to the standard 
output. Calls to <FONT face=Courier>putchar </FONT>and <FONT face=Courier>printf 
</FONT>may</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 164538px"><NOBR>be interleaved 
− output happens in the order in which the calls are made.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 164578px"><NOBR>Each source 
file that refers to an input/output library function must contain the 
line</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 164617px"><NOBR>#include 
&lt;stdio.h&gt;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 164653px"><NOBR>before the 
first reference. When the name is bracketed by &lt; and &gt; a search is made 
for the header in a standard</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 164673px"><NOBR>set of places 
(for <B><SPAN class=goohl2>example</SPAN></B>, on UNIX systems, typically in the 
directory <FONT face=Courier>/usr/include</FONT>).</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 164713px"><NOBR>Many programs 
read only one input stream and write only one output stream; for such programs, 
input and</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 164733px"><NOBR>output with 
<FONT face=Courier>getchar</FONT>, <FONT face=Courier>putchar</FONT>, and <FONT 
face=Courier>printf </FONT>may be entirely adequate, and is certainly enough to 
get</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 164752px"><NOBR>started. This 
is particularly true if redirection is used to connect the output of one program 
to the input of the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 164772px"><NOBR>next. For 
<B><SPAN class=goohl2>example</SPAN></B>, consider the program <FONT 
face=Courier>lower</FONT>, which converts its input to lower 
case:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 164812px"><NOBR>#include 
&lt;stdio.h&gt;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 164828px"><NOBR>#include 
&lt;ctype.h&gt;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 164861px"><NOBR>main() /* 
lower: convert input to lower case*/</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 164878px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 164894px"><NOBR>int 
c</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 164927px"><NOBR>while ((c = 
getchar()) != EOF)</NOBR></DIV>
<DIV 
style="LEFT: 199px; POSITION: absolute; TOP: 164944px"><NOBR>putchar(tolower(c));</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 164960px"><NOBR>return 
0;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 164977px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 165013px"><NOBR>The function 
<FONT face=Courier>tolower </FONT>is defined in <FONT 
face=Courier>&lt;ctype.h&gt;</FONT>; it converts an upper case letter to lower 
case, and returns</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 165033px"><NOBR>other 
characters untouched. As we mentioned earlier, ``functions'' like <FONT 
face=Courier>getchar </FONT>and <FONT face=Courier>putchar 
</FONT>in</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 165054px"><NOBR>&lt;stdio.h&gt; 
<FONT face=Times>and </FONT>tolower <FONT face=Times>in </FONT>&lt;ctype.h&gt; 
<FONT face=Times>are often macros, thus avoiding the overhead of a function 
call</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 165073px"><NOBR>per character. 
We will show how this is done in <A 
href="#158"></A><FONT 
face=Times color=#0000ff><A 
href="#158">Section 
8.5</A></FONT><A 
href="#158"></A>. 
Regardless of how the <FONT face=Courier>&lt;ctype.h&gt; 
</FONT>functions</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 165092px"><NOBR>are 
implemented on a given machine, programs that use them are shielded from 
knowledge of the character</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 165112px"><NOBR>set.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 165152px"><NOBR><I><B>Exercise 
7−1. </B></I>Write a program that converts upper case to lower or lower case to 
upper, depending on the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 165172px"><NOBR>name it is 
invoked with, as found in <FONT face=Courier>argv[0]</FONT>.</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 164161px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 165241px"><NOBR>Chapter 7 − 
Input and Output</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 165241px"><NOBR>139</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 165307px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=140><B>Page 140</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=4><SPAN style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 165401px"><NOBR><B>7.2 
Formatted Output − printf</B></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 165448px"><NOBR>The output 
function <FONT face=Courier>printf </FONT>translates internal values to 
characters. We have used <FONT face=Courier>printf </FONT>informally 
in</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 165467px"><NOBR>previous 
chapters. The description here covers most typical uses but is not complete; for 
the full story, see</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff 
size=3><SPAN style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 165487px"><NOBR><A 
href="#221">Appendix 
B</A><FONT face=Times color=#000000>.</FONT></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 165527px"><NOBR>int 
printf(char *format, arg1, arg2, ...);</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 165564px"><NOBR>printf <FONT 
face=Times>converts, formats, and prints its arguments on the standard output 
under control of the </FONT>format<FONT face=Times>. 
It</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 165583px"><NOBR>returns the 
number of characters printed.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 165622px"><NOBR>The format 
string contains two types of objects: ordinary characters, which are copied to 
the output stream,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 165642px"><NOBR>and conversion 
specifications, each of which causes conversion and printing of the next 
successive argument</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 165662px"><NOBR>to <FONT 
face=Courier>printf</FONT>. Each conversion specification begins with a % and 
ends with a conversion character. Between</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 165682px"><NOBR>the % and the 
conversion character there may be, in order:</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 165721px"><NOBR>A minus sign, 
which specifies left adjustment of the converted 
argument.</NOBR></DIV></SPAN></FONT><FONT face=Symbol size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 165716px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 165741px"><NOBR>A number that 
specifies the minimum field width. The converted argument will be printed in a 
field at</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 165761px"><NOBR>least this 
wide. If necessary it will be padded on the left (or right, if left adjustment 
is called for) to</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 165781px"><NOBR>make up the 
field width.</NOBR></DIV></SPAN></FONT><FONT face=Symbol size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 165736px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 165801px"><NOBR>A period, 
which separates the field width from the 
precision.</NOBR></DIV></SPAN></FONT><FONT face=Symbol size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 165795px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 165820px"><NOBR>A number, the 
precision, that specifies the maximum number of characters to be printed from a 
string,</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 165840px"><NOBR>or the number 
of digits after the decimal point of a floating−point value, or the minimum 
number of</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 165860px"><NOBR>digits for an 
integer.</NOBR></DIV></SPAN></FONT><FONT face=Symbol size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 165815px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 165880px"><NOBR>An <FONT 
face=Courier>h </FONT>if the integer is to be printed as a <FONT 
face=Courier>short</FONT>, or <FONT face=Courier>l </FONT>(letter ell) if as a 
<FONT face=Courier>long</FONT>.</NOBR></DIV></SPAN></FONT><FONT face=Symbol 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 165874px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 165919px"><NOBR>Conversion 
characters are shown in Table 7.1. If the character after the % is not a 
conversion specification,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 165939px"><NOBR>the behavior 
is undefined.</NOBR></DIV>
<DIV style="LEFT: 357px; POSITION: absolute; TOP: 165979px"><NOBR><I><B>Table 
7.1 </B>Basic Printf Conversions</I></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 166018px"><NOBR>A width or 
precision may be specified as *, in which case the value is computed by 
converting the next</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 166038px"><NOBR>argument 
(which must be an <FONT face=Courier>int</FONT>). For <B><SPAN 
class=goohl2>example</SPAN></B>, to print at most <FONT face=Courier>max 
</FONT>characters from a string <FONT 
face=Courier>s</FONT>,</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 166078px"><NOBR>printf("%.*s", 
max, s);</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 166114px"><NOBR>Most of the 
format conversions have been illustrated in earlier chapters. One exception is 
the precision as it</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 166134px"><NOBR>relates to 
strings. The following table shows the effect of a variety of specifications in 
printing ``hello, world''</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 166154px"><NOBR>(12 
characters). We have put colons around each field so you can see it 
extent.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 166193px"><NOBR>:%s: :hello, 
world:</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 166210px"><NOBR>:%10s: :hello, 
world:</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 166226px"><NOBR>:%.10s: 
:hello, wor:</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 166243px"><NOBR>:%−10s: 
:hello, world:</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 166259px"><NOBR>:%.15s: 
:hello, world:</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 166276px"><NOBR>:%−15s: 
:hello, world :</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 166292px"><NOBR>:%15.10s: : 
hello, wor:</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 166309px"><NOBR>:%−15.10s: 
:hello, wor :</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 166345px"><NOBR>A warning: 
<FONT face=Courier>printf </FONT>uses its first argument to decide how many 
arguments follow and what their type is. It</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 166365px"><NOBR>will get 
confused, and you will get wrong answers, if there are not enough arguments of 
if they are the wrong</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 166385px"><NOBR>type. You 
should also be aware of the difference between these two calls:</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 165349px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 166429px"><NOBR>7.2 Formatted 
Output − printf</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 166429px"><NOBR>140</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 166495px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=141><B>Page 141</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 166587px"><NOBR>printf(s); /* 
FAILS if s contains % */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 166604px"><NOBR>printf("%s", 
s); /* SAFE */</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 166640px"><NOBR>The function 
<FONT face=Courier>sprintf </FONT>does the same conversions as <FONT 
face=Courier>printf </FONT>does, but stores the output in a 
string:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 166679px"><NOBR>int 
sprintf(char *string, char *format, arg1, arg2, 
...);</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 166717px"><NOBR>sprintf <FONT 
face=Times>formats the arguments in </FONT>arg1<FONT face=Times>, 
</FONT>arg2<FONT face=Times>, etc., according to </FONT>format <FONT 
face=Times>as before, but places the 
result</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 166736px"><NOBR>in <FONT 
face=Courier>string </FONT>instead of the standard output; <FONT 
face=Courier>string </FONT>must be big enough to receive the 
result.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 166775px"><NOBR><I><B>Exercise 
7−2. </B></I>Write a program that will print arbitrary input in a sensible way. 
As a minimum, it should print</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 166795px"><NOBR>non−graphic 
characters in octal or hexadecimal according to local custom, and break long 
text lines.</NOBR></DIV></SPAN></FONT><FONT face=Times size=4><SPAN 
style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 166836px"><NOBR><B>7.3 
Variable−length Argument Lists</B></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 166883px"><NOBR>This section 
contains an implementation of a minimal version of <FONT 
face=Courier>printf</FONT>, to show how to write a function</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 166903px"><NOBR>that processes 
a variable−length argument list in a portable way. Since we are mainly 
interested in the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 166923px"><NOBR>argument 
processing, <FONT face=Courier>minprintf </FONT>will process the format string 
and arguments but will call the real</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 166943px"><NOBR>printf <FONT 
face=Times>to do the format conversions.</FONT></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 166982px"><NOBR>The proper 
declaration for <FONT face=Courier>printf 
</FONT>is</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 167021px"><NOBR>int 
printf(char *fmt, ...)</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 167058px"><NOBR>where the 
declaration <FONT face=Courier>... </FONT>means that the number and types of 
these arguments may vary. The declaration</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 167079px"><NOBR>... <FONT 
face=Times>can only appear at the end of an argument list. Our </FONT>minprintf 
<FONT face=Times>is declared as</FONT></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 167117px"><NOBR>void 
minprintf(char *fmt, ...)</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 167154px"><NOBR>since we will 
not return the character count that <FONT face=Courier>printf 
</FONT>does.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 167193px"><NOBR>The tricky bit 
is how <FONT face=Courier>minprintf </FONT>walks along the argument list when 
the list doesn't even have a name. The</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 167213px"><NOBR>standard 
header <FONT face=Courier>&lt;stdarg.h&gt; </FONT>contains a set of macro 
definitions that define how to step through an</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 167233px"><NOBR>argument list. 
The implementation of this header will vary from machine to machine, but the 
interface it</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 167253px"><NOBR>presents is 
uniform.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 167292px"><NOBR>The type <FONT 
face=Courier>va_list </FONT>is used to declare a variable that will refer to 
each argument in turn; in <FONT face=Courier>minprintf</FONT>, this</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 167312px"><NOBR>variable is 
called <FONT face=Courier>ap</FONT>, for ``argument pointer.'' The macro <FONT 
face=Courier>va_start </FONT>initializes <FONT face=Courier>ap </FONT>to point 
to the first</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 167332px"><NOBR>unnamed 
argument. It must be called once before <FONT face=Courier>ap </FONT>is used. 
There must be at least one named argument; the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 167352px"><NOBR>final named 
argument is used by <FONT face=Courier>va_start </FONT>to get 
started.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 167391px"><NOBR>Each call of 
<FONT face=Courier>va_arg </FONT>returns one argument and steps <FONT 
face=Courier>ap </FONT>to the next; <FONT face=Courier>va_arg </FONT>uses a type 
name to determine</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 167411px"><NOBR>what type to 
return and how big a step to take. Finally, <FONT face=Courier>va_end 
</FONT>does whatever cleanup is necessary. It must</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 167431px"><NOBR>be called 
before the program returns.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 167470px"><NOBR>These 
properties form the basis of our simplified <FONT 
face=Courier>printf</FONT>:</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 167510px"><NOBR>#include 
&lt;stdarg.h&gt;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 167543px"><NOBR>/* minprintf: 
minimal printf with variable argument list */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 167559px"><NOBR>void 
minprintf(char *fmt, ...)</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 167576px"><NOBR>{</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 166537px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 167617px"><NOBR>7.3 
Variable−length Argument Lists</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 167617px"><NOBR>141</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 167683px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=142><B>Page 142</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 167775px"><NOBR>va_list ap; /* 
points to each unnamed arg in turn */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 167792px"><NOBR>char *p, 
*sval;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 167808px"><NOBR>int 
ival;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 167825px"><NOBR>double 
dval;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 167858px"><NOBR>va_start(ap, 
fmt); /* make ap point to 1st unnamed arg */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 167874px"><NOBR>for (p = fmt; 
*p; p++) {</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 167891px"><NOBR>if (*p != '%') 
{</NOBR></DIV>
<DIV 
style="LEFT: 232px; POSITION: absolute; TOP: 167907px"><NOBR>putchar(*p);</NOBR></DIV>
<DIV 
style="LEFT: 232px; POSITION: absolute; TOP: 167924px"><NOBR>continue;</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 167940px"><NOBR>}</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 167957px"><NOBR>switch (*++p) 
{</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 167973px"><NOBR>case 
'd':</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 167990px"><NOBR>ival = 
va_arg(ap, int);</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 168006px"><NOBR>printf("%d", 
ival);</NOBR></DIV>
<DIV 
style="LEFT: 232px; POSITION: absolute; TOP: 168023px"><NOBR>break;</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 168039px"><NOBR>case 
'f':</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 168056px"><NOBR>dval = 
va_arg(ap, double);</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 168072px"><NOBR>printf("%f", 
dval);</NOBR></DIV>
<DIV 
style="LEFT: 232px; POSITION: absolute; TOP: 168089px"><NOBR>break;</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 168105px"><NOBR>case 
's':</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 168122px"><NOBR>for (sval = 
va_arg(ap, char *); *sval; sval++)</NOBR></DIV>
<DIV 
style="LEFT: 265px; POSITION: absolute; TOP: 168138px"><NOBR>putchar(*sval);</NOBR></DIV>
<DIV 
style="LEFT: 232px; POSITION: absolute; TOP: 168155px"><NOBR>break;</NOBR></DIV>
<DIV 
style="LEFT: 199px; POSITION: absolute; TOP: 168171px"><NOBR>default:</NOBR></DIV>
<DIV 
style="LEFT: 232px; POSITION: absolute; TOP: 168188px"><NOBR>putchar(*p);</NOBR></DIV>
<DIV 
style="LEFT: 232px; POSITION: absolute; TOP: 168204px"><NOBR>break;</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 168221px"><NOBR>}</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 168237px"><NOBR>}</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 168254px"><NOBR>va_end(ap); /* 
clean up when done */</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 168270px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 168307px"><NOBR><I><B>Exercise 
7−3. </B></I>Revise <FONT face=Courier>minprintf </FONT>to handle more of the 
other facilities of <FONT 
face=Courier>printf</FONT>.</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=4><SPAN style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 168348px"><NOBR><B>7.4 
Formatted Input − Scanf</B></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 168394px"><NOBR>The function 
<FONT face=Courier>scanf </FONT>is the input analog of <FONT 
face=Courier>printf</FONT>, providing many of the same conversion facilities in 
the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 168414px"><NOBR>opposite 
direction.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 168454px"><NOBR>int scanf(char 
*format, ...)</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 168491px"><NOBR>scanf <FONT 
face=Times>reads characters from the standard input, interprets them according 
to the specification in </FONT>format<FONT 
face=Times>,</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 168510px"><NOBR>and stores the 
results through the remaining arguments. The format argument is described below; 
the other</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 168530px"><NOBR>arguments, 
<I>each of which must be a pointer</I>, indicate where the corresponding 
converted input should be</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 168550px"><NOBR>stored. As 
with <FONT face=Courier>printf</FONT>, this section is a summary of the most 
useful features, not an exhaustive list.</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 168590px"><NOBR>scanf <FONT 
face=Times>stops when it exhausts its format string, or when some input fails to 
match the control specification. It</FONT></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 168609px"><NOBR>returns as its 
value the number of successfully matched and assigned input items. This can be 
used to decide</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 168629px"><NOBR>how many items 
were found. On the end of file, <FONT face=Courier>EOF </FONT>is returned; note 
that this is different from 0, which</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 168649px"><NOBR>means that the 
next input character does not match the first specification in the format 
string. The next call to</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 168669px"><NOBR>scanf <FONT 
face=Times>resumes searching immediately after the last character already 
converted.</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 168708px"><NOBR>There is also 
a function <FONT face=Courier>sscanf </FONT>that reads from a string instead of 
the standard input:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 168747px"><NOBR>int 
sscanf(char *string, char *format, arg1, arg2, 
...)</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 167725px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 168805px"><NOBR>7.4 Formatted 
Input − Scanf</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 168805px"><NOBR>142</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 168871px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=143><B>Page 143</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 168963px"><NOBR>It scans the 
<FONT face=Courier>string </FONT>according to the format in <FONT 
face=Courier>format </FONT>and stores the resulting values through <FONT 
face=Courier>arg1</FONT>,</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 168984px"><NOBR>arg2<FONT 
face=Times>, etc. These arguments must be 
pointers.</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 169023px"><NOBR>The format 
string usually contains conversion specifications, which are used to control 
conversion of input.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 169042px"><NOBR>The format 
string may contain:</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 169082px"><NOBR>Blanks or 
tabs, which are not ignored.</NOBR></DIV></SPAN></FONT><FONT face=Symbol 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 169077px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 169102px"><NOBR>Ordinary 
characters (not %), which are expected to match the next non−white space 
character of the</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 169122px"><NOBR>input 
stream.</NOBR></DIV></SPAN></FONT><FONT face=Symbol size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 169096px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 169141px"><NOBR>Conversion 
specifications, consisting of the character <FONT face=Courier>%</FONT>, an 
optional assignment suppression character</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 169162px"><NOBR>*<FONT 
face=Times>, an optional number specifying a maximum field width, an optional 
</FONT>h<FONT face=Times>, </FONT>l <FONT face=Times>or </FONT>L <FONT 
face=Times>indicating the width</FONT></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 169181px"><NOBR>of the target, 
and a conversion character.</NOBR></DIV></SPAN></FONT><FONT face=Symbol 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 169136px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 169221px"><NOBR>A conversion 
specification directs the conversion of the next input field. Normally the 
result is places in the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 169240px"><NOBR>variable 
pointed to by the corresponding argument. If assignment suppression is indicated 
by the * character,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 169260px"><NOBR>however, the 
input field is skipped; no assignment is made. An input field is defined as a 
string of non−white</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 169280px"><NOBR>space 
characters; it extends either to the next white space character or until the 
field width, is specified, is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 169300px"><NOBR>exhausted. 
This implies that <FONT face=Courier>scanf </FONT>will read across boundaries to 
find its input, since newlines are white</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 169320px"><NOBR>space. (White 
space characters are blank, tab, newline, carriage return, vertical tab, and 
formfeed.)</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 169359px"><NOBR>The conversion 
character indicates the interpretation of the input field. The corresponding 
argument must be a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 169379px"><NOBR>pointer, as 
required by the call−by−value semantics of C. Conversion characters are shown in 
Table 7.2.</NOBR></DIV>
<DIV style="LEFT: 355px; POSITION: absolute; TOP: 169419px"><NOBR><I><B>Table 
7.2: </B>Basic Scanf Conversions</I></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 169458px"><NOBR>The conversion 
characters <FONT face=Courier>d</FONT>, <FONT face=Courier>i</FONT>, <FONT 
face=Courier>o</FONT>, <FONT face=Courier>u</FONT>, and <FONT face=Courier>x 
</FONT>may be preceded by <FONT face=Courier>h </FONT>to indicate that a pointer 
to <FONT face=Courier>short </FONT>rather</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 169478px"><NOBR>than <FONT 
face=Courier>int </FONT>appears in the argument list, or by <FONT face=Courier>l 
</FONT>(letter ell) to indicate that a pointer to <FONT face=Courier>long 
</FONT>appears in the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 169498px"><NOBR>argument 
list.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 169537px"><NOBR>As a first 
<B><SPAN class=goohl2>example</SPAN></B>, the rudimentary calculator of <FONT 
face=Times color=#0000ff><A 
href="#64">Chapter 
4 </A></FONT>can be written with <FONT face=Courier>scanf </FONT>to do the 
input</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 169557px"><NOBR>conversion:</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 169597px"><NOBR>#include 
&lt;stdio.h&gt;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 169630px"><NOBR>main() /* 
rudimentary calculator */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 169646px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 169663px"><NOBR>double sum, 
v;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 169696px"><NOBR>sum = 
0;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 169712px"><NOBR>while 
(scanf("%lf", == 1)</NOBR></DIV>
<DIV 
style="LEFT: 199px; POSITION: absolute; TOP: 169729px"><NOBR>printf("\t%.2f\n", 
sum += v);</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 169745px"><NOBR>return 
0;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 169762px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 169798px"><NOBR>Suppose we 
want to read input lines that contain dates of the 
form</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 169838px"><NOBR>25 Dec 
1988</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 169874px"><NOBR>The <FONT 
face=Courier>scanf </FONT>statement is</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 169913px"><NOBR>int day, 
year;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 169930px"><NOBR>char 
monthname[20];</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 168913px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 169993px"><NOBR>7.4 Formatted 
Input − Scanf</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 169993px"><NOBR>143</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 170059px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=144><B>Page 144</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 170151px"><NOBR>scanf("%d %s 
%d", monthname, </NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 170188px"><NOBR>No <FONT 
face=Courier>&amp; </FONT>is used with <FONT face=Courier>monthname</FONT>, 
since an array name is a pointer.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 170227px"><NOBR>Literal 
characters can appear in the <FONT face=Courier>scanf </FONT>format string; they 
must match the same characters in the input.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 170247px"><NOBR>So we could 
read dates of the form <FONT face=Courier>mm/dd/yy </FONT>with the <FONT 
face=Courier>scanf </FONT>statement:</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 170286px"><NOBR>int day, 
month, year;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 170319px"><NOBR>scanf("%d/%d/%d", 
</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 170357px"><NOBR>scanf <FONT 
face=Times>ignores blanks and tabs in its format string. Furthermore, it skips 
over white space (blanks, tabs,</FONT></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 170376px"><NOBR>newlines, 
etc.) as it looks for input values. To read input whose format is not fixed, it 
is often best to read a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 170395px"><NOBR>line at a 
time, then pick it apart with <FONT face=Courier>scanf</FONT>. For <B><SPAN 
class=goohl2>example</SPAN></B>, suppose we want to read lines that might 
contain a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 170415px"><NOBR>date in either 
of the forms above. Then we could write</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 170455px"><NOBR>while 
(getline(line, sizeof(line)) &gt; 0) {</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 170471px"><NOBR>if 
(sscanf(line, "%d %s %d", monthname, == 3)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 170488px"><NOBR>printf("valid: 
%s\n", line); /* 25 Dec 1988 form */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 170504px"><NOBR>else if 
(sscanf(line, "%d/%d/%d", == 3)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 170521px"><NOBR>printf("valid: 
%s\n", line); /* mm/dd/yy form */</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 170537px"><NOBR>else</NOBR></DIV>
<DIV 
style="LEFT: 199px; POSITION: absolute; TOP: 170554px"><NOBR>printf("invalid: 
%s\n", line); /* invalid form */</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 170570px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 170607px"><NOBR>Calls to <FONT 
face=Courier>scanf </FONT>can be mixed with calls to other input functions. The 
next call to any input function will begin</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 170626px"><NOBR>by reading the 
first character not read by <FONT face=Courier>scanf</FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 170666px"><NOBR>A final 
warning: the arguments to <FONT face=Courier>scanf </FONT>and <FONT 
face=Courier>sscanf </FONT><I>must </I>be pointers. By far the most common error 
is</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 170686px"><NOBR>writing</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 170725px"><NOBR>scanf("%d", 
n);</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 170762px"><NOBR>instead 
of</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 170801px"><NOBR>scanf("%d", 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 170838px"><NOBR>This error is 
not generally detected at compile time.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 170877px"><NOBR><I><B>Exercise 
7−4. </B></I>Write a private version of <FONT face=Courier>scanf 
</FONT>analogous to <FONT face=Courier>minprintf </FONT>from the previous 
section.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 170917px"><NOBR><I><B>Exercise 
5−5. </B></I>Rewrite the postfix calculator of <A 
href="#64"></A><FONT 
face=Times color=#0000ff><A 
href="#64">Chapter 
4 </A></FONT>to use <FONT face=Courier>scanf </FONT>and/or <FONT 
face=Courier>sscanf </FONT>to do the input and</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 170937px"><NOBR>number 
conversion.</NOBR></DIV></SPAN></FONT><FONT face=Times size=4><SPAN 
style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 170978px"><NOBR><B>7.5 File 
Access</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 171025px"><NOBR>The examples 
so far have all read the standard input and written the standard output, which 
are automatically</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 171044px"><NOBR>defined for a 
program by the local operating system.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 171084px"><NOBR>The next step 
is to write a program that accesses a file that is <I>not </I>already connected 
to the program. One</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 171104px"><NOBR>program that 
illustrates the need for such operations is <FONT face=Courier>cat</FONT>, which 
concatenates a set of named files into the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 171124px"><NOBR>standard 
output. <FONT face=Courier>cat </FONT>is used for printing files on the screen, 
and as a general−purpose input collector for</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 171143px"><NOBR>programs that 
do not have the capability of accessing files by name. For <B><SPAN 
class=goohl2>example</SPAN></B>, the command</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 170101px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 171181px"><NOBR>7.5 File 
Access</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 171181px"><NOBR>144</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 171247px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=145><B>Page 145</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 171339px"><NOBR>cat x.c 
y.c</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 171376px"><NOBR>prints the 
contents of the files <FONT face=Courier>x.c </FONT>and <FONT face=Courier>y.c 
</FONT>(and nothing else) on the standard output.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 171415px"><NOBR>The question 
is how to arrange for the named files to be read − that is, how to connect the 
external names that</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 171435px"><NOBR>a user thinks 
of to the statements that read the data.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 171475px"><NOBR>The rules are 
simple. Before it can be read or written, a file has to be <I>opened </I>by the 
library function <FONT 
face=Courier>fopen</FONT>.</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 171495px"><NOBR>fopen <FONT 
face=Times>takes an external name like </FONT>x.c <FONT face=Times>or 
</FONT>y.c<FONT face=Times>, does some housekeeping and negotiation with the 
operating</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 171514px"><NOBR>system 
(details of which needn't concern us), and returns a pointer to be used in 
subsequent reads or writes of</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 171534px"><NOBR>the 
file.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 171574px"><NOBR>This pointer, 
called the <I>file pointer</I>, points to a structure that contains information 
about the file, such as the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 171593px"><NOBR>location of a 
buffer, the current character position in the buffer, whether the file is being 
read or written, and</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 171613px"><NOBR>whether errors 
or end of file have occurred. Users don't need to know the details, because the 
definitions</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 171633px"><NOBR>obtained from 
<FONT face=Courier>&lt;stdio.h&gt; </FONT>include a structure declaration called 
<FONT face=Courier>FILE</FONT>. The only declaration needed for a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 171653px"><NOBR>file pointer 
is exemplified by</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 171692px"><NOBR>FILE 
*fp;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 171709px"><NOBR>FILE 
*fopen(char *name, char *mode);</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 171745px"><NOBR>This says that 
<FONT face=Courier>fp </FONT>is a pointer to a <FONT face=Courier>FILE</FONT>, 
and <FONT face=Courier>fopen </FONT>returns a pointer to a <FONT 
face=Courier>FILE</FONT>. Notice that <FONT face=Courier>FILE </FONT>is a 
type</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 171765px"><NOBR>name, like 
<FONT face=Courier>int</FONT>, not a structure tag; it is defined with a <FONT 
face=Courier>typedef</FONT>. (Details of how <FONT face=Courier>fopen </FONT>can 
be</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 171785px"><NOBR>implemented on 
the UNIX system are given in <A 
href="#158"></A><FONT 
face=Times color=#0000ff><A 
href="#158">Section 
8.5</A></FONT><A 
href="#158"></A>.)</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 171824px"><NOBR>The call to 
<FONT face=Courier>fopen </FONT>in a program is</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 171864px"><NOBR>fp = 
fopen(name, mode);</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 171900px"><NOBR>The first 
argument of <FONT face=Courier>fopen </FONT>is a character string containing the 
name of the file. The second argument is the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 171920px"><NOBR><I>mode</I>, 
also a character string, which indicates how one intends to use the file. 
Allowable modes include read</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 171940px"><NOBR>(<FONT 
face=Courier>"r"</FONT>), write (<FONT face=Courier>"w"</FONT>), and append 
(<FONT face=Courier>"a"</FONT>). Some systems distinguish between text and 
binary files; for the latter,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 171960px"><NOBR>a <FONT 
face=Courier>"b" </FONT>must be appended to the mode string.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 171999px"><NOBR>If a file that 
does not exist is opened for writing or appending, it is created if possible. 
Opening an existing file</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 172019px"><NOBR>for writing 
causes the old contents to be discarded, while opening for appending preserves 
them. Trying to</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 172039px"><NOBR>read a file 
that does not exist is an error, and there may be other causes of error as well, 
like trying to read a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 172059px"><NOBR>file when you 
don't have permission. If there is any error, <FONT face=Courier>fopen 
</FONT>will return <FONT face=Courier>NULL</FONT>. (The error can 
be</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 172078px"><NOBR>identified 
more precisely; see the discussion of error−handling functions at the end of 
<FONT face=Times color=#0000ff><A 
href="#221">Section 
1 in Appendix</A></FONT></NOBR></DIV></SPAN></FONT><FONT face=Times 
color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 172098px"><NOBR><A 
href="#221">B</A><FONT 
face=Times color=#000000>.)</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 172138px"><NOBR>The next thing 
needed is a way to read or write the file once it is open. <FONT 
face=Courier>getc </FONT>returns the next character from a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 172158px"><NOBR>file; it needs 
the file pointer to tell it which file.</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 172197px"><NOBR>int getc(FILE 
*fp)</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 172234px"><NOBR>getc <FONT 
face=Times>returns the next character from the stream referred to by 
</FONT>fp<FONT face=Times>; it returns </FONT>EOF <FONT face=Times>for end of 
file or error.</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 172274px"><NOBR>putc <FONT 
face=Times>is an output function:</FONT></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 172313px"><NOBR>int putc(int 
c, FILE *fp)</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 171289px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 172369px"><NOBR>7.5 File 
Access</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 172369px"><NOBR>145</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 172435px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=146><B>Page 146</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 172528px"><NOBR>putc <FONT 
face=Times>writes the character </FONT>c <FONT face=Times>to the file </FONT>fp 
<FONT face=Times>and returns the character written, or EOF if an error occurs. 
Like</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 172548px"><NOBR>getchar <FONT 
face=Times>and </FONT>putchar<FONT face=Times>, </FONT>getc <FONT face=Times>and 
</FONT>putc <FONT face=Times>may be macros instead of 
functions.</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 172587px"><NOBR>When a C 
program is started, the operating system environment is responsible for opening 
three files and</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 172606px"><NOBR>providing 
pointers for them. These files are the standard input, the standard output, and 
the standard error; the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 172626px"><NOBR>corresponding 
file pointers are called <FONT face=Courier>stdin</FONT>, <FONT 
face=Courier>stdout</FONT>, and <FONT face=Courier>stderr</FONT>, and are 
declared in <FONT face=Courier>&lt;stdio.h&gt;</FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 172646px"><NOBR>Normally <FONT 
face=Courier>stdin </FONT>is connected to the keyboard and <FONT 
face=Courier>stdout </FONT>and <FONT face=Courier>stderr </FONT>are connected to 
the screen, but</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 172667px"><NOBR>stdin <FONT 
face=Times>and </FONT>stdout <FONT face=Times>may be redirected to files or 
pipes as described in </FONT><FONT face=Times color=#0000ff><A 
href="#138">Section 
7.1</A></FONT><FONT face=Times>.</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 172706px"><NOBR>getchar <FONT 
face=Times>and </FONT>putchar <FONT face=Times>can be defined in terms of 
</FONT>getc<FONT face=Times>, </FONT>putc<FONT face=Times>, </FONT>stdin<FONT 
face=Times>, and </FONT>stdout <FONT face=Times>as 
follows:</FONT></NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 172745px"><NOBR>#define 
getchar() getc(stdin)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 172761px"><NOBR>#define 
putchar(c) putc((c), stdout)</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 172798px"><NOBR>For formatted 
input or output of files, the functions <FONT face=Courier>fscanf </FONT>and 
<FONT face=Courier>fprintf </FONT>may be used. These are identical</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 172818px"><NOBR>to <FONT 
face=Courier>scanf </FONT>and <FONT face=Courier>printf</FONT>, except that the 
first argument is a file pointer that specifies the file to be read 
or</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 172837px"><NOBR>written; the 
format string is the second argument.</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 172877px"><NOBR>int 
fscanf(FILE *fp, char *format, ...)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 172893px"><NOBR>int 
fprintf(FILE *fp, char *format, ...)</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 172930px"><NOBR>With these 
preliminaries out of the way, we are now in a position to write the program 
<FONT face=Courier>cat </FONT>to concatenate</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 172950px"><NOBR>files. The 
design is one that has been found convenient for many programs. If there are 
command−line</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 172969px"><NOBR>arguments, 
they are interpreted as filenames, and processed in order. If there are no 
arguments, the standard</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 172989px"><NOBR>input is 
processed.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 173029px"><NOBR>#include 
&lt;stdio.h&gt;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 173062px"><NOBR>/* cat: 
concatenate files, version 1 */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 173078px"><NOBR>main(int argc, 
char *argv[])</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 173095px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 173111px"><NOBR>FILE 
*fp;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 173128px"><NOBR>void 
filecopy(FILE *, FILE *)</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 173161px"><NOBR>if (argc == 1) 
/* no args; copy standard input */</NOBR></DIV>
<DIV 
style="LEFT: 199px; POSITION: absolute; TOP: 173177px"><NOBR>filecopy(stdin, 
stdout);</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 173194px"><NOBR>else</NOBR></DIV>
<DIV style="LEFT: 191px; POSITION: absolute; TOP: 173210px"><NOBR>while(−−argc 
&gt; 0)</NOBR></DIV>
<DIV style="LEFT: 224px; POSITION: absolute; TOP: 173227px"><NOBR>if ((fp = 
fopen(*++argv, "r")) == NULL) {</NOBR></DIV>
<DIV style="LEFT: 257px; POSITION: absolute; TOP: 173243px"><NOBR>printf("cat: 
can't open %s\n, *argv);</NOBR></DIV>
<DIV style="LEFT: 257px; POSITION: absolute; TOP: 173260px"><NOBR>return 
1;</NOBR></DIV>
<DIV style="LEFT: 224px; POSITION: absolute; TOP: 173276px"><NOBR>} else 
{</NOBR></DIV>
<DIV style="LEFT: 249px; POSITION: absolute; TOP: 173293px"><NOBR>filecopy(fp, 
stdout);</NOBR></DIV>
<DIV 
style="LEFT: 249px; POSITION: absolute; TOP: 173309px"><NOBR>fclose(fp);</NOBR></DIV>
<DIV style="LEFT: 224px; POSITION: absolute; TOP: 173326px"><NOBR>}</NOBR></DIV>
<DIV style="LEFT: 191px; POSITION: absolute; TOP: 173342px"><NOBR>return 
0;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 173359px"><NOBR>}</NOBR></DIV>
<DIV style="LEFT: 141px; POSITION: absolute; TOP: 173392px"><NOBR>/* filecopy: 
copy file ifp to file ofp */</NOBR></DIV>
<DIV style="LEFT: 141px; POSITION: absolute; TOP: 173408px"><NOBR>void 
filecopy(FILE *ifp, FILE *ofp)</NOBR></DIV>
<DIV style="LEFT: 141px; POSITION: absolute; TOP: 173425px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 174px; POSITION: absolute; TOP: 173441px"><NOBR>int 
c;</NOBR></DIV>
<DIV style="LEFT: 174px; POSITION: absolute; TOP: 173474px"><NOBR>while ((c = 
getc(ifp)) != EOF)</NOBR></DIV>
<DIV style="LEFT: 207px; POSITION: absolute; TOP: 173491px"><NOBR>putc(c, 
ofp);</NOBR></DIV>
<DIV 
style="LEFT: 141px; POSITION: absolute; TOP: 173507px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 172477px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 173557px"><NOBR>7.5 File 
Access</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 173557px"><NOBR>146</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 173623px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=147><B>Page 147</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 173715px"><NOBR>The file 
pointers <FONT face=Courier>stdin </FONT>and <FONT face=Courier>stdout 
</FONT>are objects of type <FONT face=Courier>FILE *</FONT>. They are constants, 
however, <I>not</I></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 173735px"><NOBR>variables, so 
it is not possible to assign to them.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 173775px"><NOBR>The 
function</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 173814px"><NOBR>int 
fclose(FILE *fp)</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 173851px"><NOBR>is the inverse 
of <FONT face=Courier>fopen</FONT>, it breaks the connection between the file 
pointer and the external name that was</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 173870px"><NOBR>established by 
<FONT face=Courier>fopen</FONT>, freeing the file pointer for another file. 
Since most operating systems have some limit</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 173890px"><NOBR>on the number 
of files that a program may have open simultaneously, it's a good idea to free 
the file pointers</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 173910px"><NOBR>when they are 
no longer needed, as we did in <FONT face=Courier>cat</FONT>. There is also 
another reason for <FONT face=Courier>fclose </FONT>on an output 
file</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 173930px"><NOBR>− it flushes 
the buffer in which <FONT face=Courier>putc </FONT>is collecting output. <FONT 
face=Courier>fclose </FONT>is called automatically for each open 
file</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 173950px"><NOBR>when a program 
terminates normally. (You can close <FONT face=Courier>stdin </FONT>and <FONT 
face=Courier>stdout </FONT>if they are not needed. They can</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 173969px"><NOBR>also be 
reassigned by the library function <FONT 
face=Courier>freopen</FONT>.)</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=4><SPAN style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 174010px"><NOBR><B>7.6 Error 
Handling − Stderr and Exit</B></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 174057px"><NOBR>The treatment 
of errors in <FONT face=Courier>cat </FONT>is not ideal. The trouble is that if 
one of the files can't be accessed for some</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 174077px"><NOBR>reason, the 
diagnostic is printed at the end of the concatenated output. That might be 
acceptable if the output</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 174097px"><NOBR>is going to a 
screen, but not if it's going into a file or into another program via a 
pipeline.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 174136px"><NOBR>To handle this 
situation better, a second output stream, called <FONT 
face=Courier>stderr</FONT>, is assigned to a program in the same</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 174156px"><NOBR>way that <FONT 
face=Courier>stdin </FONT>and <FONT face=Courier>stdout </FONT>are. Output 
written on <FONT face=Courier>stderr </FONT>normally appears on the screen even 
if the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 174176px"><NOBR>standard 
output is redirected.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 174216px"><NOBR>Let us revise 
<FONT face=Courier>cat </FONT>to write its error messages on the standard 
error.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 174255px"><NOBR>#include 
&lt;stdio.h&gt;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 174288px"><NOBR>/* cat: 
concatenate files, version 2 */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 174305px"><NOBR>main(int argc, 
char *argv[])</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 174321px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 174338px"><NOBR>FILE 
*fp;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 174354px"><NOBR>void 
filecopy(FILE *, FILE *);</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 174371px"><NOBR>char *prog = 
argv[0]; /* program name for errors */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 174404px"><NOBR>if (argc == 1 
) /* no args; copy standard input */</NOBR></DIV>
<DIV 
style="LEFT: 199px; POSITION: absolute; TOP: 174420px"><NOBR>filecopy(stdin, 
stdout);</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 174437px"><NOBR>else</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 174453px"><NOBR>while (−−argc 
&gt; 0)</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 174470px"><NOBR>if ((fp = 
fopen(*++argv, "r")) == NULL) {</NOBR></DIV>
<DIV 
style="LEFT: 265px; POSITION: absolute; TOP: 174486px"><NOBR>fprintf(stderr, 
"%s: can't open %s\n",</NOBR></DIV>
<DIV style="LEFT: 332px; POSITION: absolute; TOP: 174503px"><NOBR>prog, 
*argv);</NOBR></DIV>
<DIV 
style="LEFT: 265px; POSITION: absolute; TOP: 174519px"><NOBR>exit(1);</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 174536px"><NOBR>} else 
{</NOBR></DIV>
<DIV style="LEFT: 265px; POSITION: absolute; TOP: 174552px"><NOBR>filecopy(fp, 
stdout);</NOBR></DIV>
<DIV 
style="LEFT: 265px; POSITION: absolute; TOP: 174569px"><NOBR>fclose(fp);</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 174585px"><NOBR>}</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 174602px"><NOBR>if 
(ferror(stdout)) {</NOBR></DIV>
<DIV 
style="LEFT: 199px; POSITION: absolute; TOP: 174618px"><NOBR>fprintf(stderr, 
"%s: error writing stdout\n", prog);</NOBR></DIV>
<DIV 
style="LEFT: 199px; POSITION: absolute; TOP: 174635px"><NOBR>exit(2);</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 174651px"><NOBR>}</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 174668px"><NOBR>exit(0);</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 174684px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 173665px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 174745px"><NOBR>7.6 Error 
Handling − Stderr and Exit</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 174745px"><NOBR>147</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 174811px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=148><B>Page 148</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 174903px"><NOBR>The program 
signals errors in two ways. First, the diagnostic output produced by <FONT 
face=Courier>fprintf </FONT>goes to <FONT 
face=Courier>stderr</FONT>,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 174923px"><NOBR>so it finds 
its way to the screen instead of disappearing down a pipeline or into an output 
file. We included the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 174943px"><NOBR>program name, 
from <FONT face=Courier>argv[0]</FONT>, in the message, so if this program is 
used with others, the source of an error</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 174963px"><NOBR>is 
identified.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 175002px"><NOBR>Second, the 
program uses the standard library function <FONT face=Courier>exit</FONT>, which 
terminates program execution when it is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 175022px"><NOBR>called. The 
argument of <FONT face=Courier>exit </FONT>is available to whatever process 
called this one, so the success or failure of the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 175042px"><NOBR>program can be 
tested by another program that uses this one as a sub−process. Conventionally, a 
return value</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 175062px"><NOBR>of 0 signals 
that all is well; non−zero values usually signal abnormal situations. <FONT 
face=Courier>exit </FONT>calls <FONT face=Courier>fclose </FONT>for 
each</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 175081px"><NOBR>open output 
file, to flush out any buffered output.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 175121px"><NOBR>Within <FONT 
face=Courier>main</FONT>, <FONT face=Courier>return </FONT><I>expr </I>is 
equivalent to <FONT face=Courier>exit</FONT>(<I>expr</I>). <FONT 
face=Courier>exit </FONT>has the advantage that it can be called 
from</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 175141px"><NOBR>other 
functions, and that calls to it can be found with a pattern−searching program 
like those in <FONT face=Times color=#0000ff><A 
href="#86">Chapter 
5</A></FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 175180px"><NOBR>The function 
<FONT face=Courier>ferror </FONT>returns non−zero if an error occurred on the 
stream <FONT face=Courier>fp</FONT>.</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 175220px"><NOBR>int 
ferror(FILE *fp)</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 175256px"><NOBR>Although 
output errors are rare, they do occur (for <B><SPAN 
class=goohl2>example</SPAN></B>, if a disk fills up), so a production program 
should</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 175276px"><NOBR>check this as 
well.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 175316px"><NOBR>The function 
<FONT face=Courier>feof(FILE *) </FONT>is analogous to <FONT 
face=Courier>ferror</FONT>; it returns non−zero if end of file has occurred on 
the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 175336px"><NOBR>specified 
file.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 175375px"><NOBR>int feof(FILE 
*fp)</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 175411px"><NOBR>We have 
generally not worried about exit status in our small illustrative programs, but 
any serious program</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 175431px"><NOBR>should take 
care to return sensible, useful status values.</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=4><SPAN style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 175472px"><NOBR><B>7.7 Line 
Input and Output</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 175519px"><NOBR>The standard 
library provides an input and output routine <FONT face=Courier>fgets 
</FONT>that is similar to the <FONT face=Courier>getline </FONT>function 
that</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 175539px"><NOBR>we have used 
in earlier chapters:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 175578px"><NOBR>char 
*fgets(char *line, int maxline, FILE *fp)</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 175616px"><NOBR>fgets <FONT 
face=Times>reads the next input line (including the newline) from file </FONT>fp 
<FONT face=Times>into the character array </FONT>line<FONT face=Times>; at 
most</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 175636px"><NOBR>maxline−1 
<FONT face=Times>characters will be read. The resulting line is terminated with 
</FONT>'\0'<FONT face=Times>. Normally </FONT>fgets <FONT 
face=Times>returns</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 175655px"><NOBR>line<FONT 
face=Times>; on end of file or error it returns </FONT>NULL<FONT face=Times>. 
(Our </FONT>getline <FONT face=Times>returns the line length, which is a more 
useful</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 175674px"><NOBR>value; zero 
means end of file.)</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 175714px"><NOBR>For output, 
the function <FONT face=Courier>fputs </FONT>writes a string (which need not 
contain a newline) to a file:</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 175753px"><NOBR>int fputs(char 
*line, FILE *fp)</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 175790px"><NOBR>It returns 
<FONT face=Courier>EOF </FONT>if an error occurs, and non−negative 
otherwise.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 175829px"><NOBR>The library 
functions <FONT face=Courier>gets </FONT>and <FONT face=Courier>puts </FONT>are 
similar to <FONT face=Courier>fgets </FONT>and <FONT face=Courier>fputs</FONT>, 
but operate on <FONT face=Courier>stdin 
</FONT>and</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 175850px"><NOBR>stdout<FONT 
face=Times>. Confusingly, </FONT>gets <FONT face=Times>deletes the terminating 
</FONT>'\n'<FONT face=Times>, and </FONT>puts <FONT face=Times>adds 
it.</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 174853px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 175933px"><NOBR>7.7 Line Input 
and Output</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 175933px"><NOBR>148</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 175999px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=149><B>Page 149</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 176091px"><NOBR>To show that 
there is nothing special about functions like <FONT face=Courier>fgets 
</FONT>and <FONT face=Courier>fputs</FONT>, here they are, copied from 
the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 176111px"><NOBR>standard 
library on our system:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 176150px"><NOBR>/* fgets: get 
at most n chars from iop */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 176167px"><NOBR>char 
*fgets(char *s, int n, FILE *iop)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 176183px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 176200px"><NOBR>register int 
c;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 176216px"><NOBR>register char 
*cs;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 176249px"><NOBR>cs = 
s;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 176266px"><NOBR>while (−−n 
&gt; 0 &amp;(c = getc(iop)) != EOF)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 176282px"><NOBR>if ((*cs++ = 
c) == '\n')</NOBR></DIV>
<DIV 
style="LEFT: 232px; POSITION: absolute; TOP: 176299px"><NOBR>break;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 176315px"><NOBR>*cs = 
'\0';</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 176332px"><NOBR>return (c == 
EOF &amp;cs == s) ? NULL : s;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 176348px"><NOBR>}</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 176381px"><NOBR>/* fputs: put 
string s on file iop */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 176398px"><NOBR>int fputs(char 
*s, FILE *iop)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 176414px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 176431px"><NOBR>int 
c;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 176464px"><NOBR>while (c = 
*s++)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 176480px"><NOBR>putc(c, 
iop);</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 176497px"><NOBR>return 
ferror(iop) ? EOF : 0;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 176513px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 176550px"><NOBR>For no obvious 
reason, the standard specifies different return values for <FONT 
face=Courier>ferror </FONT>and <FONT face=Courier>fputs</FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 176590px"><NOBR>It is easy to 
implement our <FONT face=Courier>getline </FONT>from <FONT 
face=Courier>fgets</FONT>:</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 176629px"><NOBR>/* getline: 
read a line, return length */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 176645px"><NOBR>int 
getline(char *line, int max)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 176662px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 176678px"><NOBR>if 
(fgets(line, max, stdin) == NULL)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 176695px"><NOBR>return 
0;</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 176711px"><NOBR>else</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 176728px"><NOBR>return 
strlen(line);</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 176744px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 176781px"><NOBR><I><B>Exercise 
7−6. </B></I>Write a program to compare two files, printing the first line where 
they differ.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 176821px"><NOBR><I><B>Exercise 
7−7. </B></I>Modify the pattern finding program of <FONT face=Times 
color=#0000ff><A 
href="#86">Chapter 
5 </A></FONT>to take its input from a set of named files or,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 176840px"><NOBR>if no files 
are named as arguments, from the standard input. Should the file name be printed 
when a matching</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 176860px"><NOBR>line is 
found?</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 176900px"><NOBR><I><B>Exercise 
7−8. </B></I>Write a program to print a set of files, starting each new one on a 
new page, with a title and a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 176920px"><NOBR>running page 
count for each file.</NOBR></DIV></SPAN></FONT><FONT face=Times size=4><SPAN 
style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 176961px"><NOBR><B>7.8 
Miscellaneous Functions</B></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 177007px"><NOBR>The standard 
library provides a wide variety of functions. This section is a brief synopsis 
of the most useful.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 177027px"><NOBR>More details 
and many other functions can be found in <FONT face=Times color=#0000ff><A 
href="#221">Appendix 
B</A></FONT><A 
href="#221"></A>.</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 176041px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 177121px"><NOBR>7.8 
Miscellaneous Functions</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 177121px"><NOBR>149</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 177187px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=150><B>Page 150</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 177280px"><NOBR><B>7.8.1 
String Operations</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 177323px"><NOBR>We have 
already mentioned the string functions <FONT face=Courier>strlen</FONT>, <FONT 
face=Courier>strcpy</FONT>, <FONT face=Courier>strcat</FONT>, and <FONT 
face=Courier>strcmp</FONT>, found in</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 177343px"><NOBR>&lt;string.h&gt;<FONT 
face=Times>. In the following, </FONT>s <FONT face=Times>and </FONT>t <FONT 
face=Times>are </FONT>char *<FONT face=Times>'s, and </FONT>c <FONT 
face=Times>and </FONT>n <FONT face=Times>are </FONT>int<FONT 
face=Times>s.</FONT></NOBR></DIV>
<DIV 
style="LEFT: 333px; POSITION: absolute; TOP: 177405px"><NOBR>strncat(s,t,n)</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 477px; POSITION: absolute; TOP: 177384px"><NOBR>concatenate 
<FONT face=Courier>n</FONT></NOBR></DIV>
<DIV style="LEFT: 477px; POSITION: absolute; TOP: 177404px"><NOBR>characters of 
<FONT face=Courier>t </FONT>to</NOBR></DIV>
<DIV style="LEFT: 477px; POSITION: absolute; TOP: 177424px"><NOBR>end of <FONT 
face=Courier>s</FONT></NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 333px; POSITION: absolute; TOP: 177481px"><NOBR>strcmp(s,t)</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 477px; POSITION: absolute; TOP: 177450px"><NOBR>return 
negative,</NOBR></DIV>
<DIV style="LEFT: 477px; POSITION: absolute; TOP: 177470px"><NOBR>zero, or 
positive for</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 477px; POSITION: absolute; TOP: 177491px"><NOBR>s &lt; t<FONT 
face=Times>, </FONT>s == t<FONT face=Times>, </FONT>s</NOBR></DIV>
<DIV style="LEFT: 477px; POSITION: absolute; TOP: 177510px"><NOBR>&gt; 
t</NOBR></DIV>
<DIV 
style="LEFT: 333px; POSITION: absolute; TOP: 177557px"><NOBR>strncmp(s,t,n)</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 477px; POSITION: absolute; TOP: 177536px"><NOBR>same as <FONT 
face=Courier>strcmp</FONT></NOBR></DIV>
<DIV style="LEFT: 477px; POSITION: absolute; TOP: 177556px"><NOBR>but only in 
first <FONT face=Courier>n</FONT></NOBR></DIV>
<DIV 
style="LEFT: 477px; POSITION: absolute; TOP: 177575px"><NOBR>characters</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 333px; POSITION: absolute; TOP: 177603px"><NOBR>strcpy(s,t)</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 477px; POSITION: absolute; TOP: 177602px"><NOBR>copy <FONT 
face=Courier>t </FONT>to <FONT 
face=Courier>s</FONT></NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 333px; POSITION: absolute; TOP: 177639px"><NOBR>strncpy(s,t,n)</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 477px; POSITION: absolute; TOP: 177628px"><NOBR>copy at most 
<FONT face=Courier>n</FONT></NOBR></DIV>
<DIV style="LEFT: 477px; POSITION: absolute; TOP: 177648px"><NOBR>characters of 
<FONT face=Courier>t </FONT>to <FONT 
face=Courier>s</FONT></NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 333px; POSITION: absolute; TOP: 177675px"><NOBR>strlen(s)</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 477px; POSITION: absolute; TOP: 177674px"><NOBR>return length 
of <FONT face=Courier>s</FONT></NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 333px; POSITION: absolute; TOP: 177721px"><NOBR>strchr(s,c)</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 477px; POSITION: absolute; TOP: 177700px"><NOBR>return pointer 
to</NOBR></DIV>
<DIV style="LEFT: 477px; POSITION: absolute; TOP: 177720px"><NOBR>first <FONT 
face=Courier>c </FONT>in <FONT face=Courier>s</FONT>, 
or</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 477px; POSITION: absolute; TOP: 177741px"><NOBR>NULL <FONT 
face=Times>if not present</FONT></NOBR></DIV>
<DIV 
style="LEFT: 333px; POSITION: absolute; TOP: 177787px"><NOBR>strrchr(s,c)</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 477px; POSITION: absolute; TOP: 177766px"><NOBR>return pointer 
to last</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 477px; POSITION: absolute; TOP: 177787px"><NOBR>c <FONT 
face=Times>in </FONT>s<FONT face=Times>, or </FONT>NULL <FONT 
face=Times>if</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 477px; POSITION: absolute; TOP: 177806px"><NOBR>not 
present</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 177830px"><NOBR><B>7.8.2 
Character Class Testing and Conversion</B></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 177873px"><NOBR>Several 
functions from <FONT face=Courier>&lt;ctype.h&gt; </FONT>perform character tests 
and conversions. In the following, <FONT face=Courier>c </FONT>is an <FONT 
face=Courier>int</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 177893px"><NOBR>that can be 
represented as an <FONT face=Courier>unsigned char </FONT>or <FONT 
face=Courier>EOF</FONT>. The function returns <FONT 
face=Courier>int</FONT>.</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 238px; POSITION: absolute; TOP: 177936px"><NOBR>isupper(c) 
<FONT face=Times>non−zero if </FONT>c <FONT face=Times>is upper case, 0 if 
not</FONT></NOBR></DIV>
<DIV style="LEFT: 238px; POSITION: absolute; TOP: 177962px"><NOBR>islower(c) 
<FONT face=Times>non−zero if </FONT>c <FONT face=Times>is lower case, 0 if 
not</FONT></NOBR></DIV>
<DIV style="LEFT: 238px; POSITION: absolute; TOP: 177988px"><NOBR>isdigit(c) 
<FONT face=Times>non−zero if </FONT>c <FONT face=Times>is digit, 0 if 
not</FONT></NOBR></DIV>
<DIV style="LEFT: 238px; POSITION: absolute; TOP: 178014px"><NOBR>isalnum(c) 
<FONT face=Times>non−zero if </FONT>isalpha(c) <FONT face=Times>or 
</FONT>isdigit(c)<FONT face=Times>, 0 if not</FONT></NOBR></DIV>
<DIV 
style="LEFT: 238px; POSITION: absolute; TOP: 178051px"><NOBR>isspace(c)</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 342px; POSITION: absolute; TOP: 178040px"><NOBR>non−zero if 
<FONT face=Courier>c </FONT>is blank, tab, newline, return, 
formfeed,</NOBR></DIV>
<DIV style="LEFT: 342px; POSITION: absolute; TOP: 178060px"><NOBR>vertical 
tab</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 238px; POSITION: absolute; TOP: 178087px"><NOBR>toupper(c) 
<FONT face=Times>return </FONT>c <FONT face=Times>converted to upper 
case</FONT></NOBR></DIV>
<DIV style="LEFT: 238px; POSITION: absolute; TOP: 178113px"><NOBR>tolower(c) 
<FONT face=Times>return </FONT>c <FONT face=Times>converted to lower 
case</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 178137px"><NOBR><B>7.8.3 
Ungetc</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 178180px"><NOBR>The standard 
library provides a rather restricted version of the function <FONT 
face=Courier>ungetch </FONT>that we wrote in <FONT face=Times color=#0000ff><A 
href="#64">Chapter 
4</A></FONT>;</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 178200px"><NOBR>it is called 
<FONT face=Courier>ungetc</FONT>.</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 178239px"><NOBR>int ungetc(int 
c, FILE *fp)</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 177229px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 178309px"><NOBR>7.8.1 String 
Operations</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 178309px"><NOBR>150</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 178375px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=151><B>Page 151</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 178467px"><NOBR>pushes the 
character <FONT face=Courier>c </FONT>back onto file <FONT 
face=Courier>fp</FONT>, and returns either <FONT face=Courier>c</FONT>, or <FONT 
face=Courier>EOF </FONT>for an error. Only one character of</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 178487px"><NOBR>pushback is 
guaranteed per file. <FONT face=Courier>ungetc </FONT>may be used with any of 
the input functions like <FONT face=Courier>scanf</FONT>, <FONT 
face=Courier>getc</FONT>, or</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 178508px"><NOBR>getchar<FONT 
face=Times>.</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 178547px"><NOBR><B>7.8.4 
Command Execution</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 178590px"><NOBR>The function 
<FONT face=Courier>system(char *s) </FONT>executes the command contained in the 
character string <FONT face=Courier>s</FONT>, then resumes</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 178610px"><NOBR>execution of 
the current program. The contents of <FONT face=Courier>s </FONT>depend strongly 
on the local operating system. As a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 178630px"><NOBR>trivial 
<B><SPAN class=goohl2>example</SPAN></B>, on UNIX systems, the 
statement</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 178669px"><NOBR>system("date");</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 178705px"><NOBR>causes the 
program <FONT face=Courier>date </FONT>to be run; it prints the date and time of 
day on the standard output. <FONT face=Courier>system 
</FONT>returns</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 178725px"><NOBR>a 
system−dependent integer status from the command executed. In the UNIX system, 
the status return is the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 178745px"><NOBR>value returned 
by <FONT face=Courier>exit</FONT>.</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 178785px"><NOBR><B>7.8.5 
Storage Management</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 178828px"><NOBR>The functions 
<FONT face=Courier>malloc </FONT>and <FONT face=Courier>calloc </FONT>obtain 
blocks of memory dynamically.</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 178868px"><NOBR>void 
*malloc(size_t n)</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 178904px"><NOBR>returns a 
pointer to <FONT face=Courier>n </FONT>bytes of uninitialized storage, or <FONT 
face=Courier>NULL </FONT>if the request cannot be 
satisfied.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 178944px"><NOBR>void 
*calloc(size_t n, size_t size)</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 178980px"><NOBR>returns a 
pointer to enough free space for an array of <FONT face=Courier>n </FONT>objects 
of the specified size, or <FONT face=Courier>NULL </FONT>if the 
request</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 179000px"><NOBR>cannot be 
satisfied. The storage is initialized to zero.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 179039px"><NOBR>The pointer 
returned by <FONT face=Courier>malloc </FONT>or <FONT face=Courier>calloc 
</FONT>has the proper alignment for the object in question, but it 
must</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 179059px"><NOBR>be cast into 
the appropriate type, as in</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 179099px"><NOBR>int 
*ip;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 179132px"><NOBR>ip = (int *) 
calloc(n, sizeof(int));</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 179169px"><NOBR>free(p) <FONT 
face=Times>frees the space pointed to by </FONT>p<FONT face=Times>, where 
</FONT>p <FONT face=Times>was originally obtained by a call to </FONT>malloc 
<FONT face=Times>or </FONT>calloc<FONT 
face=Times>.</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 179188px"><NOBR>There are no 
restrictions on the order in which space is freed, but it is a ghastly error to 
free something not</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 179208px"><NOBR>obtained by 
calling <FONT face=Courier>malloc </FONT>or <FONT 
face=Courier>calloc</FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 179247px"><NOBR>It is also an 
error to use something after it has been freed. A typical but incorrect piece of 
code is this loop that</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 179267px"><NOBR>frees items 
from a list:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 179307px"><NOBR>for (p = head; 
p != NULL; p = p−&gt;next) /* WRONG */</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 179323px"><NOBR>free(p);</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 179360px"><NOBR>The right way 
is to save whatever is needed before freeing:</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 179399px"><NOBR>for (p = head; 
p != NULL; p = q) {</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 179415px"><NOBR>q = 
p−&gt;next;</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 179432px"><NOBR>free(p);</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 179448px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 178417px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 179497px"><NOBR>7.8.4 Command 
Execution</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 179497px"><NOBR>151</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 179563px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=152><B>Page 152</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 179655px"><NOBR><A 
href="#165">Section 
8.7 </A><FONT face=Times color=#000000>shows the implementation of a storage 
allocator like </FONT><FONT face=Courier color=#000000>malloc</FONT><FONT 
face=Times color=#000000>, in which allocated blocks may 
be</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 179675px"><NOBR>freed in any 
order.</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 179715px"><NOBR><B>7.8.6 
Mathematical Functions</B></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 179758px"><NOBR>There are more 
than twenty mathematical functions declared in <FONT 
face=Courier>&lt;math.h&gt;</FONT>; here are some of the more</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 179778px"><NOBR>frequently 
used. Each takes one or two <FONT face=Courier>double </FONT>arguments and 
returns a <FONT face=Courier>double</FONT>.</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 351px; POSITION: absolute; TOP: 179831px"><NOBR>cos(x)</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 456px; POSITION: absolute; TOP: 179820px"><NOBR>cosine of 
<I>x</I>, <I>x </I>in</NOBR></DIV>
<DIV 
style="LEFT: 456px; POSITION: absolute; TOP: 179840px"><NOBR>radians</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 351px; POSITION: absolute; TOP: 179877px"><NOBR>atan2(y,x)</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 456px; POSITION: absolute; TOP: 179866px"><NOBR>arctangent of 
<I>y/x</I>, in</NOBR></DIV>
<DIV 
style="LEFT: 456px; POSITION: absolute; TOP: 179886px"><NOBR>radians</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 351px; POSITION: absolute; TOP: 179923px"><NOBR>exp(x)</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 456px; POSITION: absolute; TOP: 179912px"><NOBR>exponential 
function</NOBR></DIV>
<DIV 
style="LEFT: 456px; POSITION: absolute; TOP: 179932px"><NOBR><I>e</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 463px; POSITION: absolute; TOP: 179928px"><NOBR><I>x</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 351px; POSITION: absolute; TOP: 179969px"><NOBR>log(x)</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 456px; POSITION: absolute; TOP: 179958px"><NOBR>natural (base 
<I>e</I>)</NOBR></DIV>
<DIV style="LEFT: 456px; POSITION: absolute; TOP: 179978px"><NOBR>logarithm of 
<I>x (x&gt;0)</I></NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 351px; POSITION: absolute; TOP: 180015px"><NOBR>log10(x)</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 456px; POSITION: absolute; TOP: 180004px"><NOBR>common (base 
10)</NOBR></DIV>
<DIV style="LEFT: 456px; POSITION: absolute; TOP: 180024px"><NOBR>logarithm of 
<I>x (x&gt;0)</I></NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 351px; POSITION: absolute; TOP: 180051px"><NOBR>pow(x,y)</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 456px; POSITION: absolute; TOP: 180050px"><NOBR><I>x</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 463px; POSITION: absolute; TOP: 180046px"><NOBR><I>y</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 351px; POSITION: absolute; TOP: 180087px"><NOBR>sqrt(x)</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 456px; POSITION: absolute; TOP: 180076px"><NOBR>square root of 
<I>x</I></NOBR></DIV>
<DIV 
style="LEFT: 456px; POSITION: absolute; TOP: 180096px"><NOBR><I>(x&gt;0)</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 351px; POSITION: absolute; TOP: 180123px"><NOBR>fabs(x)</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 456px; POSITION: absolute; TOP: 180122px"><NOBR>absolute value 
of <I>x</I></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 180147px"><NOBR><B>7.8.7 
Random Number generation</B></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 180190px"><NOBR>The function 
<FONT face=Courier>rand() </FONT>computes a sequence of pseudo−random integers 
in the range zero to <FONT face=Courier>RAND_MAX</FONT>,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 180210px"><NOBR>which is 
defined in <FONT face=Courier>&lt;stdlib.h&gt;</FONT>. One way to produce random 
floating−point numbers greater than or equal</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 180230px"><NOBR>to zero but 
less than one is</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 180269px"><NOBR>#define 
frand() ((double) rand() / (RAND_MAX+1.0))</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 180305px"><NOBR>(If your 
library already provides a function for floating−point random numbers, it is 
likely to have better</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 180325px"><NOBR>statistical 
properties than this one.)</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 180365px"><NOBR>The function 
<FONT face=Courier>srand(unsigned) </FONT>sets the seed for <FONT 
face=Courier>rand</FONT>. The portable implementation of <FONT face=Courier>rand 
</FONT>and</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 180386px"><NOBR>srand <FONT 
face=Times>suggested by the standard appears in <A 
href="#42"></A></FONT><FONT 
face=Times color=#0000ff><A 
href="#42">Section 
2.7</A></FONT><FONT face=Times><A 
href="#42"></A>.</FONT></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 180424px"><NOBR><I><B>Exercise 
7−9. </B></I>Functions like <FONT face=Courier>isupper </FONT>can be implemented 
to save space or to save time. Explore both</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 180444px"><NOBR>possibilities.</NOBR></DIV></SPAN></FONT><FONT 
face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 320px; POSITION: absolute; TOP: 180487px"><NOBR><A 
href="#117">Back 
to Chapter 6 </A><FONT face=Times color=#000000>−− </FONT><A 
href="#1">Index 
</A><FONT face=Times color=#000000>−− </FONT><A 
href="#153">Chapter 
8</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 179605px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 180685px"><NOBR>7.8.6 
Mathematical Functions</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 180685px"><NOBR>152</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 180751px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=153><B>Page 153</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 312px; POSITION: absolute; TOP: 180866px"><NOBR><A 
href="#138">Back 
to Chapter 7 </A><FONT face=Times color=#000000>−− </FONT><A 
href="#1">Index 
</A><FONT face=Times color=#000000>−− </FONT><A 
href="#170">Appendix 
A</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=4><SPAN 
style="FONT-SIZE: 26px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 180911px"><NOBR><B>Chapter 8 − 
The UNIX System Interface</B></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 180963px"><NOBR>The UNIX 
operating system provides its services through a set of <I>system calls</I>, 
which are in effect functions</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 180982px"><NOBR>within the 
operating system that may be called by user programs. This chapter describes how 
to use some of</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 181002px"><NOBR>the most 
important system calls from C programs. If you use UNIX, this should be directly 
helpful, for it is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 181022px"><NOBR>sometimes 
necessary to employ system calls for maximum efficiency, or to access some 
facility that is not in</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 181042px"><NOBR>the library. 
Even if you use C on a different operating system, however, you should be able 
to glean insight</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 181062px"><NOBR>into C 
programming from studying these examples; although details vary, similar code 
will be found on any</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 181081px"><NOBR>system. Since 
the ANSI C library is in many cases modeled on UNIX facilities, this code may 
help your</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 181101px"><NOBR>understanding 
of the library as well.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 181141px"><NOBR>This chapter 
is divided into three major parts: input/output, file system, and storage 
allocation. The first two</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 181161px"><NOBR>parts assume a 
modest familiarity with the external characteristics of UNIX 
systems.</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 181200px"><NOBR><A 
href="#138">Chapter 
7 </A><FONT face=Times color=#000000>was concerned with an input/output 
interface that is uniform across operating systems. On 
any</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 181220px"><NOBR>particular 
system the routines of the standard library have to be written in terms of the 
facilities provided by</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 181240px"><NOBR>the host 
system. In the next few sections we will describe the UNIX system calls for 
input and output, and</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 181260px"><NOBR>show how parts 
of the standard library can be implemented with 
them.</NOBR></DIV></SPAN></FONT><FONT face=Times size=4><SPAN 
style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 181301px"><NOBR><B>8.1 File 
Descriptors</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 181348px"><NOBR>In the UNIX 
operating system, all input and output is done by reading or writing files, 
because all peripheral</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 181367px"><NOBR>devices, even 
keyboard and screen, are files in the file system. This means that a single 
homogeneous</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 181387px"><NOBR>interface 
handles all communication between a program and peripheral devices.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 181427px"><NOBR>In the most 
general case, before you read and write a file, you must inform the system of 
your intent to do so,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 181447px"><NOBR>a process 
called <I>opening </I>the file. If you are going to write on a file it may also 
be necessary to create it or to</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 181466px"><NOBR>discard its 
previous contents. The system checks your right to do so (Does the file exist? 
Do you have</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 181486px"><NOBR>permission to 
access it?) and if all is well, returns to the program a small non−negative 
integer called a <I>file</I></NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 181506px"><NOBR><I>descriptor</I>. 
Whenever input or output is to be done on the file, the file descriptor is used 
instead of the name to</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 181526px"><NOBR>identify the 
file. (A file descriptor is analogous to the file pointer used by the standard 
library, or to the file</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 181546px"><NOBR>handle of 
MS−DOS.) All information about an open file is maintained by the system; the 
user program refers</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 181565px"><NOBR>to the file 
only by the file descriptor.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 181605px"><NOBR>Since input 
and output involving keyboard and screen is so common, special arrangements 
exist to make this</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 181625px"><NOBR>convenient. 
When the command interpreter (the ``shell'') runs a program, three files are 
open, with file</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 181645px"><NOBR>descriptors 0, 
1, and 2, called the standard input, the standard output, and the standard 
error. If a program</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 181664px"><NOBR>reads 0 and 
writes 1 and 2, it can do input and output without worrying about opening 
files.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 181704px"><NOBR>The user of a 
program can redirect I/O to and from files with &lt; and 
&gt;:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 181743px"><NOBR>prog 
&lt;infile &gt;outfile</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 181780px"><NOBR>In this case, 
the shell changes the default assignments for the file descriptors 0 and 1 to 
the named files.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 181800px"><NOBR>Normally file 
descriptor 2 remains attached to the screen, so error messages can go there. 
Similar observations</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 181819px"><NOBR>hold for input 
or output associated with a pipe. In all cases, the file assignments are changed 
by the shell, not</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 180793px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 181873px"><NOBR>Chapter 8 − 
The UNIX System Interface</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 181873px"><NOBR>153</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 181939px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=154><B>Page 154</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 182031px"><NOBR>by the 
program. The program does not know where its input comes from nor where its 
output goes, so long as</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 182051px"><NOBR>it uses file 0 
for input and 1 and 2 for output.</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=4><SPAN style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 182092px"><NOBR><B>8.2 Low 
Level I/O − Read and Write</B></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 182139px"><NOBR>Input and 
output uses the <FONT face=Courier>read </FONT>and <FONT face=Courier>write 
</FONT>system calls, which are accessed from C programs through two</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 182159px"><NOBR>functions 
called <FONT face=Courier>read </FONT>and <FONT face=Courier>write</FONT>. For 
both, the first argument is a file descriptor. The second argument is 
a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 182179px"><NOBR>character 
array in your program where the data is to go to or to come from. The third 
argument is the number</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 182198px"><NOBR>is the number 
of bytes to be transferred.</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 182238px"><NOBR>int n_read = 
read(int fd, char *buf, int n);</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 182254px"><NOBR>int n_written 
= write(int fd, char *buf, int n);</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 182291px"><NOBR>Each call 
returns a count of the number of bytes transferred. On reading, the number of 
bytes returned may be</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 182311px"><NOBR>less than the 
number requested. A return value of zero bytes implies end of file, and <FONT 
face=Courier>−1 </FONT>indicates an error of</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 182330px"><NOBR>some sort. For 
writing, the return value is the number of bytes written; an error has occurred 
if this isn't equal</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 182350px"><NOBR>to the number 
requested.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 182390px"><NOBR>Any number of 
bytes can be read or written in one call. The most common values are 1, which 
means one</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 182410px"><NOBR>character at a 
time (``unbuffered''), and a number like 1024 or 4096 that corresponds to a 
physical block size</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 182429px"><NOBR>on a 
peripheral device. Larger sizes will be more efficient because fewer system 
calls will be made.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 182469px"><NOBR>Putting these 
facts together, we can write a simple program to copy its input to its output, 
the equivalent of the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 182489px"><NOBR>file copying 
program written for <FONT face=Times color=#0000ff><A 
href="#11">Chapter 
1</A></FONT>. This program will copy anything to anything, since the input 
and</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 182509px"><NOBR>output can be 
redirected to any file or device.</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 182548px"><NOBR>#include 
"syscalls.h"</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 182581px"><NOBR>main() /* copy 
input to output */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 182597px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 182614px"><NOBR>char 
buf[BUFSIZ];</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 182630px"><NOBR>int 
n;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 182663px"><NOBR>while ((n = 
read(0, buf, BUFSIZ)) &gt; 0)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 182680px"><NOBR>write(1, buf, 
n);</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 182696px"><NOBR>return 
0;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 182713px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 182749px"><NOBR>We have 
collected function prototypes for the system calls into a file called <FONT 
face=Courier>syscalls.h </FONT>so we can include</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 182769px"><NOBR>it in the 
programs of this chapter. This name is not standard, however.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 182809px"><NOBR>The parameter 
<FONT face=Courier>BUFSIZ </FONT>is also defined in <FONT 
face=Courier>syscalls.h</FONT>; its value is a good size for the local system. 
If the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 182829px"><NOBR>file size is 
not a multiple of <FONT face=Courier>BUFSIZ</FONT>, some <FONT face=Courier>read 
</FONT>will return a smaller number of bytes to be written 
by</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 182849px"><NOBR>write<FONT 
face=Times>; the next call to </FONT>read <FONT face=Times>after that will 
return zero.</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 182888px"><NOBR>It is 
instructive to see how <FONT face=Courier>read </FONT>and <FONT 
face=Courier>write </FONT>can be used to construct higher−level routines like 
<FONT face=Courier>getchar</FONT>,</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 182909px"><NOBR>putchar<FONT 
face=Times>, etc. For <B><SPAN class=goohl2>example</SPAN></B>, here is a 
version of </FONT>getchar <FONT face=Times>that does unbuffered input, by 
reading the</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 182928px"><NOBR>standard input 
one character at a time.</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 182967px"><NOBR>#include 
"syscalls.h"</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 183000px"><NOBR>/* getchar: 
unbuffered single character input */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 183017px"><NOBR>int 
getchar(void)</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 181981px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 183061px"><NOBR>8.2 Low Level 
I/O − Read and Write</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 183061px"><NOBR>154</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 183127px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=155><B>Page 155</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 183219px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 183236px"><NOBR>char 
c;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 183269px"><NOBR>return 
(read(0, 1) == 1) ? (unsigned char) c : EOF;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 183285px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 183322px"><NOBR>c <FONT 
face=Times>must be a </FONT>char<FONT face=Times>, because </FONT>read <FONT 
face=Times>needs a character pointer. Casting </FONT>c <FONT face=Times>to 
</FONT>unsigned char <FONT face=Times>in the 
return</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 183341px"><NOBR>statement 
eliminates any problem of sign extension.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 183381px"><NOBR>The second 
version of <FONT face=Courier>getchar </FONT>does input in big chunks, and hands 
out the characters one at a time.</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 183420px"><NOBR>#include 
"syscalls.h"</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 183453px"><NOBR>/* getchar: 
simple buffered version */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 183470px"><NOBR>int 
getchar(void)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 183486px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 183503px"><NOBR>static char 
buf[BUFSIZ];</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 183519px"><NOBR>static char 
*bufp = buf;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 183536px"><NOBR>static int n = 
0;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 183569px"><NOBR>if (n == 0) { 
/* buffer is empty */</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 183585px"><NOBR>n = read(0, 
buf, sizeof buf);</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 183602px"><NOBR>bufp = 
buf;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 183618px"><NOBR>}</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 183635px"><NOBR>return (−−n 
&gt;= 0) ? (unsigned char) *bufp++ : EOF;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 183651px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 183688px"><NOBR>If these 
versions of <FONT face=Courier>getchar </FONT>were to be compiled with <FONT 
face=Courier>&lt;stdio.h&gt; </FONT>included, it would be necessary 
to</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 183709px"><NOBR>#undef <FONT 
face=Times>the name </FONT>getchar <FONT face=Times>in case it is implemented as 
a macro.</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=4><SPAN 
style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 183749px"><NOBR><B>8.3 Open, 
Creat, Close, Unlink</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 183796px"><NOBR>Other than the 
default standard input, output and error, you must explicitly open files in 
order to read or write</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 183815px"><NOBR>them. There 
are two system calls for this, <FONT face=Courier>open </FONT>and <FONT 
face=Courier>creat </FONT>[sic].</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 183856px"><NOBR>open <FONT 
face=Times>is rather like the </FONT>fopen <FONT face=Times>discussed in <A 
href="#138"></A></FONT><FONT 
face=Times color=#0000ff><A 
href="#138">Chapter 
7</A></FONT><FONT face=Times>, except that instead of returning a file pointer, 
it returns</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 183875px"><NOBR>a file 
descriptor, which is just an <FONT face=Courier>int</FONT>. <FONT 
face=Courier>open </FONT>returns <FONT face=Courier>−1 </FONT>if any error 
occurs.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 183914px"><NOBR>#include 
&lt;fcntl.h&gt;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 183947px"><NOBR>int 
fd;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 183964px"><NOBR>int open(char 
*name, int flags, int perms);</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 183997px"><NOBR>fd = 
open(name, flags, perms);</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 184033px"><NOBR>As with <FONT 
face=Courier>fopen</FONT>, the <FONT face=Courier>name </FONT>argument is a 
character string containing the filename. The second 
argument,</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 184054px"><NOBR>flags<FONT 
face=Times>, is an </FONT>int <FONT face=Times>that specifies how the file is to 
be opened; the main values are</FONT></NOBR></DIV>
<DIV style="LEFT: 315px; POSITION: absolute; TOP: 184096px"><NOBR>O_WRONLY <FONT 
face=Times>open for writing only</FONT></NOBR></DIV>
<DIV 
style="LEFT: 315px; POSITION: absolute; TOP: 184122px"><NOBR>O_RDWR</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 400px; POSITION: absolute; TOP: 184121px"><NOBR>open for both 
reading and writing</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 184145px"><NOBR>These 
constants are defined in <FONT face=Courier>&lt;fcntl.h&gt; </FONT>on System V 
UNIX systems, and in <FONT face=Courier>&lt;sys/file.h&gt; 
</FONT>on</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 184165px"><NOBR>Berkeley (BSD) 
versions.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 184204px"><NOBR>To open an 
existing file for reading,</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 183169px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 184249px"><NOBR>8.3 Open, 
Creat, Close, Unlink</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 184249px"><NOBR>155</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 184315px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=156><B>Page 156</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 184407px"><NOBR>fd = 
open(name, O_RDONLY,0);</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 184444px"><NOBR>The <FONT 
face=Courier>perms </FONT>argument is always zero for the uses of <FONT 
face=Courier>open </FONT>that we will discuss.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 184483px"><NOBR>It is an error 
to try to open a file that does not exist. The system call <FONT 
face=Courier>creat </FONT>is provided to create new files, or</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 184503px"><NOBR>to re−write 
old ones.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 184542px"><NOBR>int creat(char 
*name, int perms);</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 184575px"><NOBR>fd = 
creat(name, perms);</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 184612px"><NOBR>returns a file 
descriptor if it was able to create the file, and <FONT face=Courier>−1 
</FONT>if not. If the file already exists, <FONT face=Courier>creat 
</FONT>will</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 184632px"><NOBR>truncate it to 
zero length, thereby discarding its previous contents; it is not an error to 
<FONT face=Courier>creat </FONT>a file that</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 184651px"><NOBR>already 
exists.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 184691px"><NOBR>If the file 
does not already exist, <FONT face=Courier>creat </FONT>creates it with the 
permissions specified by the <FONT face=Courier>perms </FONT>argument. 
In</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 184711px"><NOBR>the UNIX file 
system, there are nine bits of permission information associated with a file 
that control read,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 184731px"><NOBR>write and 
execute access for the owner of the file, for the owner's group, and for all 
others. Thus a three−digit</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 184750px"><NOBR>octal number 
is convenient for specifying the permissions. For <B><SPAN 
class=goohl2>example</SPAN></B>, <FONT face=Courier>0775 </FONT>specifies read, 
write and</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 184770px"><NOBR>execute 
permission for the owner, and read and execute permission for the group and 
everyone else.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 184810px"><NOBR>To illustrate, 
here is a simplified version of the UNIX program <FONT face=Courier>cp</FONT>, 
which copies one file to another. Our</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 184830px"><NOBR>version copies 
only one file, it does not permit the second argument to be a directory, and it 
invents</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 184849px"><NOBR>permissions 
instead of copying them.</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 184889px"><NOBR>#include 
&lt;stdio.h&gt;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 184905px"><NOBR>#include 
&lt;fcntl.h&gt;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 184922px"><NOBR>#include 
"syscalls.h"</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 184938px"><NOBR>#define PERMS 
0666 /* RW for owner, group, others */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 184971px"><NOBR>void 
error(char *, ...);</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 185004px"><NOBR>/* cp: copy f1 
to f2 */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 185021px"><NOBR>main(int argc, 
char *argv[])</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 185037px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 185054px"><NOBR>int f1, f2, 
n;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 185070px"><NOBR>char 
buf[BUFSIZ];</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 185103px"><NOBR>if (argc != 
3)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 185120px"><NOBR>error("Usage: 
cp from to");</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 185136px"><NOBR>if ((f1 = 
open(argv[1], O_RDONLY, 0)) == −1)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 185153px"><NOBR>error("cp: 
can't open %s", argv[1]);</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 185169px"><NOBR>if ((f2 = 
creat(argv[2], PERMS)) == −1)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 185186px"><NOBR>error("cp: 
can't create %s, mode %03o",</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 185202px"><NOBR>argv[2], 
PERMS);</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 185219px"><NOBR>while ((n = 
read(f1, buf, BUFSIZ)) &gt; 0)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 185235px"><NOBR>if (write(f2, 
buf, n) != n)</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 185252px"><NOBR>error("cp: 
write error on file %s", argv[2]);</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 185268px"><NOBR>return 
0;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 185285px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 185321px"><NOBR>This program 
creates the output file with fixed permissions of <FONT 
face=Courier>0666</FONT>. With the <FONT face=Courier>stat </FONT>system call, 
described in</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff 
size=3><SPAN style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 185341px"><NOBR><A 
href="#161">Section 
8.6</A><FONT face=Times color=#000000>, we can determine the mode of an existing 
file and thus give the same mode to the 
copy.</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 185381px"><NOBR>Notice that 
the function <FONT face=Courier>error </FONT>is called with variable argument 
lists much like <FONT face=Courier>printf</FONT>. The</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 185401px"><NOBR>implementation 
of error illustrates how to use another member of the <FONT face=Courier>printf 
</FONT>family. The standard library</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 184357px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 185437px"><NOBR>8.3 Open, 
Creat, Close, Unlink</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 185437px"><NOBR>156</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 185503px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=157><B>Page 157</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 185595px"><NOBR>function <FONT 
face=Courier>vprintf </FONT>is like <FONT face=Courier>printf </FONT>except that 
the variable argument list is replaced by a single argument that</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 185615px"><NOBR>has been 
initialized by calling the <FONT face=Courier>va_start </FONT>macro. Similarly, 
<FONT face=Courier>vfprintf </FONT>and <FONT face=Courier>vsprintf 
</FONT>match</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 185636px"><NOBR>fprintf <FONT 
face=Times>and </FONT>sprintf<FONT 
face=Times>.</FONT></NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 185674px"><NOBR>#include 
&lt;stdio.h&gt;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 185691px"><NOBR>#include 
&lt;stdarg.h&gt;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 185724px"><NOBR>/* error: 
print an error message and die */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 185740px"><NOBR>void 
error(char *fmt, ...)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 185757px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 185773px"><NOBR>va_list 
args;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 185806px"><NOBR>va_start(args, 
fmt);</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 185823px"><NOBR>fprintf(stderr, 
"error: ");</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 185839px"><NOBR>vprintf(stderr, 
fmt, args);</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 185856px"><NOBR>fprintf(stderr, 
"\n");</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 185872px"><NOBR>va_end(args);</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 185889px"><NOBR>exit(1);</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 185905px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 185942px"><NOBR>There is a 
limit (often about 20) on the number of files that a program may open 
simultaneously. Accordingly,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 185962px"><NOBR>any program 
that intends to process many files must be prepared to re−use file descriptors. 
The function</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 185982px"><NOBR>close(int fd) 
<FONT face=Times>breaks the connection between a file descriptor and an open 
file, and frees the file</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 186001px"><NOBR>descriptor for 
use with some other file; it corresponds to <FONT face=Courier>fclose </FONT>in 
the standard library except that there is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 186021px"><NOBR>no buffer to 
flush. Termination of a program via <FONT face=Courier>exit </FONT>or return 
from the main program closes all open files.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 186061px"><NOBR>The function 
<FONT face=Courier>unlink(char *name) </FONT>removes the file <FONT 
face=Courier>name </FONT>from the file system. It corresponds to 
the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 186080px"><NOBR>standard 
library function <FONT face=Courier>remove</FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 186120px"><NOBR><I><B>Exercise 
8−1. </B></I>Rewrite the program <FONT face=Courier>cat </FONT>from <A 
href="#138"></A><FONT 
face=Times color=#0000ff><A 
href="#138">Chapter 
7 </A></FONT>using <FONT face=Courier>read</FONT>, <FONT 
face=Courier>write</FONT>, <FONT face=Courier>open</FONT>, and <FONT 
face=Courier>close </FONT>instead of</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 186140px"><NOBR>their standard 
library equivalents. Perform experiments to determine the relative speeds of the 
two versions.</NOBR></DIV></SPAN></FONT><FONT face=Times size=4><SPAN 
style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 186181px"><NOBR><B>8.4 Random 
Access − Lseek</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 186228px"><NOBR>Input and 
output are normally sequential: each <FONT face=Courier>read </FONT>or <FONT 
face=Courier>write </FONT>takes place at a position in the file right 
after</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 186247px"><NOBR>the previous 
one. When necessary, however, a file can be read or written in any arbitrary 
order. The system</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 186267px"><NOBR>call <FONT 
face=Courier>lseek </FONT>provides a way to move around in a file without 
reading or writing any data:</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 186307px"><NOBR>long lseek(int 
fd, long offset, int origin);</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 186343px"><NOBR>sets the 
current position in the file whose descriptor is <FONT face=Courier>fd </FONT>to 
<FONT face=Courier>offset</FONT>, which is taken relative to the 
location</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 186363px"><NOBR>specified by 
<FONT face=Courier>origin</FONT>. Subsequent reading or writing will begin at 
that position. <FONT face=Courier>origin </FONT>can be 0, 1, or 2 
to</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 186383px"><NOBR>specify that 
<FONT face=Courier>offset </FONT>is to be measured from the beginning, from the 
current position, or from the end of the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 186403px"><NOBR>file 
respectively. For <B><SPAN class=goohl2>example</SPAN></B>, to append to a file 
(the redirection &gt;&gt; in the UNIX shell, or <FONT face=Courier>"a" 
</FONT>for <FONT face=Courier>fopen</FONT>),</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 186422px"><NOBR>seek to the 
end before writing:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 186462px"><NOBR>lseek(fd, 0L, 
2);</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 186498px"><NOBR>To get back to 
the beginning (``rewind''),</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 186538px"><NOBR>lseek(fd, 0L, 
0);</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 186574px"><NOBR>Notice the 
<FONT face=Courier>0L </FONT>argument; it could also be written as <FONT 
face=Courier>(long) 0 </FONT>or just as <FONT face=Courier>0 </FONT>if <FONT 
face=Courier>lseek </FONT>is properly declared.</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 185545px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 186625px"><NOBR>8.4 Random 
Access − Lseek</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 186625px"><NOBR>157</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 186691px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=158><B>Page 158</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 186783px"><NOBR>With <FONT 
face=Courier>lseek</FONT>, it is possible to treat files more or less like 
arrays, at the price of slower access. For <B><SPAN 
class=goohl2>example</SPAN></B>,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 186803px"><NOBR>the following 
function reads any number of bytes from any arbitrary place in a file. It 
returns the number read,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 186823px"><NOBR>or <FONT 
face=Courier>−1 </FONT>on error.</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 186862px"><NOBR>#include 
"syscalls.h"</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 186895px"><NOBR>/*get: read n 
bytes from position pos */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 186912px"><NOBR>int get(int 
fd, long pos, char *buf, int n)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 186928px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 186945px"><NOBR>if (lseek(fd, 
pos, 0) &gt;= 0) /* get to pos */</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 186961px"><NOBR>return 
read(fd, buf, n);</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 186978px"><NOBR>else</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 186994px"><NOBR>return 
−1;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 187011px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 187047px"><NOBR>The return 
value from <FONT face=Courier>lseek </FONT>is a long that gives the new position 
in the file, or <FONT face=Courier>−1 </FONT>if an error occurs. 
The</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 187067px"><NOBR>standard 
library function <FONT face=Courier>fseek </FONT>is similar to <FONT 
face=Courier>lseek </FONT>except that the first argument is a <FONT 
face=Courier>FILE * </FONT>and the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 187087px"><NOBR>return is 
non−zero if an error occurred.</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=4><SPAN style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 187128px"><NOBR><B>8.5 
<B><SPAN class=goohl2>Example</SPAN></B> − An implementation of Fopen and 
Getc</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 187175px"><NOBR>Let us 
illustrate how some of these pieces fit together by showing an implementation of 
the standard library</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 187195px"><NOBR>routines <FONT 
face=Courier>fopen </FONT>and <FONT face=Courier>getc</FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 187234px"><NOBR>Recall that 
files in the standard library are described by file pointers rather than file 
descriptors. A file pointer</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 187254px"><NOBR>is a pointer 
to a structure that contains several pieces of information about the file: a 
pointer to a buffer, so the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 187274px"><NOBR>file can be 
read in large chunks; a count of the number of characters left in the buffer; a 
pointer to the next</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 187294px"><NOBR>character 
position in the buffer; the file descriptor; and flags describing read/write 
mode, error status, etc.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 187333px"><NOBR>The data 
structure that describes a file is contained in <FONT 
face=Courier>&lt;stdio.h&gt;</FONT>, which must be included (by <FONT 
face=Courier>#include</FONT>)</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 187353px"><NOBR>in any source 
file that uses routines from the standard input/output library. It is also 
included by functions in</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 187373px"><NOBR>that library. 
In the following excerpt from a typical <FONT 
face=Courier>&lt;stdio.h&gt;</FONT>, names that are intended for use only 
by</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 187393px"><NOBR>functions of 
the library begin with an underscore so they are less likely to collide with 
names in a user's</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 187412px"><NOBR>program. This 
convention is used by all standard library 
routines.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 187452px"><NOBR>#define NULL 
0</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 187468px"><NOBR>#define EOF 
(−1)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 187485px"><NOBR>#define BUFSIZ 
1024</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 187501px"><NOBR>#define 
OPEN_MAX 20 /* max #files open at once */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 187534px"><NOBR>typedef struct 
_iobuf {</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 187551px"><NOBR>int cnt; /* 
characters left */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 187567px"><NOBR>char *ptr; /* 
next character position */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 187584px"><NOBR>char *base; /* 
location of buffer */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 187600px"><NOBR>int flag; /* 
mode of file access */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 187617px"><NOBR>int fd; /* 
file descriptor */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 187633px"><NOBR>} 
FILE;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 187650px"><NOBR>extern FILE 
_iob[OPEN_MAX];</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 187683px"><NOBR>#define stdin 
( #define stdout ( #define stderr (</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 187699px"><NOBR>enum _flags 
{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 187716px"><NOBR>_READ = 01, /* 
file open for reading */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 187732px"><NOBR>_WRITE = 02, 
/* file open for writing */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 187749px"><NOBR>_UNBUF = 04, 
/* file is unbuffered */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 187765px"><NOBR>_EOF = 010, /* 
EOF has occurred on this file */</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 186733px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 187813px"><NOBR>8.5 <B><SPAN 
class=goohl2>Example</SPAN></B> − An implementation of Fopen and 
Getc</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 187813px"><NOBR>158</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 187879px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=159><B>Page 159</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 187971px"><NOBR>_ERR = 020 /* 
error occurred on this file */</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 187988px"><NOBR>};</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 188021px"><NOBR>int 
_fillbuf(FILE *);</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 188037px"><NOBR>int 
_flushbuf(int, FILE *);</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 188070px"><NOBR>#define 
feof(p) ((p)−&gt;flag _EOF) != 0)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 188087px"><NOBR>#define 
ferror(p) ((p)−&gt;flag _ERR) != 0)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 188103px"><NOBR>#define 
fileno(p) ((p)−&gt;fd)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 188136px"><NOBR>#define 
getc(p) (−−(p)−&gt;cnt &gt;= 0 \</NOBR></DIV>
<DIV style="LEFT: 257px; POSITION: absolute; TOP: 188153px"><NOBR>? (unsigned 
char) *(p)−&gt;ptr++ : _fillbuf(p))</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 188169px"><NOBR>#define 
putc(x,p) (−−(p)−&gt;cnt &gt;= 0 \</NOBR></DIV>
<DIV style="LEFT: 257px; POSITION: absolute; TOP: 188186px"><NOBR>? 
*(p)−&gt;ptr++ = (x) : _flushbuf((x),p))</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 188219px"><NOBR>#define 
getchar() getc(stdin)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 188235px"><NOBR>#define 
putcher(x) putc((x), stdout)</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 188272px"><NOBR>The <FONT 
face=Courier>getc </FONT>macro normally decrements the count, advances the 
pointer, and returns the character. (Recall that</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 188291px"><NOBR>a long <FONT 
face=Courier>#define </FONT>is continued with a backslash.) If the count goes 
negative, however, <FONT face=Courier>getc </FONT>calls the 
function</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 188312px"><NOBR>_fillbuf <FONT 
face=Times>to replenish the buffer, re−initialize the structure contents, and 
return a character. The characters</FONT></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 188331px"><NOBR>are returned 
<FONT face=Courier>unsigned</FONT>, which ensures that all characters will be 
positive.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 188371px"><NOBR>Although we 
will not discuss any details, we have included the definition of <FONT 
face=Courier>putc </FONT>to show that it operates in</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 188390px"><NOBR>much the same 
way as <FONT face=Courier>getc</FONT>, calling a function <FONT 
face=Courier>_flushbuf </FONT>when its buffer is full. We have also 
included</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 188410px"><NOBR>macros for 
accessing the error and end−of−file status and the file descriptor.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 188450px"><NOBR>The function 
<FONT face=Courier>fopen </FONT>can now be written. Most of <FONT 
face=Courier>fopen </FONT>is concerned with getting the file opened 
and</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 188470px"><NOBR>positioned at 
the right place, and setting the flag bits to indicate the proper state. <FONT 
face=Courier>fopen </FONT>does not allocate any</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 188489px"><NOBR>buffer space; 
this is done by <FONT face=Courier>_fillbuf </FONT>when the file is first 
read.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 188529px"><NOBR>#include 
&lt;fcntl.h&gt;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 188545px"><NOBR>#include 
"syscalls.h"</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 188562px"><NOBR>#define PERMS 
0666 /* RW for owner, group, others */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 188595px"><NOBR>FILE 
*fopen(char *name, char *mode)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 188611px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 188628px"><NOBR>int 
fd;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 188644px"><NOBR>FILE 
*fp;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 188677px"><NOBR>if (*mode != 
'r' &amp;*mode != 'w' &amp;*mode != 'a')</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 188694px"><NOBR>return 
NULL;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 188710px"><NOBR>for (fp = 
_iob; fp &lt; _iob + OPEN_MAX; fp++)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 188727px"><NOBR>if 
((fp−&gt;flag (_READ | _WRITE)) == 0)</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 188743px"><NOBR>break; /* 
found free slot */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 188760px"><NOBR>if (fp &gt;= 
_iob + OPEN_MAX) /* no free slots */</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 188776px"><NOBR>return 
NULL;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 188809px"><NOBR>if (*mode == 
'w')</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 188826px"><NOBR>fd = 
creat(name, PERMS);</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 188842px"><NOBR>else if (*mode 
== 'a') {</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 188859px"><NOBR>if ((fd = 
open(name, O_WRONLY, 0)) == −1)</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 188875px"><NOBR>fd = 
creat(name, PERMS);</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 188892px"><NOBR>lseek(fd, 0L, 
2);</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 188908px"><NOBR>} 
else</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 188925px"><NOBR>fd = 
open(name, O_RDONLY, 0);</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 188941px"><NOBR>if (fd == −1) 
/* couldn't access name */</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 188958px"><NOBR>return 
NULL;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 187921px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 189001px"><NOBR>8.5 <B><SPAN 
class=goohl2>Example</SPAN></B> − An implementation of Fopen and 
Getc</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 189001px"><NOBR>159</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 189067px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=160><B>Page 160</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 189159px"><NOBR>fp−&gt;fd = 
fd;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 189176px"><NOBR>fp−&gt;cnt = 
0;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 189192px"><NOBR>fp−&gt;base = 
NULL;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 189209px"><NOBR>fp−&gt;flag = 
(*mode == 'r') ? _READ : _WRITE;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 189225px"><NOBR>return 
fp;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 189242px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 189278px"><NOBR>This version 
of <FONT face=Courier>fopen </FONT>does not handle all of the access mode 
possibilities of the standard, though adding</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 189298px"><NOBR>them would not 
take much code. In particular, our <FONT face=Courier>fopen </FONT>does not 
recognize the ``<FONT face=Courier>b</FONT>'' that signals binary</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 189318px"><NOBR>access, since 
that is meaningless on UNIX systems, nor the ``<FONT face=Courier>+</FONT>'' 
that permits both reading and writing.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 189357px"><NOBR>The first call 
to <FONT face=Courier>getc </FONT>for a particular file finds a count of zero, 
which forces a call of <FONT face=Courier>_fillbuf</FONT>. 
If</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 189378px"><NOBR>_fillbuf <FONT 
face=Times>finds that the file is not open for reading, it returns </FONT>EOF 
<FONT face=Times>immediately. Otherwise, it tries 
to</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 189397px"><NOBR>allocate a 
buffer (if reading is to be buffered).</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 189436px"><NOBR>Once the 
buffer is established, <FONT face=Courier>_fillbuf </FONT>calls <FONT 
face=Courier>read </FONT>to fill it, sets the count and pointers, and returns 
the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 189456px"><NOBR>character at 
the beginning of the buffer. Subsequent calls to <FONT face=Courier>_fillbuf 
</FONT>will find a buffer allocated.</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 189496px"><NOBR>#include 
"syscalls.h"</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 189529px"><NOBR>/* _fillbuf: 
allocate and fill input buffer */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 189545px"><NOBR>int 
_fillbuf(FILE *fp)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 189562px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 189578px"><NOBR>int 
bufsize;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 189611px"><NOBR>if 
((fp−&gt;flag) != _READ)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 189628px"><NOBR>return 
EOF;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 189644px"><NOBR>bufsize = 
(fp−&gt;flag _UNBUF) ? 1 : BUFSIZ;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 189661px"><NOBR>if 
(fp−&gt;base == NULL) /* no buffer yet */</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 189677px"><NOBR>if 
((fp−&gt;base = (char *) malloc(bufsize)) == NULL)</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 189694px"><NOBR>return EOF; /* 
can't get buffer */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 189710px"><NOBR>fp−&gt;ptr = 
fp−&gt;base;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 189727px"><NOBR>fp−&gt;cnt = 
read(fp−&gt;fd, fp−&gt;ptr, bufsize);</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 189743px"><NOBR>if 
(−−fp−&gt;cnt &lt; 0) {</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 189760px"><NOBR>if (fp−&gt;cnt 
== −1)</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 189776px"><NOBR>fp−&gt;flag |= 
_EOF;</NOBR></DIV>
<DIV 
style="LEFT: 199px; POSITION: absolute; TOP: 189793px"><NOBR>else</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 189809px"><NOBR>fp−&gt;flag |= 
_ERR;</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 189826px"><NOBR>fp−&gt;cnt = 
0;</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 189842px"><NOBR>return 
EOF;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 189859px"><NOBR>}</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 189875px"><NOBR>return 
(unsigned char) *fp−&gt;ptr++;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 189892px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 189928px"><NOBR>The only 
remaining loose end is how everything gets started. The array <FONT 
face=Courier>_iob </FONT>must be defined and initialized</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 189948px"><NOBR>for <FONT 
face=Courier>stdin</FONT>, <FONT face=Courier>stdout </FONT>and <FONT 
face=Courier>stderr</FONT>:</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 189987px"><NOBR>FILE 
_iob[OPEN_MAX] = { /* stdin, stdout, stderr */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 190004px"><NOBR>{ 0, (char *) 
0, (char *) 0, _READ, 0 },</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 190020px"><NOBR>{ 0, (char *) 
0, (char *) 0, _WRITE, 1 },</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 190037px"><NOBR>{ 0, (char *) 
0, (char *) 0, _WRITE, | _UNBUF, 2 }</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 190053px"><NOBR>};</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 190090px"><NOBR>The 
initialization of the <FONT face=Courier>flag </FONT>part of the structure shows 
that <FONT face=Courier>stdin </FONT>is to be read, <FONT face=Courier>stdout 
</FONT>is to be written,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 190110px"><NOBR>and <FONT 
face=Courier>stderr </FONT>is to be written unbuffered.</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 189109px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 190189px"><NOBR>8.5 <B><SPAN 
class=goohl2>Example</SPAN></B> − An implementation of Fopen and 
Getc</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 190189px"><NOBR>160</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 190255px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=161><B>Page 161</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 190347px"><NOBR><I><B>Exercise 
8−2. </B></I>Rewrite <FONT face=Courier>fopen </FONT>and <FONT 
face=Courier>_fillbuf </FONT>with fields instead of explicit bit operations. 
Compare code</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 190367px"><NOBR>size and 
execution speed.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 190407px"><NOBR><I><B>Exercise 
8−3. </B></I>Design and write <FONT face=Courier>_flushbuf</FONT>, <FONT 
face=Courier>fflush</FONT>, and <FONT face=Courier>fclose</FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 190446px"><NOBR><I><B>Exercise 
8−4. </B></I>The standard library function</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 190486px"><NOBR>int fseek(FILE 
*fp, long offset, int origin)</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 190522px"><NOBR>is identical 
to <FONT face=Courier>lseek </FONT>except that <FONT face=Courier>fp </FONT>is a 
file pointer instead of a file descriptor and return value is an <FONT 
face=Courier>int</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 190542px"><NOBR>status, not a 
position. Write <FONT face=Courier>fseek</FONT>. Make sure that your <FONT 
face=Courier>fseek </FONT>coordinates properly with the buffering 
done</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 190562px"><NOBR>for the other 
functions of the library.</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=4><SPAN style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 190603px"><NOBR><B>8.6 
<B><SPAN class=goohl2>Example</SPAN></B> − Listing 
Directories</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 190650px"><NOBR>A different 
kind of file system interaction is sometimes called for − determining 
information <I>about </I>a file, not</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 190669px"><NOBR>what it 
contains. A directory−listing program such as the UNIX command <FONT 
face=Courier>ls </FONT>is an <B><SPAN class=goohl2>example</SPAN></B> − it 
prints the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 190689px"><NOBR>names of files 
in a directory, and, optionally, other information, such as sizes, permissions, 
and so on. The</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 190709px"><NOBR>MS−DOS <FONT 
face=Courier>dir </FONT>command is analogous.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 190749px"><NOBR>Since a UNIX 
directory is just a file, <FONT face=Courier>ls </FONT>need only read it to 
retrieve the filenames. But is is necessary to use a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 190768px"><NOBR>system call to 
access other information about a file, such as its size. On other systems, a 
system call may be</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 190788px"><NOBR>needed even to 
access filenames; this is the case on MS−DOS for instance. What we want is 
provide access to</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 190808px"><NOBR>the 
information in a relatively system−independent way, even though the 
implementation may be highly</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 190828px"><NOBR>system−dependent.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 190867px"><NOBR>We will 
illustrate some of this by writing a program called <FONT 
face=Courier>fsize</FONT>. <FONT face=Courier>fsize </FONT>is a special form of 
<FONT face=Courier>ls </FONT>that prints</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 190887px"><NOBR>the sizes of 
all files named in its commandline argument list. If one of the files is a 
directory, <FONT face=Courier>fsize </FONT>applies</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 190907px"><NOBR>itself 
recursively to that directory. If there are no arguments at all, it processes 
the current directory.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 190947px"><NOBR>Let us begin 
with a short review of UNIX file system structure. A <I>directory </I>is a file 
that contains a list of</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 190966px"><NOBR>filenames and 
some indication of where they are located. The ``location'' is an index into 
another table called</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 190986px"><NOBR>the ``inode 
list.'' The <I>inode </I>for a file is where all information about the file 
except its name is kept. A directory</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 191006px"><NOBR>entry 
generally consists of only two items, the filename and an inode 
number.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 191046px"><NOBR>Regrettably, 
the format and precise contents of a directory are not the same on all versions 
of the system. So</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 191065px"><NOBR>we will divide 
the task into two pieces to try to isolate the non−portable parts. The outer 
level defines a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 191085px"><NOBR>structure 
called a <FONT face=Courier>Dirent </FONT>and three routines <FONT 
face=Courier>opendir</FONT>, <FONT face=Courier>readdir</FONT>, and <FONT 
face=Courier>closedir </FONT>to provide</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 191105px"><NOBR>system−independent 
access to the name and inode number in a directory entry. We will write <FONT 
face=Courier>fsize </FONT>with</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 191125px"><NOBR>this 
interface. Then we will show how to implement these on systems that use the same 
directory structure as</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 191145px"><NOBR>Version 7 and 
System V UNIX; variants are left as exercises.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 191184px"><NOBR>The <FONT 
face=Courier>Dirent </FONT>structure contains the inode number and the name. The 
maximum length of a filename</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 191204px"><NOBR>component is 
<FONT face=Courier>NAME_MAX</FONT>, which is a system−dependent value. <FONT 
face=Courier>opendir </FONT>returns a pointer to a structure</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 191224px"><NOBR>called <FONT 
face=Courier>DIR</FONT>, analogous to <FONT face=Courier>FILE</FONT>, which is 
used by <FONT face=Courier>readdir </FONT>and <FONT 
face=Courier>closedir</FONT>. This information is collected</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 191244px"><NOBR>into a file 
called <FONT face=Courier>dirent.h</FONT>.</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 191283px"><NOBR>#define 
NAME_MAX 14 /* longest filename component; */</NOBR></DIV>
<DIV style="LEFT: 390px; POSITION: absolute; TOP: 191300px"><NOBR>/* 
system−dependent */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 191333px"><NOBR>typedef struct 
{ /* portable directory entry */</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 190297px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 191377px"><NOBR>8.6 <B><SPAN 
class=goohl2>Example</SPAN></B> − Listing Directories</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 191377px"><NOBR>161</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 191443px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=162><B>Page 162</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 191535px"><NOBR>long ino; /* 
inode number */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 191552px"><NOBR>char 
name[NAME_MAX+1]; /* name + '\0' terminator */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 191568px"><NOBR>} 
Dirent;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 191601px"><NOBR>typedef struct 
{ /* minimal DIR: no buffering, etc. */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 191618px"><NOBR>int fd; /* 
file descriptor for the directory */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 191634px"><NOBR>Dirent d; /* 
the directory entry */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 191651px"><NOBR>} 
DIR;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 191684px"><NOBR>DIR 
*opendir(char *dirname);</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 191700px"><NOBR>Dirent 
*readdir(DIR *dfd);</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 191717px"><NOBR>void 
closedir(DIR *dfd);</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 191753px"><NOBR>The system 
call <FONT face=Courier>stat </FONT>takes a filename and returns all of the 
information in the inode for that file, or <FONT face=Courier>−1 
</FONT>if</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 191773px"><NOBR>there is an 
error. That is,</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 191812px"><NOBR>char 
*name;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 191829px"><NOBR>struct stat 
stbuf;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 191845px"><NOBR>int stat(char 
*, struct stat *);</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 191878px"><NOBR>stat(name, 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 191915px"><NOBR>fills the 
structure <FONT face=Courier>stbuf </FONT>with the inode information for the 
file name. The structure describing the value</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 191935px"><NOBR>returned by 
<FONT face=Courier>stat </FONT>is in <FONT 
face=Courier>&lt;sys/stat.h&gt;</FONT>, and typically looks like 
this:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 191974px"><NOBR>struct stat /* 
inode information returned by stat */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 191990px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 192007px"><NOBR>dev_t st_dev; 
/* device of inode */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 192023px"><NOBR>ino_t st_ino; 
/* inode number */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 192040px"><NOBR>short st_mode; 
/* mode bits */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 192056px"><NOBR>short 
st_nlink; /* number of links to file */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 192073px"><NOBR>short st_uid; 
/* owners user id */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 192089px"><NOBR>short st_gid; 
/* owners group id */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 192106px"><NOBR>dev_t st_rdev; 
/* for special files */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 192122px"><NOBR>off_t st_size; 
/* file size in characters */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 192139px"><NOBR>time_t 
st_atime; /* time last accessed */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 192155px"><NOBR>time_t 
st_mtime; /* time last modified */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 192172px"><NOBR>time_t 
st_ctime; /* time originally created */</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 192188px"><NOBR>};</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 192225px"><NOBR>Most of these 
values are explained by the comment fields. The types like <FONT 
face=Courier>dev_t </FONT>and <FONT face=Courier>ino_t </FONT>are defined 
in</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 192246px"><NOBR>&lt;sys/types.h&gt;<FONT 
face=Times>, which must be included too.</FONT></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 192284px"><NOBR>The <FONT 
face=Courier>st_mode </FONT>entry contains a set of flags describing the file. 
The flag definitions are also included in</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 192305px"><NOBR>&lt;sys/types.h&gt;<FONT 
face=Times>; we need only the part that deals with file 
type:</FONT></NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 192344px"><NOBR>#define S_IFMT 
0160000 /* type of file: */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 192360px"><NOBR>#define 
S_IFDIR 0040000 /* directory */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 192377px"><NOBR>#define 
S_IFCHR 0020000 /* character special */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 192393px"><NOBR>#define 
S_IFBLK 0060000 /* block special */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 192410px"><NOBR>#define 
S_IFREG 0010000 /* regular */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 192426px"><NOBR>/* ... 
*/</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 192463px"><NOBR>Now we are 
ready to write the program <FONT face=Courier>fsize</FONT>. If the mode obtained 
from <FONT face=Courier>stat </FONT>indicates that a file is not a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 192482px"><NOBR>directory, 
then the size is at hand and can be printed directly. If the name is a 
directory, however, then we</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 192502px"><NOBR>have to 
process that directory one file at a time; it may in turn contain 
sub−directories, so the process is</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 192522px"><NOBR>recursive.</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 191485px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 192565px"><NOBR>8.6 <B><SPAN 
class=goohl2>Example</SPAN></B> − Listing Directories</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 192565px"><NOBR>162</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 192631px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=163><B>Page 163</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 192723px"><NOBR>The main 
routine deals with command−line arguments; it hands each argument to the 
function <FONT face=Courier>fsize</FONT>.</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 192763px"><NOBR>#include 
&lt;stdio.h&gt;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 192779px"><NOBR>#include 
&lt;string.h&gt;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 192796px"><NOBR>#include 
"syscalls.h"</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 192812px"><NOBR>#include 
&lt;fcntl.h&gt; /* flags for read and write */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 192829px"><NOBR>#include 
&lt;sys/types.h&gt; /* typedefs */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 192845px"><NOBR>#include 
&lt;sys/stat.h&gt; /* structure returned by stat */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 192862px"><NOBR>#include 
"dirent.h"</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 192895px"><NOBR>void 
fsize(char *)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 192928px"><NOBR>/* print file 
name */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 192944px"><NOBR>main(int argc, 
char **argv)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 192961px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 192977px"><NOBR>if (argc == 1) 
/* default: current directory */</NOBR></DIV>
<DIV 
style="LEFT: 199px; POSITION: absolute; TOP: 192994px"><NOBR>fsize(".");</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 193010px"><NOBR>else</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 193027px"><NOBR>while (−−argc 
&gt; 0)</NOBR></DIV>
<DIV 
style="LEFT: 232px; POSITION: absolute; TOP: 193043px"><NOBR>fsize(*++argv);</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 193060px"><NOBR>return 
0;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 193076px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 193113px"><NOBR>The function 
<FONT face=Courier>fsize </FONT>prints the size of the file. If the file is a 
directory, however, <FONT face=Courier>fsize </FONT>first calls <FONT 
face=Courier>dirwalk</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 193132px"><NOBR>to handle all 
the files in it. Note how the flag names <FONT face=Courier>S_IFMT </FONT>and 
<FONT face=Courier>S_IFDIR </FONT>are used to decide if the file is 
a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 193152px"><NOBR>directory. 
Parenthesization matters, because the precedence of <FONT face=Courier>&amp; 
</FONT>is lower than that of <FONT 
face=Courier>==</FONT>.</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 193192px"><NOBR>int stat(char 
*, struct stat *);</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 193208px"><NOBR>void 
dirwalk(char *, void (*fcn)(char *));</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 193241px"><NOBR>/* fsize: 
print the name of file "name" */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 193258px"><NOBR>void 
fsize(char *name)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 193274px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 193291px"><NOBR>struct stat 
stbuf;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 193324px"><NOBR>if (stat(name, 
== −1) {</NOBR></DIV>
<DIV 
style="LEFT: 199px; POSITION: absolute; TOP: 193340px"><NOBR>fprintf(stderr, 
"fsize: can't access %s\n", name);</NOBR></DIV>
<DIV 
style="LEFT: 199px; POSITION: absolute; TOP: 193357px"><NOBR>return;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 193373px"><NOBR>}</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 193390px"><NOBR>if 
((stbuf.st_mode S_IFMT) == S_IFDIR)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 193406px"><NOBR>dirwalk(name, 
fsize);</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 193423px"><NOBR>printf("%8ld 
%s\n", stbuf.st_size, name);</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 193439px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 193476px"><NOBR>The function 
<FONT face=Courier>dirwalk </FONT>is a general routine that applies a function 
to each file in a directory. It opens the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 193495px"><NOBR>directory, 
loops through the files in it, calling the function on each, then closes the 
directory and returns. Since</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 193516px"><NOBR>fsize <FONT 
face=Times>calls </FONT>dirwalk <FONT face=Times>on each directory, the two 
functions call each other recursively.</FONT></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 193555px"><NOBR>#define 
MAX_PATH 1024</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 193588px"><NOBR>/* dirwalk: 
apply fcn to all files in dir */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 193604px"><NOBR>void 
dirwalk(char *dir, void (*fcn)(char *))</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 193621px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 193637px"><NOBR>char 
name[MAX_PATH];</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 193654px"><NOBR>Dirent 
*dp;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 193670px"><NOBR>DIR 
*dfd;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 193703px"><NOBR>if ((dfd = 
opendir(dir)) == NULL) {</NOBR></DIV>
<DIV 
style="LEFT: 199px; POSITION: absolute; TOP: 193720px"><NOBR>fprintf(stderr, 
"dirwalk: can't open %s\n", dir);</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 192673px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 193753px"><NOBR>8.6 <B><SPAN 
class=goohl2>Example</SPAN></B> − Listing Directories</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 193753px"><NOBR>163</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 193819px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=164><B>Page 164</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 199px; POSITION: absolute; TOP: 193911px"><NOBR>return;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 193928px"><NOBR>}</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 193944px"><NOBR>while ((dp = 
readdir(dfd)) != NULL) {</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 193961px"><NOBR>if 
(strcmp(dp−&gt;name, ".") == 0</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 193977px"><NOBR>|| 
strcmp(dp−&gt;name, ".."))</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 193994px"><NOBR>continue; /* 
skip self and parent */</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 194010px"><NOBR>if 
(strlen(dir)+strlen(dp−&gt;name)+2 &gt; sizeof(name))</NOBR></DIV>
<DIV 
style="LEFT: 232px; POSITION: absolute; TOP: 194027px"><NOBR>fprintf(stderr, 
"dirwalk: name %s %s too long\n",</NOBR></DIV>
<DIV style="LEFT: 265px; POSITION: absolute; TOP: 194043px"><NOBR>dir, 
dp−&gt;name);</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 194060px"><NOBR>else 
{</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 194076px"><NOBR>sprintf(name, 
"%s/%s", dir, dp−&gt;name);</NOBR></DIV>
<DIV 
style="LEFT: 232px; POSITION: absolute; TOP: 194093px"><NOBR>(*fcn)(name);</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 194109px"><NOBR>}</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 194126px"><NOBR>}</NOBR></DIV>
<DIV 
style="LEFT: 166px; POSITION: absolute; TOP: 194142px"><NOBR>closedir(dfd);</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 194159px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 194195px"><NOBR>Each call to 
<FONT face=Courier>readdir </FONT>returns a pointer to information for the next 
file, or <FONT face=Courier>NULL </FONT>when there are no files 
left.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 194215px"><NOBR>Each directory 
always contains entries for itself, called <FONT face=Courier>"."</FONT>, and 
its parent, <FONT face=Courier>".."</FONT>; these must be skipped, 
or</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 194235px"><NOBR>the program 
will loop forever.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 194274px"><NOBR>Down to this 
last level, the code is independent of how directories are formatted. The next 
step is to present</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 194294px"><NOBR>minimal 
versions of <FONT face=Courier>opendir</FONT>, <FONT 
face=Courier>readdir</FONT>, and <FONT face=Courier>closedir </FONT>for a 
specific system. The following routines are</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 194314px"><NOBR>for Version 7 
and System V UNIX systems; they use the directory information in the header 
<FONT face=Courier>&lt;sys/dir.h&gt;</FONT>,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 194334px"><NOBR>which looks 
like this:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 194373px"><NOBR>#ifndef 
DIRSIZ</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 194390px"><NOBR>#define DIRSIZ 
14</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 194406px"><NOBR>#endif</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 194423px"><NOBR>struct direct 
{ /* directory entry */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 194439px"><NOBR>ino_t d_ino; 
/* inode number */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 194456px"><NOBR>char 
d_name[DIRSIZ]; /* long name does not have '\0' */</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 194472px"><NOBR>};</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 194509px"><NOBR>Some versions 
of the system permit much longer names and have a more complicated directory 
structure.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 194548px"><NOBR>The type <FONT 
face=Courier>ino_t </FONT>is a <FONT face=Courier>typedef </FONT>that describes 
the index into the inode list. It happens to be <FONT 
face=Courier>unsigned</FONT></NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 194569px"><NOBR>short <FONT 
face=Times>on the systems we use regularly, but this is not the sort of 
information to embed in a program; it 
might</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 194588px"><NOBR>be different 
on a different system, so the <FONT face=Courier>typedef </FONT>is better. A 
complete set of ``system'' types is found in</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 194608px"><NOBR>&lt;sys/types.h&gt;<FONT 
face=Times>.</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 194648px"><NOBR>opendir <FONT 
face=Times>opens the directory, verifies that the file is a directory (this time 
by the system call </FONT>fstat<FONT face=Times>, 
which</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 194667px"><NOBR>is like <FONT 
face=Courier>stat </FONT>except that it applies to a file descriptor), allocates 
a directory structure, and records the</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 194687px"><NOBR>information:</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 194726px"><NOBR>int fstat(int 
fd, struct stat *);</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 194759px"><NOBR>/* opendir: 
open a directory for readdir calls */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 194776px"><NOBR>DIR 
*opendir(char *dirname)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 194792px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 194809px"><NOBR>int 
fd;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 194825px"><NOBR>struct stat 
stbuf;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 194842px"><NOBR>DIR 
*dp;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 194875px"><NOBR>if ((fd = 
open(dirname, O_RDONLY, 0)) == −1</NOBR></DIV>
<DIV style="LEFT: 174px; POSITION: absolute; TOP: 194891px"><NOBR>|| fstat(fd, 
== −1</NOBR></DIV>
<DIV style="LEFT: 174px; POSITION: absolute; TOP: 194908px"><NOBR>|| 
(stbuf.st_mode S_IFMT) != S_IFDIR</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 193861px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 194941px"><NOBR>8.6 <B><SPAN 
class=goohl2>Example</SPAN></B> − Listing Directories</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 194941px"><NOBR>164</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 195007px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=165><B>Page 165</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 174px; POSITION: absolute; TOP: 195099px"><NOBR>|| (dp = (DIR 
*) malloc(sizeof(DIR))) == NULL)</NOBR></DIV>
<DIV style="LEFT: 207px; POSITION: absolute; TOP: 195116px"><NOBR>return 
NULL;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 195132px"><NOBR>dp−&gt;fd = 
fd;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 195149px"><NOBR>return 
dp;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 195165px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 195202px"><NOBR>closedir <FONT 
face=Times>closes the directory file and frees the 
space:</FONT></NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 195241px"><NOBR>/* closedir: 
close directory opened by opendir */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 195257px"><NOBR>void 
closedir(DIR *dp)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 195274px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 195290px"><NOBR>if (dp) 
{</NOBR></DIV>
<DIV 
style="LEFT: 199px; POSITION: absolute; TOP: 195307px"><NOBR>close(dp−&gt;fd);</NOBR></DIV>
<DIV 
style="LEFT: 199px; POSITION: absolute; TOP: 195323px"><NOBR>free(dp);</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 195340px"><NOBR>}</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 195356px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 195393px"><NOBR>Finally, <FONT 
face=Courier>readdir </FONT>uses <FONT face=Courier>read </FONT>to read each 
directory entry. If a directory slot is not currently in use (because 
a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 195413px"><NOBR>file has been 
removed), the inode number is zero, and this position is skipped. Otherwise, the 
inode number</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 195433px"><NOBR>and name are 
placed in a <FONT face=Courier>static </FONT>structure and a pointer to that is 
returned to the user. Each call overwrites</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 195452px"><NOBR>the 
information from the previous one.</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 195492px"><NOBR>#include 
&lt;sys/dir.h&gt; /* local directory structure */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 195525px"><NOBR>/* readdir: 
read directory entries in sequence */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 195541px"><NOBR>Dirent 
*readdir(DIR *dp)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 195558px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 195574px"><NOBR>struct direct 
dirbuf; /* local directory structure */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 195591px"><NOBR>static Dirent 
d; /* return: portable structure */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 195624px"><NOBR>while 
(read(dp−&gt;fd, (char *) sizeof(dirbuf))</NOBR></DIV>
<DIV style="LEFT: 298px; POSITION: absolute; TOP: 195640px"><NOBR>== 
sizeof(dirbuf)) {</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 195657px"><NOBR>if 
(dirbuf.d_ino == 0) /* slot not in use */</NOBR></DIV>
<DIV 
style="LEFT: 232px; POSITION: absolute; TOP: 195673px"><NOBR>continue;</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 195690px"><NOBR>d.ino = 
dirbuf.d_ino;</NOBR></DIV>
<DIV 
style="LEFT: 199px; POSITION: absolute; TOP: 195706px"><NOBR>strncpy(d.name, 
dirbuf.d_name, DIRSIZ);</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 195723px"><NOBR>d.name[DIRSIZ] 
= '\0'; /* ensure termination */</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 195739px"><NOBR>return 
d</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 195756px"><NOBR>}</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 195772px"><NOBR>return 
NULL;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 195789px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 195825px"><NOBR>Although the 
<FONT face=Courier>fsize </FONT>program is rather specialized, it does 
illustrate a couple of important ideas. First, many</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 195845px"><NOBR>programs are 
not ``system programs''; they merely use information that is maintained by the 
operating system.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 195865px"><NOBR>For such 
programs, it is crucial that the representation of the information appear only 
in standard headers, and</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 195885px"><NOBR>that programs 
include those headers instead of embedding the declarations in themselves. The 
second</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 195904px"><NOBR>observation is 
that with care it is possible to create an interface to system−dependent objects 
that is itself</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 195924px"><NOBR>relatively 
system−independent. The functions of the standard library are good 
examples.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 195964px"><NOBR><I><B>Exercise 
8−5. </B></I>Modify the <FONT face=Courier>fsize </FONT>program to print the 
other information contained in the inode entry.</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=4><SPAN style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 196005px"><NOBR><B>8.7 
<B><SPAN class=goohl2>Example</SPAN></B> − A Storage 
Allocator</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 196052px"><NOBR>In <FONT 
face=Times color=#0000ff><A 
href="#86">Chapter 
5</A></FONT><A 
href="#86"></A>, 
we presented a vary limited stack−oriented storage allocator. The version that 
we will now write</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 196072px"><NOBR>is 
unrestricted. Calls to <FONT face=Courier>malloc </FONT>and <FONT 
face=Courier>free </FONT>may occur in any order; <FONT face=Courier>malloc 
</FONT>calls upon the operating system</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 196091px"><NOBR>to obtain more 
memory as necessary. These routines illustrate some of the considerations 
involved in writing</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 195049px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 196129px"><NOBR>8.7 <B><SPAN 
class=goohl2>Example</SPAN></B> − A Storage Allocator</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 196129px"><NOBR>165</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 196195px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=166><B>Page 166</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 196287px"><NOBR>machine−dependent 
code in a relatively machine−independent way, and also show a real−life 
application of</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 196307px"><NOBR>structures, 
unions and <FONT face=Courier>typedef</FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 196347px"><NOBR>Rather than 
allocating from a compiled−in fixed−size array, <FONT face=Courier>malloc 
</FONT>will request space from the operating</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 196366px"><NOBR>system as 
needed. Since other activities in the program may also request space without 
calling this allocator,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 196386px"><NOBR>the space that 
<FONT face=Courier>malloc </FONT>manages may not be contiguous. Thus its free 
storage is kept as a list of free blocks.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 196406px"><NOBR>Each block 
contains a size, a pointer to the next block, and the space itself. The blocks 
are kept in order of</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 196426px"><NOBR>increasing 
storage address, and the last block (highest address) points to the 
first.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 196855px"><NOBR>When a request 
is made, the free list is scanned until a big−enough block is found. This 
algorithm is called</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 196875px"><NOBR>``first fit,'' 
by contrast with ``best fit,'' which looks for the smallest block that will 
satisfy the request. If the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 196894px"><NOBR>block is 
exactly the size requested it is unlinked from the list and returned to the 
user. If the block is too big, it</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 196914px"><NOBR>is split, and 
the proper amount is returned to the user while the residue remains on the free 
list. If no</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 196934px"><NOBR>big−enough 
block is found, another large chunk is obtained by the operating system and 
linked into the free</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 196954px"><NOBR>list.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 196993px"><NOBR>Freeing also 
causes a search of the free list, to find the proper place to insert the block 
being freed. If the block</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 197013px"><NOBR>being freed is 
adjacent to a free block on either side, it is coalesced with it into a single 
bigger block, so</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 197033px"><NOBR>storage does 
not become too fragmented. Determining the adjacency is easy because the free 
list is maintained</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 197053px"><NOBR>in order of 
decreasing address.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 197092px"><NOBR>One problem, 
which we alluded to in <A 
href="#86"></A><FONT 
face=Times color=#0000ff><A 
href="#86">Chapter 
5</A></FONT><A 
href="#86"></A>, 
is to ensure that the storage returned by <FONT face=Courier>malloc </FONT>is 
aligned</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 197112px"><NOBR>properly for 
the objects that will be stored in it. Although machines vary, for each machine 
there is a most</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 197132px"><NOBR>restrictive 
type: if the most restrictive type can be stored at a particular address, all 
other types may be also.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 197152px"><NOBR>On some 
machines, the most restrictive type is a <FONT face=Courier>double</FONT>; on 
others, <FONT face=Courier>int </FONT>or <FONT face=Courier>long 
</FONT>suffices.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 197191px"><NOBR>A free block 
contains a pointer to the next block in the chain, a record of the size of the 
block, and then the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 197211px"><NOBR>free space 
itself; the control information at the beginning is called the ``header.'' To 
simplify alignment, all</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 197231px"><NOBR>blocks are 
multiples of the header size, and the header is aligned properly. This is 
achieved by a union that</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 197251px"><NOBR>contains the 
desired header structure and an instance of the most restrictive alignment type, 
which we have</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 197271px"><NOBR>arbitrarily 
made a <FONT face=Courier>long</FONT>:</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 196237px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 197317px"><NOBR>8.7 <B><SPAN 
class=goohl2>Example</SPAN></B> − A Storage Allocator</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 197317px"><NOBR>166</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 197383px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=167><B>Page 167</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 197475px"><NOBR>typedef long 
Align; /* for alignment to long boundary */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 197508px"><NOBR>union header { 
/* block header */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 197525px"><NOBR>struct 
{</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 197541px"><NOBR>union header 
*ptr; /* next block if on free list */</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 197558px"><NOBR>unsigned size; 
/* size of this block */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 197574px"><NOBR>} 
s;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 197591px"><NOBR>Align x; /* 
force alignment of blocks */</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 197607px"><NOBR>};</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 197640px"><NOBR>typedef union 
header Header;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 197677px"><NOBR>The <FONT 
face=Courier>Align </FONT>field is never used; it just forces each header to be 
aligned on a worst−case boundary.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 197716px"><NOBR>In <FONT 
face=Courier>malloc</FONT>, the requested size in characters is rounded up to 
the proper number of header−sized units; the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 197736px"><NOBR>block that 
will be allocated contains one more unit, for the header itself, and this is the 
value recorded in the</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 197757px"><NOBR>size <FONT 
face=Times>field of the header. The pointer returned by </FONT>malloc <FONT 
face=Times>points at the free space, not at the header 
itself.</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 197776px"><NOBR>The user can 
do anything with the space requested, but if anything is written outside of the 
allocated space the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 197795px"><NOBR>list is likely 
to be scrambled.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 198077px"><NOBR>The size field 
is necessary because the blocks controlled by <FONT face=Courier>malloc 
</FONT>need not be contiguous − it is not</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 198097px"><NOBR>possible to 
compute sizes by pointer arithmetic.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 198137px"><NOBR>The variable 
<FONT face=Courier>base </FONT>is used to get started. If <FONT 
face=Courier>freep </FONT>is <FONT face=Courier>NULL</FONT>, as it is at the 
first call of <FONT face=Courier>malloc</FONT>, then a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 198156px"><NOBR>degenerate 
free list is created; it contains one block of size zero, and points to itself. 
In any case, the free list is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 198176px"><NOBR>then searched. 
The search for a free block of adequate size begins at the point (<FONT 
face=Courier>freep</FONT>) where the last block</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 198196px"><NOBR>was found; 
this strategy helps keep the list homogeneous. If a too−big block is found, the 
tail end is returned</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 198216px"><NOBR>to the user; 
in this way the header of the original needs only to have its size adjusted. In 
all cases, the pointer</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 198236px"><NOBR>returned to 
the user points to the free space within the block, which begins one unit beyond 
the header.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 198275px"><NOBR>static Header 
base; /* empty list to get started */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 198291px"><NOBR>static Header 
*freep = NULL; /* start of free list */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 198324px"><NOBR>/* malloc: 
general−purpose storage allocator */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 198341px"><NOBR>void 
*malloc(unsigned nbytes)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 198357px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 198374px"><NOBR>Header *p, 
*prevp;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 198390px"><NOBR>Header 
*moreroce(unsigned);</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 198407px"><NOBR>unsigned 
nunits;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 198440px"><NOBR>nunits = 
(nbytes+sizeof(Header)−1)/sizeof(header) + 1;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 198456px"><NOBR>if ((prevp = 
freep) == NULL) { /* no free list yet */ </NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 197425px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 198505px"><NOBR>8.7 <B><SPAN 
class=goohl2>Example</SPAN></B> − A Storage Allocator</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 198505px"><NOBR>167</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 198571px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=168><B>Page 168</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 198663px"><NOBR>base.s.ptr = 
freeptr = prevptr = </NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 198680px"><NOBR>base.s.size = 
0;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 198696px"><NOBR>}</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 198713px"><NOBR>for (p = 
prevp−&gt;s.ptr; ; prevp = p, p = p−&gt;s.ptr) {</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 198729px"><NOBR>if 
(p−&gt;s.size &gt;= nunits) { /* big enough */</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 198746px"><NOBR>if 
(p−&gt;s.size == nunits) /* exactly */</NOBR></DIV>
<DIV 
style="LEFT: 265px; POSITION: absolute; TOP: 198762px"><NOBR>prevp−&gt;s.ptr = 
p−&gt;s.ptr;</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 198779px"><NOBR>else { /* 
allocate tail end */</NOBR></DIV>
<DIV style="LEFT: 265px; POSITION: absolute; TOP: 198795px"><NOBR>p−&gt;s.size 
−= nunits;</NOBR></DIV>
<DIV style="LEFT: 265px; POSITION: absolute; TOP: 198812px"><NOBR>p += 
p−&gt;s.size;</NOBR></DIV>
<DIV style="LEFT: 265px; POSITION: absolute; TOP: 198828px"><NOBR>p−&gt;s.size = 
nunits;</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 198845px"><NOBR>}</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 198861px"><NOBR>freep = 
prevp;</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 198878px"><NOBR>return (void 
*)(p+1);</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 198894px"><NOBR>}</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 198911px"><NOBR>if (p == 
freep) /* wrapped around free list */</NOBR></DIV>
<DIV style="LEFT: 232px; POSITION: absolute; TOP: 198927px"><NOBR>if ((p = 
morecore(nunits)) == NULL)</NOBR></DIV>
<DIV style="LEFT: 265px; POSITION: absolute; TOP: 198944px"><NOBR>return NULL; 
/* none left */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 198960px"><NOBR>}</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 198977px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 199013px"><NOBR>The function 
<FONT face=Courier>morecore </FONT>obtains storage from the operating system. 
The details of how it does this vary from</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 199033px"><NOBR>system to 
system. Since asking the system for memory is a comparatively expensive 
operation. we don't want</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 199053px"><NOBR>to do that on 
every call to <FONT face=Courier>malloc</FONT>, so <FONT face=Courier>morecore 
</FONT>requests al least <FONT face=Courier>NALLOC </FONT>units; this larger 
block will be</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 199072px"><NOBR>chopped up as 
needed. After setting the size field, <FONT face=Courier>morecore </FONT>inserts 
the additional memory into the arena by</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 199092px"><NOBR>calling <FONT 
face=Courier>free</FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 199132px"><NOBR>The UNIX 
system call <FONT face=Courier>sbrk(n) </FONT>returns a pointer to <FONT 
face=Courier>n </FONT>more bytes of storage. <FONT face=Courier>sbrk 
</FONT>returns <FONT face=Courier>−1 </FONT>if there was</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 199152px"><NOBR>no space, even 
though <FONT face=Courier>NULL </FONT>could have been a better design. The <FONT 
face=Courier>−1 </FONT>must be cast to <FONT face=Courier>char * </FONT>so it 
can be</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 199171px"><NOBR>compared with 
the return value. Again, casts make the function relatively immune to the 
details of pointer</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 199191px"><NOBR>representation 
on different machines. There is still one assumption, however, that pointers to 
different blocks</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 199211px"><NOBR>returned by 
<FONT face=Courier>sbrk </FONT>can be meaningfully compared. This is not 
guaranteed by the standard, which permits</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 199231px"><NOBR>pointer 
comparisons only within an array. Thus this version of <FONT face=Courier>malloc 
</FONT>is portable only among machines for</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 199251px"><NOBR>which general 
pointer comparison is meaningful.</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 199290px"><NOBR>#define NALLOC 
1024 /* minimum #units to request */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 199323px"><NOBR>/* morecore: 
ask system for more memory */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 199340px"><NOBR>static Header 
*morecore(unsigned nu)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 199356px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 199373px"><NOBR>char *cp, 
*sbrk(int);</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 199389px"><NOBR>Header 
*up;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 199422px"><NOBR>if (nu &lt; 
NALLOC)</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 199439px"><NOBR>nu = 
NALLOC;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 199455px"><NOBR>cp = sbrk(nu * 
sizeof(Header));</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 199472px"><NOBR>if (cp == 
(char *) −1) /* no space at all */</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 199488px"><NOBR>return 
NULL;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 199505px"><NOBR>up = (Header 
*) cp;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 199521px"><NOBR>up−&gt;s.size 
= nu;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 199538px"><NOBR>free((void 
*)(up+1));</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 199554px"><NOBR>return 
freep;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 199571px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 199608px"><NOBR>free <FONT 
face=Times>itself is the last thing. It scans the free list, starting at 
</FONT>freep<FONT face=Times>, looking for the place to insert the 
free</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 199627px"><NOBR>block. This is 
either between two existing blocks or at the end of the list. In any case, if 
the block being freed</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 199647px"><NOBR>is adjacent to 
either neighbor, the adjacent blocks are combined. The only troubles are keeping 
the pointers</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 198613px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 199693px"><NOBR>8.7 <B><SPAN 
class=goohl2>Example</SPAN></B> − A Storage Allocator</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 199693px"><NOBR>168</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 199759px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=169><B>Page 169</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 199851px"><NOBR>pointing to 
the right things and the sizes correct.</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 199891px"><NOBR>/* free: put 
block ap in free list */</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 199907px"><NOBR>void free(void 
*ap)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 199924px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 199940px"><NOBR>Header *bp, 
*p;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 199973px"><NOBR>bp = (Header 
*)ap − 1; /* point to block header */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 199990px"><NOBR>for (p = 
freep; !(bp &gt; p &amp;bp &lt; p−&gt;s.ptr); p = p−&gt;s.ptr)</NOBR></DIV>
<DIV style="LEFT: 207px; POSITION: absolute; TOP: 200006px"><NOBR>if (p &gt;= 
p−&gt;s.ptr &amp;(bp &gt; p || bp &lt; p−&gt;s.ptr))</NOBR></DIV>
<DIV style="LEFT: 240px; POSITION: absolute; TOP: 200023px"><NOBR>break; /* 
freed block at start or end of arena */</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 200056px"><NOBR>if (bp + 
bp−&gt;size == p−&gt;s.ptr) { /* join to upper nbr */</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 200072px"><NOBR>bp−&gt;s.size 
+= p−&gt;s.ptr−&gt;s.size;</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 200089px"><NOBR>bp−&gt;s.ptr = 
p−&gt;s.ptr−&gt;s.ptr;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 200105px"><NOBR>} 
else</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 200122px"><NOBR>bp−&gt;s.ptr = 
p−&gt;s.ptr;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 200138px"><NOBR>if (p + 
p−&gt;size == bp) { /* join to lower nbr */</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 200155px"><NOBR>p−&gt;s.size 
+= bp−&gt;s.size;</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 200171px"><NOBR>p−&gt;s.ptr = 
bp−&gt;s.ptr;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 200188px"><NOBR>} 
else</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 200204px"><NOBR>p−&gt;s.ptr = 
bp;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 200221px"><NOBR>freep = 
p;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 200237px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 200274px"><NOBR>Although 
storage allocation is intrinsically machine−dependent, the code above 
illustrates how the machine</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 200293px"><NOBR>dependencies 
can be controlled and confined to a very small part of the program. The use of 
<FONT face=Courier>typedef </FONT>and</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 200314px"><NOBR>union <FONT 
face=Times>handles alignment (given that </FONT>sbrk <FONT face=Times>supplies 
an appropriate pointer). Casts arrange that 
pointer</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 200333px"><NOBR>conversions 
are made explicit, and even cope with a badly−designed system interface. Even 
though the details</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 200353px"><NOBR>here are 
related to storage allocation, the general approach is applicable to other 
situations as well.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 200392px"><NOBR><I><B>Exercise 
8−6. </B></I>The standard library function <FONT face=Courier>calloc(n,size) 
</FONT>returns a pointer to <FONT face=Courier>n </FONT>objects of size <FONT 
face=Courier>size</FONT>,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 200412px"><NOBR>with the 
storage initialized to zero. Write <FONT face=Courier>calloc</FONT>, by calling 
<FONT face=Courier>malloc </FONT>or by modifying it.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 200452px"><NOBR><I><B>Exercise 
8−7. </B></I><FONT face=Courier>malloc </FONT>accepts a size request without 
checking its plausibility; <FONT face=Courier>free </FONT>believes that the 
block</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 200472px"><NOBR>it is asked to 
free contains a valid size field. Improve these routines so they make more pains 
with error</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 200491px"><NOBR>checking.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 200531px"><NOBR><I><B>Exercise 
8−8. </B></I>Write a routine <FONT face=Courier>bfree(p,n) </FONT>that will free 
any arbitrary block <FONT face=Courier>p </FONT>of <FONT face=Courier>n 
</FONT>characters into the free</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 200551px"><NOBR>list 
maintained by <FONT face=Courier>malloc </FONT>and <FONT 
face=Courier>free</FONT>. By using <FONT face=Courier>bfree</FONT>, a user can 
add a static or external array to the free</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 200571px"><NOBR>list at any 
time.</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 312px; POSITION: absolute; TOP: 200613px"><NOBR><A 
href="#138">Back 
to Chapter 7 </A><FONT face=Times color=#000000>−− </FONT><A 
href="#1">Index 
</A><FONT face=Times color=#000000>−− </FONT><A 
href="#170">Appendix 
A</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 199801px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 200881px"><NOBR>8.7 <B><SPAN 
class=goohl2>Example</SPAN></B> − A Storage Allocator</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 200881px"><NOBR>169</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 200947px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=170><B>Page 170</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 312px; POSITION: absolute; TOP: 201062px"><NOBR><A 
href="#153">Back 
to Chapter 8 </A><FONT face=Times color=#000000>−− </FONT><A 
href="#1">Index 
</A><FONT face=Times color=#000000>−− </FONT><A 
href="#221">Appendix 
B</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=4><SPAN 
style="FONT-SIZE: 26px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 201107px"><NOBR><B>Appendix A 
− Reference Manual</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=4><SPAN 
style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 201160px"><NOBR><B>A.1 
Introduction</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 201207px"><NOBR>This manual 
describes the C language specified by the draft submitted to ANSI on 31 October, 
1988, for</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 201227px"><NOBR>approval as 
``American Standard for Information Systems − programming Language C, 
X3.159−1989.'' The</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 201247px"><NOBR>manual is an 
interpretation of the proposed standard, not the standard itself, although care 
has been taken to</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 201266px"><NOBR>make it a 
reliable guide to the language.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 201306px"><NOBR>For the most 
part, this document follows the broad outline of the standard, which in turn 
follows that of the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 201326px"><NOBR>first edition 
of this book, although the organization differs in detail. Except for renaming a 
few productions,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 201346px"><NOBR>and not 
formalizing the definitions of the lexical tokens or the preprocessor, the 
grammar given here for the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 201365px"><NOBR>language 
proper is equivalent to that of the standard.</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 201404px"><NOBR>Throughout 
this manual, commentary material is indented and written in smaller type, as 
this is. Most often these</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 201421px"><NOBR>comments 
highlight ways in which ANSI Standard C differs from the language defined by the 
first edition of this book, or</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 201437px"><NOBR>from 
refinements subsequently introduced in various 
compilers.</NOBR></DIV></SPAN></FONT><FONT face=Times size=4><SPAN 
style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 201476px"><NOBR><B>A.2 Lexical 
Conventions</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 201523px"><NOBR>A program 
consists of one or more <I>translation units </I>stored in files. It is 
translated in several phases, which are</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 201542px"><NOBR>described in 
<A 
href="#207"></A><FONT 
face=Times color=#0000ff><A 
href="#207">Par.A.12</A></FONT><A 
href="#207"></A>. 
The first phases do low−level lexical transformations, carry out directives 
introduced</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 201562px"><NOBR>by the lines 
beginning with the # character, and perform macro definition and expansion. When 
the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 201582px"><NOBR>preprocessing 
of <FONT face=Times color=#0000ff><A 
href="#207">Par.A.12 
</A></FONT>is complete, the program has been reduced to a sequence of 
tokens.</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 201622px"><NOBR><B>A.2.1 
Tokens</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 201665px"><NOBR>There are six 
classes of tokens: identifiers, keywords, constants, string literals, operators, 
and other separators.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 201685px"><NOBR>Blanks, 
horizontal and vertical tabs, newlines, formfeeds and comments as described 
below (collectively,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 201705px"><NOBR>``white 
space'') are ignored except as they separate tokens. Some white space is 
required to separate otherwise</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 201725px"><NOBR>adjacent 
identifiers, keywords, and constants.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 201764px"><NOBR>If the input 
stream has been separated into tokens up to a given character, the next token is 
the longest string</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 201784px"><NOBR>of characters 
that could constitute a token.</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 201824px"><NOBR><B>A.2.2 
Comments</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 201867px"><NOBR>The characters 
<FONT face=Courier>/* </FONT>introduce a comment, which terminates with the 
characters <FONT face=Courier>*/</FONT>. Comments do not nest, and</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 201887px"><NOBR>they do not 
occur within a string or character literals.</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 201927px"><NOBR><B>A.2.3 
Identifiers</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 201970px"><NOBR>An identifier 
is a sequence of letters and digits. The first character must be a letter; the 
underscore <FONT face=Courier>_ </FONT>counts as</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 201990px"><NOBR>a letter. 
Upper and lower case letters are different. Identifiers may have any length, and 
for internal identifiers,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 202010px"><NOBR>at least the 
first 31 characters are significant; some implementations may take more 
characters significant.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 202029px"><NOBR>Internal 
identifiers include preprocessor macro names and all other names that do not 
have external linkage</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 200989px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 202069px"><NOBR>Appendix A − 
Reference Manual</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 202069px"><NOBR>170</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 202135px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=171><B>Page 171</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 202227px"><NOBR>(<FONT 
face=Times color=#0000ff><A 
href="#207">Par.A.11.2</A></FONT><A 
href="#207"></A>). 
Identifiers with external linkage are more restricted: implementations may make 
as few as the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 202247px"><NOBR>first six 
characters significant, and may ignore case 
distinctions.</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 202287px"><NOBR><B>A.2.4 
Keywords</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 202330px"><NOBR>The following 
identifiers are reserved for the use as keywords, and may not be used 
otherwise:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 149px; POSITION: absolute; TOP: 202370px"><NOBR>auto double 
int struct</NOBR></DIV>
<DIV style="LEFT: 149px; POSITION: absolute; TOP: 202386px"><NOBR>break else 
long switch</NOBR></DIV>
<DIV style="LEFT: 149px; POSITION: absolute; TOP: 202403px"><NOBR>case enum 
register typedef</NOBR></DIV>
<DIV style="LEFT: 149px; POSITION: absolute; TOP: 202419px"><NOBR>char extern 
return union</NOBR></DIV>
<DIV style="LEFT: 149px; POSITION: absolute; TOP: 202436px"><NOBR>const float 
short unsigned</NOBR></DIV>
<DIV style="LEFT: 149px; POSITION: absolute; TOP: 202452px"><NOBR>continue for 
signed void</NOBR></DIV>
<DIV style="LEFT: 149px; POSITION: absolute; TOP: 202469px"><NOBR>default goto 
sizeof volatile</NOBR></DIV>
<DIV style="LEFT: 149px; POSITION: absolute; TOP: 202485px"><NOBR>do if static 
while</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 202522px"><NOBR>Some 
implementations also reserve the words <FONT face=Courier>fortran </FONT>and 
<FONT face=Courier>asm</FONT>.</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 202560px"><NOBR>The keywords 
<FONT face=Courier>const</FONT>, <FONT face=Courier>signed</FONT>, and <FONT 
face=Courier>volatile </FONT>are new with the ANSI standard; <FONT 
face=Courier>enum </FONT>and <FONT face=Courier>void </FONT>are new since 
the</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 202577px"><NOBR>first edition, 
but in common use; <FONT face=Courier>entry</FONT>, formerly reserved but never 
used, is no longer reserved.</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 202614px"><NOBR><B>A.2.5 
Constants</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 202658px"><NOBR>There are 
several kinds of constants. Each has a data type; <A 
href="#174"></A><FONT 
face=Times color=#0000ff><A 
href="#174">Par.A.4.2 
</A></FONT>discusses the basic types:</NOBR></DIV>
<DIV 
style="LEFT: 125px; POSITION: absolute; TOP: 202697px"><NOBR><I>constant:</I></NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 202717px"><NOBR><I>integer−constant</I></NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 202737px"><NOBR><I>character−constant</I></NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 202757px"><NOBR><I>floating−constant</I></NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 202776px"><NOBR><I>enumeration−constant</I></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 202815px"><NOBR><B>A.2.5.1 
Integer Constants</B></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 202856px"><NOBR>An integer 
constant consisting of a sequence of digits is taken to be octal if it begins 
with 0 (digit zero),</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 202875px"><NOBR>decimal 
otherwise. Octal constants do not contain the digits <FONT face=Courier>8 
</FONT>or <FONT face=Courier>9</FONT>. A sequence of digits preceded by <FONT 
face=Courier>0x </FONT>or</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 202896px"><NOBR>0X <FONT 
face=Times>(digit zero) is taken to be a hexadecimal integer. The hexadecimal 
digits include </FONT>a <FONT face=Times>or </FONT>A <FONT face=Times>through 
</FONT>f <FONT face=Times>or </FONT>F</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 202915px"><NOBR>with values 
<FONT face=Courier>10 </FONT>through <FONT face=Courier>15</FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 202955px"><NOBR>An integer 
constant may be suffixed by the letter <FONT face=Courier>u </FONT>or <FONT 
face=Courier>U</FONT>, to specify that it is unsigned. It may also be 
suffixed</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 202974px"><NOBR>by the letter 
<FONT face=Courier>l </FONT>or <FONT face=Courier>L </FONT>to specify that it is 
long.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 203014px"><NOBR>The type of an 
integer constant depends on its form, value and suffix. (See <FONT face=Times 
color=#0000ff><A 
href="#173">Par.A.4 
</A></FONT>for a discussion of types).</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 203034px"><NOBR>If it is 
unsuffixed and decimal, it has the first of these types in which its value can 
be represented: <FONT face=Courier>int</FONT>, <FONT 
face=Courier>long</FONT></NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 203054px"><NOBR>int<FONT 
face=Times>, </FONT>unsigned long int<FONT face=Times>. If it is unsuffixed, 
octal or hexadecimal, it has the first possible of 
these</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 203073px"><NOBR>types: <FONT 
face=Courier>int</FONT>, <FONT face=Courier>unsigned int</FONT>, <FONT 
face=Courier>long int</FONT>, <FONT face=Courier>unsigned long int</FONT>. If it 
is suffixed by <FONT face=Courier>u </FONT>or <FONT face=Courier>U</FONT>, 
then</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 203094px"><NOBR>unsigned 
int<FONT face=Times>, </FONT>unsigned long int<FONT face=Times>. If it is 
suffixed by </FONT>l <FONT face=Times>or </FONT>L<FONT face=Times>, then 
</FONT>long int<FONT face=Times>, </FONT>unsigned long</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 203114px"><NOBR>int<FONT 
face=Times>. If an integer constant is suffixed by </FONT>UL<FONT face=Times>, 
it is </FONT>unsigned long<FONT 
face=Times>.</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 203152px"><NOBR>The 
elaboration of the types of integer constants goes considerably beyond the first 
edition, which merely caused large</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 203168px"><NOBR>integer 
constants to be <FONT face=Courier>long</FONT>. The <FONT face=Courier>U 
</FONT>suffixes are new.</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 202177px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 203257px"><NOBR>A.2.4 
Keywords</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 203257px"><NOBR>171</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 203323px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=172><B>Page 172</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 203415px"><NOBR><B>A.2.5.2 
Character Constants</B></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 203455px"><NOBR>A character 
constant is a sequence of one or more characters enclosed in single quotes as in 
<FONT face=Courier>'x'</FONT>. The value of</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 203475px"><NOBR>a character 
constant with only one character is the numeric value of the character in the 
machine's character</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 203494px"><NOBR>set at 
execution time. The value of a multi−character constant is 
implementation−defined.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 203534px"><NOBR>Character 
constants do not contain the <FONT face=Courier>' </FONT>character or newlines; 
in order to represent them, and certain other</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 203554px"><NOBR>characters, 
the following escape sequences may be used:</NOBR></DIV>
<DIV style="LEFT: 301px; POSITION: absolute; TOP: 203596px"><NOBR>horizontal tab 
HT <FONT face=Courier>\t </FONT>question mark <FONT 
face=Courier>?</FONT></NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 604px; POSITION: absolute; TOP: 203596px"><NOBR>\?</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 301px; POSITION: absolute; TOP: 203622px"><NOBR>vertical 
tab</NOBR></DIV>
<DIV style="LEFT: 405px; POSITION: absolute; TOP: 203622px"><NOBR>VT <FONT 
face=Courier>\v </FONT>single quote</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 569px; POSITION: absolute; TOP: 203623px"><NOBR>'</NOBR></DIV>
<DIV 
style="LEFT: 604px; POSITION: absolute; TOP: 203623px"><NOBR>\'</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 301px; POSITION: absolute; TOP: 203648px"><NOBR>backspace</NOBR></DIV>
<DIV style="LEFT: 405px; POSITION: absolute; TOP: 203648px"><NOBR>BS <FONT 
face=Courier>\b </FONT>double quote <FONT 
face=Courier>"</FONT></NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 604px; POSITION: absolute; TOP: 203649px"><NOBR>\"</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 301px; POSITION: absolute; TOP: 203674px"><NOBR>carriage 
return CR <FONT face=Courier>\r </FONT>octal number <FONT face=Courier>ooo 
\ooo</FONT></NOBR></DIV>
<DIV 
style="LEFT: 301px; POSITION: absolute; TOP: 203701px"><NOBR>formfeed</NOBR></DIV>
<DIV style="LEFT: 405px; POSITION: absolute; TOP: 203701px"><NOBR>FF <FONT 
face=Courier>\f </FONT>hex number</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 569px; POSITION: absolute; TOP: 203701px"><NOBR>hh 
\xhh</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 301px; POSITION: absolute; TOP: 203727px"><NOBR>audible 
alert</NOBR></DIV>
<DIV style="LEFT: 405px; POSITION: absolute; TOP: 203727px"><NOBR>BEL <FONT 
face=Courier>\a</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 203751px"><NOBR>The escape 
<FONT face=Courier>\ooo </FONT>consists of the backslash followed by 1, 2, or 3 
octal digits, which are taken to specify the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 203771px"><NOBR>value of the 
desired character. A common <B><SPAN class=goohl2>example</SPAN></B> of this 
construction is <FONT face=Courier>\0 </FONT>(not followed by a digit), 
which</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 203791px"><NOBR>specifies the 
character NUL. The escape <FONT face=Courier>\xhh </FONT>consists of the 
backslash, followed by <FONT face=Courier>x</FONT>, followed by</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 203810px"><NOBR>hexadecimal 
digits, which are taken to specify the value of the desired character. There is 
no limit on the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 203830px"><NOBR>number of 
digits, but the behavior is undefined if the resulting character value exceeds 
that of the largest</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 203850px"><NOBR>character. For 
either octal or hexadecimal escape characters, if the implementation treats the 
<FONT face=Courier>char </FONT>type as</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 203870px"><NOBR>signed, the 
value is sign−extended as if cast to <FONT face=Courier>char </FONT>type. If the 
character following the \ is not one of those</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 203890px"><NOBR>specified, the 
behavior is undefined.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 203929px"><NOBR>In some 
implementations, there is an extended set of characters that cannot be 
represented in the <FONT face=Courier>char </FONT>type.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 203949px"><NOBR>A constant in 
this extended set is written with a preceding <FONT face=Courier>L</FONT>, for 
<B><SPAN class=goohl2>example</SPAN></B> <FONT face=Courier>L'x'</FONT>, and is 
called a wide character</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 203969px"><NOBR>constant. Such 
a constant has type <FONT face=Courier>wchar_t</FONT>, an integral type defined 
in the standard header <FONT face=Courier>&lt;stddef.h&gt;</FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 203989px"><NOBR>As with 
ordinary character constants, hexadecimal escapes may be used; the effect is 
undefined if the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 204008px"><NOBR>specified 
value exceeds that representable with <FONT 
face=Courier>wchar_t</FONT>.</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 204047px"><NOBR>Some of these 
escape sequences are new, in particular the hexadecimal character 
representation. Extended characters are</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 204063px"><NOBR>also new. The 
character sets commonly used in the Americas and western Europe can be encoded 
to fit in the <FONT face=Courier>char </FONT>type;</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 204080px"><NOBR>the main 
intent in adding <FONT face=Courier>wchar_t </FONT>was to accommodate Asian 
languages.</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 204117px"><NOBR><B>A.2.5.3 
Floating Constants</B></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 204157px"><NOBR>A floating 
constant consists of an integer part, a decimal part, a fraction part, an <FONT 
face=Courier>e </FONT>or <FONT face=Courier>E</FONT>, an optionally 
signed</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 204177px"><NOBR>integer 
exponent and an optional type suffix, one of <FONT face=Courier>f</FONT>, <FONT 
face=Courier>F</FONT>, <FONT face=Courier>l</FONT>, or <FONT 
face=Courier>L</FONT>. The integer and fraction parts both consist</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 204196px"><NOBR>of a sequence 
of digits. Either the integer part, or the fraction part (not both) may be 
missing; either the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 204216px"><NOBR>decimal point 
or the <FONT face=Courier>e </FONT>and the exponent (not both) may be missing. 
The type is determined by the suffix; <FONT face=Courier>F 
</FONT>or</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 204237px"><NOBR>f <FONT 
face=Times>makes it </FONT>float<FONT face=Times>, </FONT>L <FONT face=Times>or 
</FONT>l <FONT face=Times>makes it </FONT>long double<FONT face=Times>, 
otherwise it is </FONT>double<FONT 
face=Times>.</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 204275px"><NOBR><B>A2.5.4 
Enumeration Constants</B></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 204315px"><NOBR>Identifiers 
declared as enumerators (see <A 
href="#193"></A><FONT 
face=Times color=#0000ff><A 
href="#193">Par.A.8.4</A></FONT><A 
href="#193"></A>) 
are constants of type <FONT face=Courier>int</FONT>.</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 203365px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 204445px"><NOBR>A.2.5 
Constants</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 204445px"><NOBR>172</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 204511px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=173><B>Page 173</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 204604px"><NOBR><B>A.2.6 
String Literals</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 204647px"><NOBR>A string 
literal, also called a string constant, is a sequence of characters surrounded 
by double quotes as in</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 204667px"><NOBR>"..."<FONT 
face=Times>. A string has type ``array of characters'' and storage class 
</FONT>static <FONT face=Times>(see </FONT><FONT face=Times color=#0000ff><A 
href="#173">Par.A.3 
</A></FONT><FONT face=Times>below) and is</FONT></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 204686px"><NOBR>initialized 
with the given characters. Whether identical string literals are distinct is 
implementation−defined,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 204706px"><NOBR>and the 
behavior of a program that attempts to alter a string literal is 
undefined.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 204746px"><NOBR>Adjacent 
string literals are concatenated into a single string. After any concatenation, 
a null byte <FONT face=Courier>\0 </FONT>is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 204766px"><NOBR>appended to 
the string so that programs that scan the string can find its end. String 
literals do not contain</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 204785px"><NOBR>newline or 
double−quote characters; in order to represent them, the same escape sequences 
as for character</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 204805px"><NOBR>constants are 
available.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 204845px"><NOBR>As with 
character constants, string literals in an extended character set are written 
with a preceding <FONT face=Courier>L</FONT>, as 
in</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 204865px"><NOBR>L"..."<FONT 
face=Times>. Wide−character string literals have type ``array of 
</FONT>wchar_t<FONT face=Times>.'' Concatenation of ordinary and 
wide</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 204884px"><NOBR>string 
literals is undefined.</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 204923px"><NOBR>The 
specification that string literals need not be distinct, and the prohibition 
against modifying them, are new in the ANSI</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 204940px"><NOBR>standard, as 
is the concatenation of adjacent string literals. Wide−character string literals 
are new.</NOBR></DIV></SPAN></FONT><FONT face=Times size=4><SPAN 
style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 204978px"><NOBR><B>A.3 Syntax 
Notation</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 205025px"><NOBR>In the syntax 
notation used in this manual, syntactic categories are indicated by <I>italic 
</I>type, and literal words</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 205045px"><NOBR>and characters 
in <FONT face=Courier>typewriter </FONT>style. Alternative categories are 
usually listed on separate lines; in a few</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 205065px"><NOBR>cases, a long 
set of narrow alternatives is presented on one line, marked by the phrase ``one 
of.'' An optional</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 205085px"><NOBR>terminal or 
nonterminal symbol carries the subscript ``<I>opt</I>,'' so that, for <B><SPAN 
class=goohl2>example</SPAN></B>,</NOBR></DIV>
<DIV style="LEFT: 419px; POSITION: absolute; TOP: 205124px"><NOBR>{ 
<I>expression</I></NOBR></DIV></SPAN></FONT><FONT face=Times size=2><SPAN 
style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 501px; POSITION: absolute; TOP: 205130px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 520px; POSITION: absolute; TOP: 205124px"><NOBR>}</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 205164px"><NOBR>means an 
optional expression, enclosed in braces. The syntax is summarized in <FONT 
face=Times color=#0000ff><A 
href="#213">Par.A.13</A></FONT><A 
href="#213"></A>.</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 205202px"><NOBR>Unlike the 
grammar given in the first edition of this book, the one given here makes 
precedence and associativity of</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 205219px"><NOBR>expression 
operators explicit.</NOBR></DIV></SPAN></FONT><FONT face=Times size=4><SPAN 
style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 205258px"><NOBR><B>A.4 Meaning 
of Identifiers</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 205304px"><NOBR>Identifiers, 
or names, refer to a variety of things: functions; tags of structures, unions, 
and enumerations;</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 205324px"><NOBR>members of 
structures or unions; enumeration constants; typedef names; and objects. An 
object, sometimes</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 205344px"><NOBR>called a 
variable, is a location in storage, and its interpretation depends on two main 
attributes: its <I>storage</I></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 205364px"><NOBR><I>class 
</I>and its <I>type</I>. The storage class determines the lifetime of the 
storage associated with the identified object;</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 205384px"><NOBR>the type 
determines the meaning of the values found in the identified object. A name also 
has a scope, which</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 205403px"><NOBR>is the region 
of the program in which it is known, and a linkage, which determines whether the 
same name in</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 205423px"><NOBR>another scope 
refers to the same object or function. Scope and linkage are discussed in <A 
href="#206"></A><FONT 
face=Times color=#0000ff><A 
href="#206">Par.A.11</A></FONT>.</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 205463px"><NOBR><B>A.4.1 
Storage Class</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 205506px"><NOBR>There are two 
storage classes: automatic and static. Several keywords, together with the 
context of an object's</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 205526px"><NOBR>declaration, 
specify its storage class. Automatic objects are local to a block (<FONT 
face=Times color=#0000ff><A 
href="#201">Par.9.3</A></FONT><A 
href="#201"></A>), 
and are discarded on exit</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 205546px"><NOBR>from the 
block. Declarations within a block create automatic objects if no storage class 
specification is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 205566px"><NOBR>mentioned, or 
if the <FONT face=Courier>auto </FONT>specifier is used. Objects declared <FONT 
face=Courier>register </FONT>are automatic, and are (if possible)</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 205586px"><NOBR>stored in fast 
registers of the machine.</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 204553px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 205633px"><NOBR>A.2.6 String 
Literals</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 205633px"><NOBR>173</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 205699px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=174><B>Page 174</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 205791px"><NOBR>Static objects 
may be local to a block or external to all blocks, but in either case retain 
their values across exit</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 205811px"><NOBR>from and 
reentry to functions and blocks. Within a block, including a block that provides 
the code for a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 205831px"><NOBR>function, 
static objects are declared with the keyword <FONT face=Courier>static</FONT>. 
The objects declared outside all blocks, at the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 205851px"><NOBR>same level as 
function definitions, are always static. They may be made local to a particular 
translation unit by</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 205870px"><NOBR>use of the 
<FONT face=Courier>static </FONT>keyword; this gives them <I>internal 
linkage</I>. They become global to an entire program by</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 205890px"><NOBR>omitting an 
explicit storage class, or by using the keyword <FONT 
face=Courier>extern</FONT>; this gives them <I>external 
linkage</I>.</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 205930px"><NOBR><B>A.4.2 Basic 
Types</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 205973px"><NOBR>There are 
several fundamental types. The standard header <FONT 
face=Courier>&lt;limits.h&gt; </FONT>described in <FONT face=Times 
color=#0000ff><A 
href="#221">Appendix 
B </A></FONT>defines the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 205993px"><NOBR>largest and 
smallest values of each type in the local implementation. The numbers given in 
<FONT face=Times color=#0000ff><A 
href="#221">Appendix 
B </A></FONT>show</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 206013px"><NOBR>the smallest 
acceptable magnitudes.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 206053px"><NOBR>Objects 
declared as characters (<FONT face=Courier>char</FONT>) are large enough to 
store any member of the execution character set. If</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 206072px"><NOBR>a genuine 
character from that set is stored in a <FONT face=Courier>char </FONT>object, 
its value is equivalent to the integer code for the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 206092px"><NOBR>character, and 
is non−negative. Other quantities may be stored into <FONT face=Courier>char 
</FONT>variables, but the available range of</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 206112px"><NOBR>values, and 
especially whether the value is signed, is 
implementation−dependent.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 206152px"><NOBR>Unsigned 
characters declared <FONT face=Courier>unsigned char </FONT>consume the same 
amount of space as plain characters, but</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 206171px"><NOBR>always appear 
non−negative; explicitly signed characters declared <FONT face=Courier>signed 
char </FONT>likewise take the same</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 206191px"><NOBR>space as plain 
characters.</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 206230px"><NOBR>unsigned <FONT 
face=Courier>char </FONT>type does not appear in the first edition of this book, 
but is in common use. <FONT face=Courier>signed char </FONT>is 
new.</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 206267px"><NOBR>Besides the 
<FONT face=Courier>char </FONT>types, up to three sizes of integer, declared 
<FONT face=Courier>short int</FONT>, <FONT face=Courier>int</FONT>, and <FONT 
face=Courier>long int</FONT>, are</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 206287px"><NOBR>available. 
Plain <FONT face=Courier>int </FONT>objects have the natural size suggested by 
the host machine architecture; the other sizes</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 206307px"><NOBR>are provided 
to meet special needs. Longer integers provide at least as much storage as 
shorter ones, but the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 206326px"><NOBR>implementation 
may make plain integers equivalent to either short integers, or long integers. 
The <FONT face=Courier>int </FONT>types</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 206346px"><NOBR>all represent 
signed values unless specified otherwise.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 206386px"><NOBR>Unsigned 
integers, declared using the keyword <FONT face=Courier>unsigned</FONT>, obey 
the laws of arithmetic modulo 2</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 756px; POSITION: absolute; TOP: 206382px"><NOBR><I>n</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 766px; POSITION: absolute; TOP: 206386px"><NOBR>where <I>n 
</I>is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 206406px"><NOBR>the number of 
bits in the representation, and thus arithmetic on unsigned quantities can never 
overflow. The</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 206425px"><NOBR>set of 
non−negative values that can be stored in a signed object is a subset of the 
values that can be stored in</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 206445px"><NOBR>the 
corresponding unsigned object, and the representation for the overlapping values 
is the same.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 206485px"><NOBR>Any of single 
precision floating point (<FONT face=Courier>float</FONT>), double precision 
floating point (<FONT face=Courier>double</FONT>), and extra</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 206505px"><NOBR>precision 
floating point (<FONT face=Courier>long double</FONT>) may be synonymous, but 
the ones later in the list are at least as</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 206524px"><NOBR>precise as 
those before.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 206564px"><NOBR>long double 
<FONT face=Times>is new. The first edition made </FONT>long float <FONT 
face=Times>equivalent to </FONT>double<FONT face=Times>; the locution has been 
withdrawn.</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 206600px"><NOBR><I>Enumerations 
</I>are unique types that have integral values; associated with each enumeration 
is a set of named</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 206620px"><NOBR>constants (<A 
href="#193"></A><FONT 
face=Times color=#0000ff><A 
href="#193">Par.A.8.4</A></FONT><A 
href="#193"></A>). 
Enumerations behave like integers, but it is common for a compiler to issue a 
warning</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 206640px"><NOBR>when an object 
of a particular enumeration is assigned something other than one of its 
constants, or an</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 206660px"><NOBR>expression of 
its type.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 206699px"><NOBR>Because 
objects of these types can be interpreted as numbers, they will be referred to 
as <I>arithmetic </I>types.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 206719px"><NOBR>Types <FONT 
face=Courier>char</FONT>, and <FONT face=Courier>int </FONT>of all sizes, each 
with or without sign, and also enumeration types, will collectively 
be</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 206739px"><NOBR>called 
<I>integral </I>types. The types <FONT face=Courier>float</FONT>, <FONT 
face=Courier>double</FONT>, and <FONT face=Courier>long double </FONT>will be 
called <I>floating </I>types.</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 205741px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 206821px"><NOBR>A.4.2 Basic 
Types</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 206821px"><NOBR>174</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 206887px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=175><B>Page 175</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 206979px"><NOBR>The <FONT 
face=Courier>void </FONT>type specifies an empty set of values. It is used as 
the type returned by functions that generate no</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 206999px"><NOBR>value.</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 207039px"><NOBR><B>A.4.3 
Derived types</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 207082px"><NOBR>Beside the 
basic types, there is a conceptually infinite class of derived types constructed 
from the fundamental</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 207102px"><NOBR>types in the 
following ways:</NOBR></DIV>
<DIV style="LEFT: 128px; POSITION: absolute; TOP: 207142px"><NOBR><I>arrays 
</I>of objects of a given type;</NOBR></DIV>
<DIV style="LEFT: 128px; POSITION: absolute; TOP: 207161px"><NOBR><I>functions 
</I>returning objects of a given type;</NOBR></DIV>
<DIV style="LEFT: 128px; POSITION: absolute; TOP: 207181px"><NOBR><I>pointers 
</I>to objects of a given type;</NOBR></DIV>
<DIV style="LEFT: 128px; POSITION: absolute; TOP: 207201px"><NOBR><I>structures 
</I>containing a sequence of objects of various types;</NOBR></DIV>
<DIV style="LEFT: 128px; POSITION: absolute; TOP: 207221px"><NOBR><I>unions 
</I>capable of containing any of one of several objects of various 
types.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 207260px"><NOBR>In general 
these methods of constructing objects can be applied 
recursively.</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 207300px"><NOBR><B>A.4.4 Type 
Qualifiers</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 207344px"><NOBR>An object's 
type may have additional qualifiers. Declaring an object <FONT 
face=Courier>const </FONT>announces that its value will not</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 207363px"><NOBR>be changed; 
declaring it <FONT face=Courier>volatile </FONT>announces that it has special 
properties relevant to optimization. Neither</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 207383px"><NOBR>qualifier 
affects the range of values or arithmetic properties of the object. Qualifiers 
are discussed in</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff 
size=3><SPAN style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 207403px"><NOBR><A 
href="#189">Par.A.8.2</A><FONT 
face=Times color=#000000><A 
href="#189"></A>.</FONT></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=4><SPAN style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 207444px"><NOBR><B>A.5 Objects 
and Lvalues</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 207491px"><NOBR>An <I>Object 
</I>is a named region of storage; an <I>lvalue </I>is an expression referring to 
an object. An obvious <B><SPAN class=goohl2>example</SPAN></B></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 207511px"><NOBR>of an lvalue 
expression is an identifier with suitable type and storage class. There are 
operators that yield</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 207530px"><NOBR>lvalues, if 
<FONT face=Courier>E </FONT>is an expression of pointer type, then <FONT 
face=Courier>*E </FONT>is an lvalue expression referring to the object to which 
<FONT face=Courier>E</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 207550px"><NOBR>points. The 
name ``lvalue'' comes from the assignment expression <FONT face=Courier>E1 = E2 
</FONT>in which the left operand <FONT face=Courier>E1</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 207570px"><NOBR>must be an 
lvalue expression. The discussion of each operator specifies whether it expects 
lvalue operands</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 207590px"><NOBR>and whether it 
yields an lvalue.</NOBR></DIV></SPAN></FONT><FONT face=Times size=4><SPAN 
style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 207631px"><NOBR><B>A.6 
Conversions</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 207678px"><NOBR>Some operators 
may, depending on their operands, cause conversion of the value of an operand 
from one type</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 207698px"><NOBR>to another. 
This section explains the result to be expected from such conversions. <A 
href="#176"></A><FONT 
face=Times color=#0000ff><A 
href="#176">Par.6.5 
</A></FONT>summarizes the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 207717px"><NOBR>conversions 
demanded by most ordinary operators; it will be supplemented as required by the 
discussion of</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 207737px"><NOBR>each 
operator.</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 207777px"><NOBR><B>A.6.1 
Integral Promotion</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 207820px"><NOBR>A character, a 
short integer, or an integer bit−field, all either signed or not, or an object 
of enumeration type,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 207840px"><NOBR>may be used in 
an expression wherever an integer may be used. If an <FONT face=Courier>int 
</FONT>can represent all the values of the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 207860px"><NOBR>original type, 
then the value is converted to <FONT face=Courier>int</FONT>; otherwise the 
value is converted to <FONT face=Courier>unsigned int</FONT>. This</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 207880px"><NOBR>process is 
called <I>integral promotion</I>.</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 206929px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 208009px"><NOBR>A.4.3 Derived 
types</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 208009px"><NOBR>175</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 208075px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=176><B>Page 176</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 208168px"><NOBR><B>A.6.2 
Integral Conversions</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 208211px"><NOBR>Any integer is 
converted to a given unsigned type by finding the smallest non−negative value 
that is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 208231px"><NOBR>congruent to 
that integer, modulo one more than the largest value that can be represented in 
the unsigned type.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 208250px"><NOBR>In a two's 
complement representation, this is equivalent to left−truncation if the bit 
pattern of the unsigned</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 208270px"><NOBR>type is 
narrower, and to zero−filling unsigned values and sign−extending signed values 
if the unsigned type is</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 208290px"><NOBR>wider.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 208330px"><NOBR>When any 
integer is converted to a signed type, the value is unchanged if it can be 
represented in the new type</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 208349px"><NOBR>and is 
implementation−defined otherwise.</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 208389px"><NOBR><B>A.6.3 
Integer and Floating</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 208433px"><NOBR>When a value 
of floating type is converted to integral type, the fractional part is 
discarded; if the resulting</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 208452px"><NOBR>value cannot 
be represented in the integral type, the behavior is undefined. In particular, 
the result of</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 208472px"><NOBR>converting 
negative floating values to unsigned integral types is not 
specified.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 208512px"><NOBR>When a value 
of integral type is converted to floating, and the value is in the representable 
range but is not</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 208532px"><NOBR>exactly 
representable, then the result may be either the next higher or next lower 
representable value. If the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 208551px"><NOBR>result is out 
of range, the behavior is undefined.</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 208591px"><NOBR><B>A.6.4 
Floating Types</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 208635px"><NOBR>When a less 
precise floating value is converted to an equally or more precise floating type, 
the value is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 208654px"><NOBR>unchanged. 
When a more precise floating value is converted to a less precise floating type, 
and the value is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 208674px"><NOBR>within 
representable range, the result may be either the next higher or the next lower 
representable value. If</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 208694px"><NOBR>the result is 
out of range, the behavior is undefined.</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 208734px"><NOBR><B>A.6.5 
Arithmetic Conversions</B></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 208777px"><NOBR>Many operators 
cause conversions and yield result types in a similar way. The effect is to 
bring operands into</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 208797px"><NOBR>a common type, 
which is also the type of the result. This pattern is called the <I>usual 
arithmetic conversions</I>.</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 208836px"><NOBR>First, if 
either operand is <FONT face=Courier>long double</FONT>, the other is converted 
to <FONT face=Courier>long double</FONT>.</NOBR></DIV></SPAN></FONT><FONT 
face=Symbol size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 208831px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 208856px"><NOBR>Otherwise, if 
either operand is <FONT face=Courier>double</FONT>, the other is converted to 
<FONT face=Courier>double</FONT>.</NOBR></DIV></SPAN></FONT><FONT face=Symbol 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 208851px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 208876px"><NOBR>Otherwise, if 
either operand is <FONT face=Courier>float</FONT>, the other is converted to 
<FONT face=Courier>float</FONT>.</NOBR></DIV></SPAN></FONT><FONT face=Symbol 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 208871px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 208896px"><NOBR>Otherwise, the 
integral promotions are performed on both operands; then, if either operand 
is</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 208917px"><NOBR>unsigned long 
int<FONT face=Times>, the other is converted to </FONT>unsigned long int<FONT 
face=Times>.</FONT></NOBR></DIV></SPAN></FONT><FONT face=Symbol size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 208890px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 208935px"><NOBR>Otherwise, if 
one operand is <FONT face=Courier>long int </FONT>and the other is <FONT 
face=Courier>unsigned int</FONT>, the effect depends on</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 208955px"><NOBR>whether a 
<FONT face=Courier>long int </FONT>can represent all values of an <FONT 
face=Courier>unsigned int</FONT>; if so, the <FONT face=Courier>unsigned 
int</FONT></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 208975px"><NOBR>operand is 
converted to <FONT face=Courier>long int</FONT>; if not, both are converted to 
<FONT face=Courier>unsigned long int</FONT>.</NOBR></DIV></SPAN></FONT><FONT 
face=Symbol size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 208930px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 208995px"><NOBR>Otherwise, if 
one operand is <FONT face=Courier>long int</FONT>, the other is converted to 
<FONT face=Courier>long int</FONT>.</NOBR></DIV></SPAN></FONT><FONT face=Symbol 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 208989px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 209015px"><NOBR>Otherwise, if 
either operand is <FONT face=Courier>unsigned int</FONT>, the other is converted 
to <FONT face=Courier>unsigned int</FONT>.</NOBR></DIV></SPAN></FONT><FONT 
face=Symbol size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 209009px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 209034px"><NOBR>Otherwise, 
both operands have type <FONT 
face=Courier>int</FONT>.</NOBR></DIV></SPAN></FONT><FONT face=Symbol 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 209029px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 209073px"><NOBR>There are two 
changes here. First, arithmetic on <FONT face=Courier>float </FONT>operands may 
be done in single precision, rather than double; the</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 209090px"><NOBR>first edition 
specified that all floating arithmetic was double precision. Second, shorter 
unsigned types, when combined</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 209106px"><NOBR>with a larger 
signed type, do not propagate the unsigned property to the result type; in the 
first edition, the unsigned</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 209123px"><NOBR>always 
dominated. The new rules are slightly more complicated, but reduce somewhat the 
surprises that may occur when</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 209139px"><NOBR>an unsigned 
quantity meets signed. Unexpected results may still occur when an unsigned 
expression is compared to a</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 209156px"><NOBR>signed 
expression of the same size.</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 208117px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 209197px"><NOBR>A.6.2 Integral 
Conversions</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 209197px"><NOBR>176</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 209263px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=177><B>Page 177</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 209356px"><NOBR><B>A.6.6 
Pointers and Integers</B></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 209399px"><NOBR>An expression 
of integral type may be added to or subtracted from a pointer; in such a case 
the integral</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 209419px"><NOBR>expression is 
converted as specified in the discussion of the addition operator (<FONT 
face=Times color=#0000ff><A 
href="#183">Par.A.7.7</A></FONT>).</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 209458px"><NOBR>Two pointers 
to objects of the same type, in the same array, may be subtracted; the result is 
converted to an</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 209478px"><NOBR>integer as 
specified in the discussion of the subtraction operator (<FONT face=Times 
color=#0000ff><A 
href="#183">Par.A.7.7</A></FONT><A 
href="#183"></A>).</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 209518px"><NOBR>An integral 
constant expression with value 0, or such an expression cast to type <FONT 
face=Courier>void *</FONT>, may be converted,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 209537px"><NOBR>by a cast, by 
assignment, or by comparison, to a pointer of any type. This produces a null 
pointer that is equal</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 209557px"><NOBR>to another 
null pointer of the same type, but unequal to any pointer to a function or 
object.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 209597px"><NOBR>Certain other 
conversions involving pointers are permitted, but have implementation−defined 
aspects. They</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 209617px"><NOBR>must be 
specified by an explicit type−conversion operator, or cast (Pars.<FONT 
face=Times color=#0000ff><A 
href="#182">A.7.5 
</A></FONT>and <A 
href="#199"></A><FONT 
face=Times color=#0000ff><A 
href="#199">A.8.8</A></FONT>).</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 209656px"><NOBR>A pointer may 
be converted to an integral type large enough to hold it; the required size 
is</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 209676px"><NOBR>implementation−dependent. 
The mapping function is also implementation−dependent.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 209716px"><NOBR>A pointer to 
one type may be converted to a pointer to another type. The resulting pointer 
may cause</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 209735px"><NOBR>addressing 
exceptions if the subject pointer does not refer to an object suitably aligned 
in storage. It is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 209755px"><NOBR>guaranteed 
that a pointer to an object may be converted to a pointer to an object whose 
type requires less or</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 209775px"><NOBR>equally strict 
storage alignment and back again without change; the notion of ``alignment'' 
is</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 209795px"><NOBR>implementation−dependent, 
but objects of the <FONT face=Courier>char </FONT>types have least strict 
alignment requirements. As</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 209815px"><NOBR>described in 
<A 
href="#177"></A><FONT 
face=Times color=#0000ff><A 
href="#177">Par.A.6.8</A></FONT>, 
a pointer may also be converted to type <FONT face=Courier>void * </FONT>and 
back again without change.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 209854px"><NOBR>A pointer may 
be converted to another pointer whose type is the same except for the addition 
or removal of</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 209874px"><NOBR>qualifiers 
(Pars.<FONT face=Times color=#0000ff><A 
href="#175">A.4.4</A></FONT>, 
<A 
href="#189"></A><FONT 
face=Times color=#0000ff><A 
href="#189">A.8.2</A></FONT>) 
of the object type to which the pointer refers. If qualifiers are added, the 
new</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 209894px"><NOBR>pointer is 
equivalent to the old except for restrictions implied by the new qualifiers. If 
qualifiers are removed,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 209914px"><NOBR>operations on 
the underlying object remain subject to the qualifiers in its actual 
declaration.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 209953px"><NOBR>Finally, a 
pointer to a function may be converted to a pointer to another function type. 
Calling the function</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 209973px"><NOBR>specified by 
the converted pointer is implementation−dependent; however, if the converted 
pointer is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 209993px"><NOBR>reconverted to 
its original type, the result is identical to the original 
pointer.</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 210033px"><NOBR><B>A.6.7 
Void</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 210076px"><NOBR>The 
(nonexistent) value of a <FONT face=Courier>void </FONT>object may not be used 
in any way, and neither explicit nor implicit</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 210096px"><NOBR>conversion to 
any non−void type may be applied. Because a void expression denotes a 
nonexistent value, such</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 210116px"><NOBR>an expression 
may be used only where the value is not required, for <B><SPAN 
class=goohl2>example</SPAN></B> as an expression statement</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 210135px"><NOBR>(<FONT 
face=Times color=#0000ff><A 
href="#201">Par.A.9.2</A></FONT>) 
or as the left operand of a comma operator (<FONT face=Times color=#0000ff><A 
href="#187">Par.A.7.18</A></FONT><A 
href="#187"></A>).</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 210175px"><NOBR>An expression 
may be converted to type <FONT face=Courier>void </FONT>by a cast. For <B><SPAN 
class=goohl2>example</SPAN></B>, a void cast documents the 
discarding</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 210195px"><NOBR>of the value 
of a function call used as an expression 
statement.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 210234px"><NOBR>void <FONT 
face=Times>did not appear in the first edition of this book, but has become 
common since.</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 210271px"><NOBR><B>A.6.8 
Pointers to Void</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 210314px"><NOBR>Any pointer to 
an object may be converted to type <FONT face=Courier>void * </FONT>without loss 
of information. If the result is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 210334px"><NOBR>converted back 
to the original pointer type, the original pointer is recovered. Unlike the 
pointer−to−pointer</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 209305px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 210385px"><NOBR>A.6.6 Pointers 
and Integers</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 210385px"><NOBR>177</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 210451px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=178><B>Page 178</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 210543px"><NOBR>conversions 
discussed in <A 
href="#177"></A><FONT 
face=Times color=#0000ff><A 
href="#177">Par.A.6.6</A></FONT>, 
which generally require an explicit cast, pointers may be assigned to 
and</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 210563px"><NOBR>from pointers 
of type <FONT face=Courier>void *</FONT>, and may be compared with 
them.</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 210602px"><NOBR>This 
interpretation of <FONT face=Courier>void * </FONT>pointers is new; previously, 
<FONT face=Courier>char * </FONT>pointers played the role of generic pointer. 
The ANSI</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 210618px"><NOBR>standard 
specifically blesses the meeting of <FONT face=Courier>void * </FONT>pointers 
with object pointers in assignments and relationals, while</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 210635px"><NOBR>requiring 
explicit casts for other pointer mixtures.</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=4><SPAN style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 210673px"><NOBR><B>A.7 
Expressions</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 210720px"><NOBR>The precedence 
of expression operators is the same as the order of the major subsections of 
this section,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 210740px"><NOBR>highest 
precedence first. Thus, for <B><SPAN class=goohl2>example</SPAN></B>, the 
expressions referred to as the operands of <FONT face=Courier>+ </FONT>(<FONT 
face=Times color=#0000ff><A 
href="#183">Par.A.7.7</A></FONT>) 
are</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 210760px"><NOBR>those 
expressions defined in Pars.<A 
href="#178"></A><FONT 
face=Times color=#0000ff><A 
href="#178">A.7.1</A></FONT><A 
href="#178"></A>−<FONT 
face=Times color=#0000ff><A 
href="#183">A.7.6</A></FONT><A 
href="#183"></A>. 
Within each subsection, the operators have the same</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 210780px"><NOBR>precedence. 
Left− or right−associativity is specified in each subsection for the operators 
discussed therein.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 210799px"><NOBR>The grammar 
given in <A 
href="#213"></A><FONT 
face=Times color=#0000ff><A 
href="#213">Par.13 
</A></FONT>incorporates the precedence and associativity of the 
operators.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 210839px"><NOBR>The precedence 
and associativity of operators is fully specified, but the order of evaluation 
of expressions is,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 210859px"><NOBR>with certain 
exceptions, undefined, even if the subexpressions involve side effects. That is, 
unless the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 210879px"><NOBR>definition of 
the operator guarantees that its operands are evaluated in a particular order, 
the implementation is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 210898px"><NOBR>free to 
evaluate operands in any order, or even to interleave their evaluation. However, 
each operator</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 210918px"><NOBR>combines the 
values produced by its operands in a way compatible with the parsing of the 
expression in which</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 210938px"><NOBR>it 
appears.</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 210977px"><NOBR>This rule 
revokes the previous freedom to reorder expressions with operators that are 
mathematically commutative and</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 210993px"><NOBR>associative, 
but can fail to be computationally associative. The change affects only 
floating−point computations near the</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 211010px"><NOBR>limits of 
their accuracy, and situations where overflow is 
possible.</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 211047px"><NOBR>The handling 
of overflow, divide check, and other exceptions in expression evaluation is not 
defined by the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 211067px"><NOBR>language. Most 
existing implementations of C ignore overflow in evaluation of signed integral 
expressions</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 211087px"><NOBR>and 
assignments, but this behavior is not guaranteed. Treatment of division by 0, 
and all floating−point</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 211106px"><NOBR>exceptions, 
varies among implementations; sometimes it is adjustable by a non−standard 
library function.</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 211146px"><NOBR><B>A.7.1 
Pointer Conversion</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 211190px"><NOBR>If the type of 
an expression or subexpression is ``array of <I>T</I>,'' for some type <I>T</I>, 
then the value of the expression</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 211209px"><NOBR>is a pointer 
to the first object in the array, and the type of the expression is altered to 
``pointer to <I>T</I>.'' This</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 211229px"><NOBR>conversion 
does not take place if the expression is in the operand of the unary <FONT 
face=Courier>&amp; </FONT>operator, or of <FONT face=Courier>++</FONT>, <FONT 
face=Courier>−−</FONT>,</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 211250px"><NOBR>sizeof<FONT 
face=Times>, or as the left operand of an assignment operator or the </FONT>. 
<FONT face=Times>operator. Similarly, an expression of 
type</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 211269px"><NOBR>``function 
returning <I>T</I>,'' except when used as the operand of the <FONT 
face=Courier>&amp; </FONT>operator, is converted to ``pointer to</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 211289px"><NOBR>function 
returning <I>T</I>.''</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 211328px"><NOBR><B>A.7.2 
Primary Expressions</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 211372px"><NOBR>Primary 
expressions are identifiers, constants, strings, or expressions in 
parentheses.</NOBR></DIV>
<DIV 
style="LEFT: 125px; POSITION: absolute; TOP: 211411px"><NOBR><I>primary−expression</I></NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 211431px"><NOBR><I>identifier</I></NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 211451px"><NOBR><I>constant</I></NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 211471px"><NOBR><I>string</I></NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 211490px"><NOBR><I>(expression)</I></NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 210493px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 211573px"><NOBR>A.7 
Expressions</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 211573px"><NOBR>178</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 211639px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=179><B>Page 179</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 211731px"><NOBR>An identifier 
is a primary expression, provided it has been suitably declared as discussed 
below. Its type is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 211751px"><NOBR>specified by 
its declaration. An identifier is an lvalue if it refers to an object (<FONT 
face=Times color=#0000ff><A 
href="#175">Par.A.5</A></FONT><A 
href="#175"></A>) 
and if its type is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 211771px"><NOBR>arithmetic, 
structure, union, or pointer.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 211810px"><NOBR>A constant is 
a primary expression. Its type depends on its form as discussed in <FONT 
face=Times color=#0000ff><A 
href="#171">Par.A.2.5</A></FONT><A 
href="#171"></A>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 211850px"><NOBR>A string 
literal is a primary expression. Its type is originally ``array of <FONT 
face=Courier>char</FONT>'' (for wide−char strings, ``array</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 211870px"><NOBR>of <FONT 
face=Courier>wchar_t</FONT>''), but following the rule given in <A 
href="#178"></A><FONT 
face=Times color=#0000ff><A 
href="#178">Par.A.7.1</A></FONT><A 
href="#178"></A>, 
this is usually modified to ``pointer to <FONT 
face=Courier>char</FONT>''</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 211890px"><NOBR>(<FONT 
face=Courier>wchar_t</FONT>) and the result is a pointer to the first character 
in the string. The conversion also does not occur in</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 211909px"><NOBR>certain 
initializers; see <FONT face=Times color=#0000ff><A 
href="#197">Par.A.8.7</A></FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 211949px"><NOBR>A 
parenthesized expression is a primary expression whose type and value are 
identical to those of the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 211969px"><NOBR>unadorned 
expression. The precedence of parentheses does not affect whether the expression 
is an lvalue.</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 212009px"><NOBR><B>A.7.3 
Postfix Expressions</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 212052px"><NOBR>The operators 
in postfix expressions group left to right.</NOBR></DIV>
<DIV 
style="LEFT: 125px; POSITION: absolute; TOP: 212092px"><NOBR><I>postfix−expression:</I></NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 212111px"><NOBR><I>primary−expression</I></NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 212131px"><NOBR><I>postfix−expression[expression]</I></NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 212151px"><NOBR><I>postfix−expression(argument−expression−list</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 475px; POSITION: absolute; TOP: 212157px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 490px; POSITION: absolute; TOP: 212151px"><NOBR><I>)</I></NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 212171px"><NOBR><I>postfix−expression.identifier</I></NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 212191px"><NOBR><I>postfix−expression<FONT 
face=Courier>−&gt;</FONT>identifier</I></NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 212210px"><NOBR><I>postfix−expression<FONT 
face=Courier>++</FONT></I></NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 212230px"><NOBR><I>postfix−expression<FONT 
face=Courier>−−</FONT></I></NOBR></DIV>
<DIV 
style="LEFT: 125px; POSITION: absolute; TOP: 212270px"><NOBR>argument−expression−list:</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 212290px"><NOBR>assignment−expression</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 212309px"><NOBR>assignment−expression−list 
<FONT face=Courier>, </FONT>assignment−expression</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 212348px"><NOBR><B>A.7.3.1 
Array References</B></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 212389px"><NOBR>A postfix 
expression followed by an expression in square brackets is a postfix expression 
denoting a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 212408px"><NOBR>subscripted 
array reference. One of the two expressions must have type ``pointer to 
<I>T</I>'', where <I>T </I>is some type,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 212428px"><NOBR>and the other 
must have integral type; the type of the subscript expression is <I>T</I>. The 
expression <FONT face=Courier>E1[E2] </FONT>is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 212448px"><NOBR>identical (by 
definition) to <FONT face=Courier>*((E1)+(E2))</FONT>. See <FONT face=Times 
color=#0000ff><A 
href="#195">Par.A.8.6.2 
</A></FONT>for further discussion.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 212487px"><NOBR><B>A.7.3.2 
Function Calls</B></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 212527px"><NOBR>A function 
call is a postfix expression, called the function designator, followed by 
parentheses containing a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 212547px"><NOBR>possibly 
empty, comma−separated list of assignment expressions (<A 
href="#186"></A><FONT 
face=Times color=#0000ff><A 
href="#186">Par.A7.17</A></FONT>), 
which constitute the arguments</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 212567px"><NOBR>to the 
function. If the postfix expression consists of an identifier for which no 
declaration exists in the current</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 212587px"><NOBR>scope, the 
identifier is implicitly declared as if the 
declaration</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 148px; POSITION: absolute; TOP: 212627px"><NOBR>extern int 
<I><FONT face=Times>identifier</FONT></I>();</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 212666px"><NOBR>had been given 
in the innermost block containing the function call. The postfix expression 
(after possible</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 212686px"><NOBR>explicit 
declaration and pointer generation, <FONT face=Times color=#0000ff><A 
href="#178">Par.A7.1</A></FONT><A 
href="#178"></A>) 
must be of type ``pointer to function returning <I>T</I>,'' for</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 212705px"><NOBR>some type 
<I>T</I>, and the value of the function call has type <I>T</I>.</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 211681px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 212761px"><NOBR>A.7.3 Postfix 
Expressions</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 212761px"><NOBR>179</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 212827px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=180><B>Page 180</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 212918px"><NOBR>In the first 
edition, the type was restricted to ``function,'' and an explicit <FONT 
face=Courier>* </FONT>operator was required to call through pointers 
to</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 212935px"><NOBR>functions. The 
ANSI standard blesses the practice of some existing compilers by permitting the 
same syntax for calls to</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 212951px"><NOBR>functions and 
to functions specified by pointers. The older syntax is still 
usable.</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 212989px"><NOBR>The term 
<I>argument </I>is used for an expression passed by a function call; the term 
<I>parameter </I>is used for an input</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 213008px"><NOBR>object (or its 
identifier) received by a function definition, or described in a function 
declaration. The terms</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 213028px"><NOBR>``actual 
argument (parameter)'' and ``formal argument (parameter)'' respectively are 
sometimes used for the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 213048px"><NOBR>same 
distinction.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 213088px"><NOBR>In preparing 
for the call to a function, a copy is made of each argument; all 
argument−passing is strictly by</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 213107px"><NOBR>value. A 
function may change the values of its parameter objects, which are copies of the 
argument</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 213127px"><NOBR>expressions, 
but these changes cannot affect the values of the arguments. However, it is 
possible to pass a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 213147px"><NOBR>pointer on the 
understanding that the function may change the value of the object to which the 
pointer points.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 213187px"><NOBR>There are two 
styles in which functions may be declared. In the new style, the types of 
parameters are explicit</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 213206px"><NOBR>and are part 
of the type of the function; such a declaration os also called a function 
prototype. In the old style,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 213226px"><NOBR>parameter 
types are not specified. Function declaration is issued in <FONT face=Times 
color=#0000ff><A 
href="#196">Pars.A.8.6.3 
</A></FONT>and <FONT face=Times color=#0000ff><A 
href="#204">A.10.1</A></FONT><A 
href="#204"></A>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 213266px"><NOBR>If the 
function declaration in scope for a call is old−style, then default argument 
promotion is applied to each</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 213286px"><NOBR>argument as 
follows: integral promotion (<A 
href="#175"></A><FONT 
face=Times color=#0000ff><A 
href="#175">Par.A.6.1</A></FONT>) 
is performed on each argument of integral type, and 
each</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 213306px"><NOBR>float <FONT 
face=Times>argument is converted to </FONT>double<FONT face=Times>. The effect 
of the call is undefined if the number of 
arguments</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 213325px"><NOBR>disagrees with 
the number of parameters in the definition of the function, or if the type of an 
argument after</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 213345px"><NOBR>promotion 
disagrees with that of the corresponding parameter. Type agreement depends on 
whether the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 213365px"><NOBR>function's 
definition is new−style or old−style. If it is old−style, then the comparison is 
between the promoted</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 213385px"><NOBR>type of the 
arguments of the call, and the promoted type of the parameter, if the definition 
is new−style, the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 213404px"><NOBR>promoted type 
of the argument must be that of the parameter itself, without 
promotion.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 213444px"><NOBR>If the 
function declaration in scope for a call is new−style, then the arguments are 
converted, as if by</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 213464px"><NOBR>assignment, to 
the types of the corresponding parameters of the function's prototype. The 
number of</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 213484px"><NOBR>arguments must 
be the same as the number of explicitly described parameters, unless the 
declaration's</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 213503px"><NOBR>parameter list 
ends with the ellipsis notation <FONT face=Courier>(, ...)</FONT>. In that case, 
the number of arguments must equal or</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 213523px"><NOBR>exceed the 
number of parameters; trailing arguments beyond the explicitly typed parameters 
suffer default</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 213543px"><NOBR>argument 
promotion as described in the preceding paragraph. If the definition of the 
function is old−style,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 213563px"><NOBR>then the type 
of each parameter in the definition, after the definition parameter's type has 
undergone argument</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 213583px"><NOBR>promotion.</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 213621px"><NOBR>These rules 
are especially complicated because they must cater to a mixture of old− and 
new−style functions. Mixtures are</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 213638px"><NOBR>to be avoided 
if possible.</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 213675px"><NOBR>The order of 
evaluation of arguments is unspecified; take note that various compilers differ. 
However, the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 213695px"><NOBR>arguments and 
the function designator are completely evaluated, including all side effects, 
before the function</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 213715px"><NOBR>is entered. 
Recursive calls to any function are permitted.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 213754px"><NOBR><B>A.7.3.3 
Structure References</B></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 213794px"><NOBR>A postfix 
expression followed by a dot followed by an identifier is a postfix expression. 
The first operand</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 213814px"><NOBR>expression 
must be a structure or a union, and the identifier must name a member of the 
structure or union.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 213833px"><NOBR>The value is 
the named member of the structure or union, and its type is the type of the 
member. The</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 213853px"><NOBR>expression is 
an lvalue if the first expression is an lvalue, and if the type of the second 
expression is not an</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 213873px"><NOBR>array 
type.</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 212869px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 213949px"><NOBR>A.7.3 Postfix 
Expressions</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 213949px"><NOBR>180</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 214015px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=181><B>Page 181</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 214107px"><NOBR>A postfix 
expression followed by an arrow (built from <FONT face=Courier>− </FONT>and 
<FONT face=Courier>&gt;</FONT>) followed by an identifier is a 
postfix</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 214127px"><NOBR>expression. 
The first operand expression must be a pointer to a structure or union, and the 
identifier must</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 214147px"><NOBR>name a member 
of the structure or union. The result refers to the named member of the 
structure or union to</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 214167px"><NOBR>which the 
pointer expression points, and the type is the type of the member; the result is 
an lvalue if the type</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 214186px"><NOBR>is not an 
array type.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 214226px"><NOBR>Thus the 
expression <FONT face=Courier>E1−&gt;MOS </FONT>is the same as <FONT 
face=Courier>(*E1).MOS</FONT>. Structures and unions are discussed in <FONT 
face=Times color=#0000ff><A 
href="#190">Par.A.8.3</A></FONT><A 
href="#190"></A>.</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 214265px"><NOBR>In the first 
edition of this book, it was already the rule that a member name in such an 
expression had to belong to the</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 214281px"><NOBR>structure or 
union mentioned in the postfix expression; however, a note admitted that this 
rule was not firmly enforced.</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 214298px"><NOBR>Recent 
compilers, and ANSI, do enforce it.</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 214334px"><NOBR><B>A.7.3.4 
Postfix Incrementation</B></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 214375px"><NOBR>A postfix 
expression followed by a <FONT face=Courier>++ </FONT>or <FONT face=Courier>−− 
</FONT>operator is a postfix expression. The value of the expression 
is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 214394px"><NOBR>the value of 
the operand. After the value is noted, the operand is incremented <FONT 
face=Courier>++ </FONT>or decremented <FONT face=Courier>−− </FONT>by 1. 
The</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 214414px"><NOBR>operand must 
be an lvalue; see the discussion of additive operators (<A 
href="#183"></A><FONT 
face=Times color=#0000ff><A 
href="#183">Par.A.7.7</A></FONT>) 
and assignment (<FONT face=Times color=#0000ff><A 
href="#186">Par.A.7.17</A></FONT><A 
href="#186"></A>)</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 214434px"><NOBR>for further 
constraints on the operand and details of the operation. The result is not an 
lvalue.</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 214474px"><NOBR><B>A.7.4 Unary 
Operators</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 214517px"><NOBR>Expressions 
with unary operators group right−to−left.</NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 214557px"><NOBR><I>unary−expression</I>:</NOBR></DIV>
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 214576px"><NOBR><I>postfix 
expression</I></NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 214597px"><NOBR>++<I><FONT 
face=Times>unary expression</FONT></I></NOBR></DIV>
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 214617px"><NOBR>−−<I><FONT 
face=Times>unary expression</FONT></I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 214636px"><NOBR><I>unary−operator 
cast−expression</I></NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 214657px"><NOBR>sizeof 
<I><FONT face=Times>unary−expression</FONT></I></NOBR></DIV>
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 214676px"><NOBR>sizeof<FONT 
face=Times>(</FONT><I><FONT face=Times>type−name</FONT></I><FONT 
face=Times>)</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 148px; POSITION: absolute; TOP: 214715px"><NOBR><I>unary 
operator: </I>one of</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 214736px"><NOBR>&amp; * + − 
!</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 214774px"><NOBR><B>A.7.4.1 
Prefix Incrementation Operators</B></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 214814px"><NOBR>A unary 
expression followed by a <FONT face=Courier>++ </FONT>or <FONT face=Courier>−− 
</FONT>operator is a unary expression. The operand is incremented <FONT 
face=Courier>++ </FONT>or</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 214834px"><NOBR>decremented 
<FONT face=Courier>−− </FONT>by 1. The value of the expression is the value 
after the incrementation (decrementation). The</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 214854px"><NOBR>operand must 
be an lvalue; see the discussion of additive operators (<A 
href="#183"></A><FONT 
face=Times color=#0000ff><A 
href="#183">Par.A.7.7</A></FONT>) 
and assignment (<FONT face=Times color=#0000ff><A 
href="#186">Par.A.7.17</A></FONT><A 
href="#186"></A>)</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 214873px"><NOBR>for further 
constraints on the operands and details of the operation. The result is not an 
lvalue.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 214913px"><NOBR><B>A.7.4.2 
Address Operator</B></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 214953px"><NOBR>The unary 
operator <FONT face=Courier>&amp; </FONT>takes the address of its operand. The 
operand must be an lvalue referring neither to a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 214972px"><NOBR>bit−field nor 
to an object declared as <FONT face=Courier>register</FONT>, or must be of 
function type. The result is a pointer to the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 214992px"><NOBR>object or 
function referred to by the lvalue. If the type of the operand is <I>T</I>, the 
type of the result is ``pointer to</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 215012px"><NOBR><I>T</I>.''</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 214057px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 215137px"><NOBR>A.7.3 Postfix 
Expressions</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 215137px"><NOBR>181</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 215203px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=182><B>Page 182</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 215295px"><NOBR><B>A.7.4.3 
Indirection Operator</B></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 215335px"><NOBR>The unary 
<FONT face=Courier>* </FONT>operator denotes indirection, and returns the object 
or function to which its operand points. It is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 215355px"><NOBR>an lvalue if 
the operand is a pointer to an object of arithmetic, structure, union, or 
pointer type. If the type of</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 215374px"><NOBR>the expression 
is ``pointer to <I>T</I>,'' the type of the result is <I>T</I>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 215413px"><NOBR><B>A.7.4.4 
Unary Plus Operator</B></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 215454px"><NOBR>The operand of 
the unary <FONT face=Courier>+ </FONT>operator must have arithmetic type, and 
the result is the value of the operand. An</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 215473px"><NOBR>integral 
operand undergoes integral promotion. The type of the result is the type of the 
promoted operand.</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 215512px"><NOBR>The unary 
<FONT face=Courier>+ </FONT>is new with the ANSI standard. It was added for 
symmetry with the unary <FONT 
face=Courier>−</FONT>.</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 215549px"><NOBR><B>A.7.4.5 
Unary Minus Operator</B></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 215589px"><NOBR>The operand of 
the unary <FONT face=Courier>− </FONT>operator must have arithmetic type, and 
the result is the negative of its operand.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 215609px"><NOBR>An integral 
operand undergoes integral promotion. The negative of an unsigned quantity is 
computed by</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 215629px"><NOBR>subtracting 
the promoted value from the largest value of the promoted type and adding one; 
but negative zero</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 215648px"><NOBR>is zero. The 
type of the result is the type of the promoted operand.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 215687px"><NOBR><B>A.7.4.6 
One's Complement Operator</B></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 215728px"><NOBR>The operand of 
the operator must have integral type, and the result is the one's complement of 
its operand.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 215747px"><NOBR>The integral 
promotions are performed. If the operand is unsigned, the result is computed by 
subtracting the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 215767px"><NOBR>value from the 
largest value of the promoted type. If the operand is signed, the result is 
computed by</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 215787px"><NOBR>converting the 
promoted operand to the corresponding unsigned type, applying , and converting 
back to the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 215807px"><NOBR>signed type. 
The type of the result is the type of the promoted operand.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 215846px"><NOBR><B>A.7.4.7 
Logical Negation Operator</B></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 215886px"><NOBR>The operand of 
the <FONT face=Courier>! </FONT>operator must have arithmetic type or be a 
pointer, and the result is 1 if the value of its</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 215906px"><NOBR>operand 
compares equal to 0, and 0 otherwise. The type of the result is <FONT 
face=Courier>int</FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 215945px"><NOBR><B>A.7.4.8 
Sizeof Operator</B></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 215985px"><NOBR>The <FONT 
face=Courier>sizeof </FONT>operator yields the number of bytes required to store 
an object of the type of its operand. The</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 216005px"><NOBR>operand is 
either an expression, which is not evaluated, or a parenthesized type name. When 
<FONT face=Courier>sizeof </FONT>is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 216025px"><NOBR>applied to a 
<FONT face=Courier>char</FONT>, the result is 1; when applied to an array, the 
result is the total number of bytes in the array.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 216044px"><NOBR>When applied 
to a structure or union, the result is the number of bytes in the object, 
including any padding</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 216064px"><NOBR>required to 
make the object tile an array: the size of an array of <I>n </I>elements is <I>n 
</I>times the size of one element.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 216084px"><NOBR>The operator 
may not be applied to an operand of function type, or of incomplete type, or to 
a bit−field. The</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 216104px"><NOBR>result is an 
unsigned integral constant; the particular type is implementation−defined. The 
standard header</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 216124px"><NOBR>&lt;stddef.h&gt; 
<FONT face=Times>(See <A 
href="#221"></A></FONT><FONT 
face=Times color=#0000ff><A 
href="#221">appendix 
B</A></FONT><FONT face=Times>) defines this type as </FONT>size_t<FONT 
face=Times>.</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 216163px"><NOBR><B>A.7.5 
Casts</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 216207px"><NOBR>A unary 
expression preceded by the parenthesized name of a type causes conversion of the 
value of the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 216226px"><NOBR>expression to 
the named type.</NOBR></DIV>
<DIV 
style="LEFT: 125px; POSITION: absolute; TOP: 216266px"><NOBR><I>cast−expression:</I></NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 216286px"><NOBR><I>unary 
expression</I></NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 215245px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 216325px"><NOBR>A.7.4 Unary 
Operators</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 216325px"><NOBR>182</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 216391px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=183><B>Page 183</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 216483px"><NOBR><I>(type−name) 
cast−expression</I></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 216523px"><NOBR>This 
construction is called a <I>cast</I>. The names are described in <FONT 
face=Times color=#0000ff><A 
href="#199">Par.A.8.8</A></FONT><A 
href="#199"></A>. 
The effects of conversions are</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 216543px"><NOBR>described in 
<A 
href="#175"></A><FONT 
face=Times color=#0000ff><A 
href="#175">Par.A.6</A></FONT><A 
href="#175"></A>. 
An expression with a cast is not an lvalue.</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 216583px"><NOBR><B>A.7.6 
Multiplicative Operators</B></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 216626px"><NOBR>The 
multiplicative operators <FONT face=Courier>*</FONT>, <FONT 
face=Courier>/</FONT>, and <FONT face=Courier>% </FONT>group 
left−to−right.</NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 216665px"><NOBR><I>multiplicative−expression</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 216685px"><NOBR><I>multiplicative−expression 
</I><FONT face=Courier>* </FONT><I>cast−expression</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 216705px"><NOBR><I>multiplicative−expression 
</I><FONT face=Courier>/ </FONT><I>cast−expression</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 216725px"><NOBR><I>multiplicative−expression 
</I><FONT face=Courier>% </FONT><I>cast−expression</I></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 216764px"><NOBR>The operands 
of <FONT face=Courier>* </FONT>and <FONT face=Courier>/ </FONT>must have 
arithmetic type; the operands of <FONT face=Courier>% </FONT>must have integral 
type. The usual</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 216784px"><NOBR>arithmetic 
conversions are performed on the operands, and predict the type of the 
result.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 216824px"><NOBR>The binary 
<FONT face=Courier>* </FONT>operator denotes multiplication.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 216863px"><NOBR>The binary 
<FONT face=Courier>/ </FONT>operator yields the quotient, and the <FONT 
face=Courier>% </FONT>operator the remainder, of the division of the first 
operand</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 216883px"><NOBR>by the second; 
if the second operand is 0, the result is undefined. Otherwise, it is always 
true that <FONT face=Courier>(a/b)*b</FONT></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 216904px"><NOBR>+ a%b <FONT 
face=Times>is equal to </FONT>a<FONT face=Times>. If both operands are 
non−negative, then the remainder is non−negative and smaller 
than</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 216923px"><NOBR>the divisor, 
if not, it is guaranteed only that the absolute value of the remainder is 
smaller than the absolute</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 216943px"><NOBR>value of the 
divisor.</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 216983px"><NOBR><B>A.7.7 
Additive Operators</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 217026px"><NOBR>The additive 
operators <FONT face=Courier>+ </FONT>and <FONT face=Courier>− </FONT>group 
left−to−right. If the operands have arithmetic type, the usual 
arithmetic</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 217046px"><NOBR>conversions 
are performed. There are some additional type possibilities for each 
operator.</NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 217085px"><NOBR><I>additive−expression</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 217105px"><NOBR><I>multiplicative−expression</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 217125px"><NOBR><I>additive−expression 
</I><FONT face=Courier>+ </FONT><I>multiplicative−expression</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 217145px"><NOBR><I>additive−expression 
</I><FONT face=Courier>− </FONT><I>multiplicative−expression</I></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 217184px"><NOBR>The result of 
the <FONT face=Courier>+ </FONT>operator is the sum of the operands. A pointer 
to an object in an array and a value of any</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 217204px"><NOBR>integral type 
may be added. The latter is converted to an address offset by multiplying it by 
the size of the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 217224px"><NOBR>object to 
which the pointer points. The sum is a pointer of the same type as the original 
pointer, and points to</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 217244px"><NOBR>another object 
in the same array, appropriately offset from the original object. Thus if <FONT 
face=Courier>P </FONT>is a pointer to an</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 217263px"><NOBR>object in an 
array, the expression <FONT face=Courier>P+1 </FONT>is a pointer to the next 
object in the array. If the sum pointer points</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 217283px"><NOBR>outside the 
bounds of the array, except at the first location beyond the high end, the 
result is undefined.</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 217322px"><NOBR>The provision 
for pointers just beyond the end of an array is new. It legitimizes a common 
idiom for looping over the</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 217338px"><NOBR>elements of an 
array.</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 217376px"><NOBR>The result of 
the <FONT face=Courier>− </FONT>operator is the difference of the operands. A 
value of any integral type may be subtracted</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 217395px"><NOBR>from a 
pointer, and then the same conversions and conditions as for addition 
apply.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 217435px"><NOBR>If two 
pointers to objects of the same type are subtracted, the result is a signed 
integral value representing the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 217455px"><NOBR>displacement 
between the pointed−to objects; pointers to successive objects differ by 1. The 
type of the result</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 217475px"><NOBR>is defined as 
<FONT face=Courier>ptrdiff_t </FONT>in the standard header <FONT 
face=Courier>&lt;stddef.h&gt;</FONT>. The value is undefined unless the 
pointers</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 216433px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 217513px"><NOBR>A.7.6 
Multiplicative Operators</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 217513px"><NOBR>183</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 217579px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=184><B>Page 184</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 217671px"><NOBR>point to 
objects within the same array; however, if <FONT face=Courier>P </FONT>points to 
the last member of an array, then <FONT face=Courier>(P+1)−P 
</FONT>has</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 217691px"><NOBR>value 
1.</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 217731px"><NOBR><B>A.7.8 Shift 
Operators</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 217774px"><NOBR>The shift 
operators <FONT face=Courier>&lt;&lt; </FONT>and <FONT face=Courier>&gt;&gt; 
</FONT>group left−to−right. For both operators, each operand must be integral, 
and is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 217794px"><NOBR>subject to 
integral the promotions. The type of the result is that of the promoted left 
operand. The result is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 217814px"><NOBR>undefined if 
the right operand is negative, or greater than or equal to the number of bits in 
the left expression's</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 217834px"><NOBR>type.</NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 217873px"><NOBR><I>shift−expression</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 217893px"><NOBR><I>additive−expression</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 217913px"><NOBR><I>shift−expression 
</I><FONT face=Courier>&lt;&lt; </FONT><I>additive−expression</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 217933px"><NOBR><I>shift−expression 
</I><FONT face=Courier>&gt;&gt; </FONT><I>additive−expression</I></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 217972px"><NOBR>The value of 
<FONT face=Courier>E1&lt;&lt;E2 </FONT>is <FONT face=Courier>E1 
</FONT>(interpreted as a bit pattern) left−shifted <FONT face=Courier>E2 
</FONT>bits; in the absence of overflow, this</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 217992px"><NOBR>is equivalent 
to multiplication by 2</NOBR></DIV></SPAN></FONT><FONT face=Times size=2><SPAN 
style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 339px; POSITION: absolute; TOP: 217988px"><NOBR>E2</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 351px; POSITION: absolute; TOP: 217992px"><NOBR>. The value of 
<FONT face=Courier>E1&gt;&gt;E2 </FONT>is <FONT face=Courier>E1 
</FONT>right−shifted <FONT face=Courier>E2 </FONT>bit positions. The 
right</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 218012px"><NOBR>shift is 
equivalent to division by 2</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 333px; POSITION: absolute; TOP: 218008px"><NOBR>E2</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 349px; POSITION: absolute; TOP: 218012px"><NOBR>if <FONT 
face=Courier>E1 </FONT>is unsigned or it has a non−negative value; otherwise the 
result is</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 218032px"><NOBR>implementation−defined.</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 218072px"><NOBR><B>A.7.9 
Relational Operators</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 218115px"><NOBR>The relational 
operators group left−to−right, but this fact is not useful; <FONT 
face=Courier>a&lt;b&lt;c </FONT>is parsed as <FONT 
face=Courier>(a&lt;b)&lt;c</FONT>, and</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 218135px"><NOBR>evaluates to 
either 0 or 1.</NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 218174px"><NOBR><I>relational−expression</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 218194px"><NOBR><I>shift−expression</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 218214px"><NOBR><I>relational−expression 
</I><FONT face=Courier>&lt; </FONT><I>shift−expression</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 218234px"><NOBR><I>relational−expression 
</I><FONT face=Courier>&gt; </FONT><I>shift−expression</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 218253px"><NOBR><I>relational−expression 
</I><FONT face=Courier>&lt;= </FONT><I>shift−expression</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 218273px"><NOBR><I>relational−expression 
</I><FONT face=Courier>&gt;= </FONT><I>shift−expression</I></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 218313px"><NOBR>The operators 
<FONT face=Courier>&lt; </FONT>(less), <FONT face=Courier>&gt; </FONT>(greater), 
<FONT face=Courier>&lt;= </FONT>(less or equal) and <FONT face=Courier>&gt;= 
</FONT>(greater or equal) all yield 0 if the specified</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 218333px"><NOBR>relation is 
false and 1 if it is true. The type of the result is <FONT 
face=Courier>int</FONT>. The usual arithmetic conversions are</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 218352px"><NOBR>performed on 
arithmetic operands. Pointers to objects of the same type (ignoring any 
qualifiers) may be</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 218372px"><NOBR>compared; the 
result depends on the relative locations in the address space of the pointed−to 
objects. Pointer</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 218392px"><NOBR>comparison is 
defined only for parts of the same object; if two pointers point to the same 
simple object, they</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 218412px"><NOBR>compare equal; 
if the pointers are to members of the same structure, pointers to objects 
declared later in the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 218432px"><NOBR>structure 
compare higher; if the pointers refer to members of an array, the comparison is 
equivalent to</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 218451px"><NOBR>comparison of 
the the corresponding subscripts. If <FONT face=Courier>P </FONT>points to the 
last member of an array, then <FONT face=Courier>P+1 
</FONT>compares</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 218471px"><NOBR>higher than 
<FONT face=Courier>P</FONT>, even though <FONT face=Courier>P+1 </FONT>points 
outside the array. Otherwise, pointer comparison is 
undefined.</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 218510px"><NOBR>These rules 
slightly liberalize the restrictions stated in the first edition, by permitting 
comparison of pointers to different</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 218526px"><NOBR>members of a 
structure or union. They also legalize comparison with a pointer just off the 
end of an array.</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 218564px"><NOBR><B>A.7.10 
Equality Operators</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 218607px"><NOBR><I>equality−expression</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 218627px"><NOBR><I>relational−expression</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 218647px"><NOBR><I>equality−expression 
</I><FONT face=Courier>== </FONT><I>relational−expression</I></NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 217621px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 218701px"><NOBR>A.7.8 Shift 
Operators</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 218701px"><NOBR>184</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 218767px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=185><B>Page 185</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 218859px"><NOBR><I>equality−expression 
</I><FONT face=Courier>!= </FONT><I>relational−expression</I></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 218899px"><NOBR>The <FONT 
face=Courier>== </FONT>(equal to) and the <FONT face=Courier>!= </FONT>(not 
equal to) operators are analogous to the relational operators except for 
their</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 218919px"><NOBR>lower 
precedence. (Thus <FONT face=Courier>a&lt;b == c&lt;d </FONT>is 1 whenever <FONT 
face=Courier>a&lt;b </FONT>and <FONT face=Courier>c&lt;d </FONT>have the same 
truth−value.)</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 218958px"><NOBR>The equality 
operators follow the same rules as the relational operators, but permit 
additional possibilities: a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 218978px"><NOBR>pointer may be 
compared to a constant integral expression with value 0, or to a pointer to 
<FONT face=Courier>void</FONT>. See</NOBR></DIV></SPAN></FONT><FONT face=Times 
color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 218998px"><NOBR><A 
href="#177">Par.A.6.6</A><FONT 
face=Times color=#000000><A 
href="#177"></A>.</FONT></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 219038px"><NOBR><B>A.7.11 
Bitwise AND Operator</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 219081px"><NOBR><I>AND−expression</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 219101px"><NOBR><I>equality−expression</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 219121px"><NOBR><I>AND−expression 
</I><FONT face=Courier>&amp; </FONT><I>equality−expression</I></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 219160px"><NOBR>The usual 
arithmetic conversions are performed; the result is the bitwise AND function of 
the operands. The</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 219180px"><NOBR>operator 
applies only to integral operands.</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 219220px"><NOBR><B>A.7.12 
Bitwise Exclusive OR Operator</B></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 219263px"><NOBR><I>exclusive−OR−expression</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 219283px"><NOBR><I>AND−expression</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 219303px"><NOBR><I>exclusive−OR−expression 
</I><FONT face=Courier>^ </FONT><I>AND−expression</I></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 219342px"><NOBR>The usual 
arithmetic conversions are performed; the result is the bitwise exclusive OR 
function of the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 219362px"><NOBR>operands. The 
operator applies only to integral operands.</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 219402px"><NOBR><B>A.7.13 
Bitwise Inclusive OR Operator</B></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 219445px"><NOBR><I>inclusive−OR−expression</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 219465px"><NOBR><I>exclusive−OR−expression</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 219485px"><NOBR><I>inclusive−OR−expression 
</I><FONT face=Courier>| </FONT><I>exclusive−OR−expression</I></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 219525px"><NOBR>The usual 
arithmetic conversions are performed; the result is the bitwise inclusive OR 
function of the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 219544px"><NOBR>operands. The 
operator applies only to integral operands.</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 219584px"><NOBR><B>A.7.14 
Logical AND Operator</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 219627px"><NOBR><I>logical−AND−expression</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 219647px"><NOBR><I>inclusive−OR−expression</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 219667px"><NOBR><I>logical−AND−expression 
</I><FONT face=Courier>&amp;&amp; 
</FONT><I>inclusive−OR−expression</I></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 219707px"><NOBR>The <FONT 
face=Courier>&amp;&amp; </FONT>operator groups left−to−right. It returns 1 if 
both its operands compare unequal to zero, 0 otherwise.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 219726px"><NOBR>Unlike <FONT 
face=Courier>&amp;</FONT>, <FONT face=Courier>&amp;&amp; </FONT>guarantees 
left−to−right evaluation: the first operand is evaluated, including all side 
effects; if it</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 219746px"><NOBR>is equal to 0, 
the value of the expression is 0. Otherwise, the right operand is evaluated, and 
if it is equal to 0,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 219766px"><NOBR>the 
expression's value is 0, otherwise 1.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 219806px"><NOBR>The operands 
need not have the same type, but each must have arithmetic type or be a pointer. 
The result is</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 219826px"><NOBR>int<FONT 
face=Times>.</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 218809px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 219889px"><NOBR>A.7.11 Bitwise 
AND Operator</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 219889px"><NOBR>185</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 219955px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=186><B>Page 186</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 220048px"><NOBR><B>A.7.15 
Logical OR Operator</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 220091px"><NOBR><I>logical−OR−expression</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 220111px"><NOBR><I>logical−AND−expression</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 220130px"><NOBR><I>logical−OR−expression 
</I><FONT face=Courier>|| </FONT><I>logical−AND−expression</I></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 220170px"><NOBR>The <FONT 
face=Courier>|| </FONT>operator groups left−to−right. It returns 1 if either of 
its operands compare unequal to zero, and 0</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 220190px"><NOBR>otherwise. 
Unlike <FONT face=Courier>|</FONT>, <FONT face=Courier>|| </FONT>guarantees 
left−to−right evaluation: the first operand is evaluated, including all 
side</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 220210px"><NOBR>effects; if it 
is unequal to 0, the value of the expression is 1. Otherwise, the right operand 
is evaluated, and if it</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 220229px"><NOBR>is unequal to 
0, the expression's value is 1, otherwise 0.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 220269px"><NOBR>The operands 
need not have the same type, but each must have arithmetic type or be a pointer. 
The result is</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 220290px"><NOBR>int<FONT 
face=Times>.</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 220329px"><NOBR><B>A.7.16 
Conditional Operator</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 220372px"><NOBR><I>conditional−expression</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 220392px"><NOBR><I>logical−OR−expression</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 220412px"><NOBR><I>logical−OR−expression 
</I><FONT face=Courier>? </FONT><I>expression </I><FONT face=Courier>: 
</FONT><I>conditional−expression</I></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 220451px"><NOBR>The first 
expression is evaluated, including all side effects; if it compares unequal to 
0, the result is the value</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 220471px"><NOBR>of the second 
expression, otherwise that of the third expression. Only one of the second and 
third operands is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 220491px"><NOBR>evaluated. If 
the second and third operands are arithmetic, the usual arithmetic conversions 
are performed to</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 220511px"><NOBR>bring them to 
a common type, and that type is the type of the result. If both are <FONT 
face=Courier>void</FONT>, or structures or unions</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 220530px"><NOBR>of the same 
type, or pointers to objects of the same type, the result has the common type. 
If one is a pointer</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 220550px"><NOBR>and the other 
the constant 0, the 0 is converted to the pointer type, and the result has that 
type. If one is a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 220570px"><NOBR>pointer to 
<FONT face=Courier>void </FONT>and the other is another pointer, the other 
pointer is converted to a pointer to <FONT face=Courier>void</FONT>, and 
that</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 220590px"><NOBR>is the type of 
the result.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 220629px"><NOBR>In the type 
comparison for pointers, any type qualifiers (<A 
href="#189"></A><FONT 
face=Times color=#0000ff><A 
href="#189">Par.A.8.2</A></FONT><A 
href="#189"></A>) 
in the type to which the pointer points are</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 220649px"><NOBR>insignificant, 
but the result type inherits qualifiers from both arms of the 
conditional.</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 220689px"><NOBR><B>A.7.17 
Assignment Expressions</B></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 220732px"><NOBR>There are 
several assignment operators; all group right−to−left.</NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 220772px"><NOBR><I>assignment−expression</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 220792px"><NOBR><I>conditional−expression</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 220812px"><NOBR><I>unary−expression 
assignment−operator assignment−expression</I></NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 220851px"><NOBR><I>assignment−operator</I>: 
one of</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 220872px"><NOBR>= *= /= %= += 
−= &lt;&lt;= &gt;&gt;= &amp;= ^= |=</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 220911px"><NOBR>All require an 
lvalue as left operand, and the lvalue must be modifiable: it must not be an 
array, and must not</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 220930px"><NOBR>have an 
incomplete type, or be a function. Also, its type must not be qualified with 
<FONT face=Courier>const</FONT>; if it is a structure</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 220950px"><NOBR>or union, it 
must not have any member or, recursively, submember qualified with <FONT 
face=Courier>const</FONT>. The type of an</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 220970px"><NOBR>assignment 
expression is that of its left operand, and the value is the value stored in the 
left operand after the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 220990px"><NOBR>assignment has 
taken place.</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 219997px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 221077px"><NOBR>A.7.15 Logical 
OR Operator</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 221077px"><NOBR>186</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 221143px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=187><B>Page 187</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 221235px"><NOBR>In the simple 
assignment with <FONT face=Courier>=</FONT>, the value of the expression 
replaces that of the object referred to by the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 221255px"><NOBR>lvalue. One of 
the following must be true: both operands have arithmetic type, in which case 
the right operand</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 221275px"><NOBR>is converted 
to the type of the left by the assignment; or both operands are structures or 
unions of the same</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 221295px"><NOBR>type; or one 
operand is a pointer and the other is a pointer to <FONT 
face=Courier>void</FONT>, or the left operand is a pointer and the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 221314px"><NOBR>right operand 
is a constant expression with value 0; or both operands are pointers to 
functions or objects</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 221334px"><NOBR>whose types 
are the same except for the possible absence of <FONT face=Courier>const 
</FONT>or <FONT face=Courier>volatile </FONT>in the right operand.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 221374px"><NOBR>An expression 
of the form <FONT face=Courier>E1 </FONT><I><FONT 
face=Courier>op</FONT></I><FONT face=Courier>= E2 </FONT>is equivalent to <FONT 
face=Courier>E1 = E1 </FONT><I><FONT face=Courier>op </FONT></I><FONT 
face=Courier>(E2) </FONT>except that <FONT face=Courier>E1 </FONT>is 
evaluated</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 221394px"><NOBR>only 
once.</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 221434px"><NOBR><B>A.7.18 
Comma Operator</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 221477px"><NOBR><I>expression</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 221497px"><NOBR><I>assignment−expression</I></NOBR></DIV>
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 221516px"><NOBR><I>expression 
</I><FONT face=Courier>, </FONT><I>assignment−expression</I></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 221556px"><NOBR>A pair of 
expressions separated by a comma is evaluated left−to−right, and the value of 
the left expression is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 221576px"><NOBR>discarded. The 
type and value of the result are the type and value of the right operand. All 
side effects from</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 221596px"><NOBR>the evaluation 
of the left−operand are completed before beginning the evaluation of the right 
operand. In</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 221615px"><NOBR>contexts where 
comma is given a special meaning, for <B><SPAN class=goohl2>example</SPAN></B> 
in lists of function arguments (<A 
href="#179"></A><FONT 
face=Times color=#0000ff><A 
href="#179">Par.A.7.3.2</A></FONT>)</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 221635px"><NOBR>and lists of 
initializers (<FONT face=Times color=#0000ff><A 
href="#197">Par.A.8.7</A></FONT><A 
href="#197"></A>), 
the required syntactic unit is an assignment expression, so the 
comma</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 221655px"><NOBR>operator 
appears only in a parenthetical grouping, for <B><SPAN 
class=goohl2>example</SPAN></B>,</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 221694px"><NOBR>f(a, (t=3, 
t+2), c)</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 221731px"><NOBR>has three 
arguments, the second of which has the value 5.</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 221771px"><NOBR><B>A.7.19 
Constant Expressions</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 221814px"><NOBR>Syntactically, 
a constant expression is an expression restricted to a subset of 
operators:</NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 221854px"><NOBR><I>constant−expression</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 221873px"><NOBR><I>conditional−expression</I></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 221913px"><NOBR>Expressions 
that evaluate to a constant are required in several contexts: after <FONT 
face=Courier>case</FONT>, as array bounds and</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 221933px"><NOBR>bit−field 
lengths, as the value of an enumeration constant, in initializers, and in 
certain preprocessor</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 221953px"><NOBR>expressions.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 221992px"><NOBR>Constant 
expressions may not contain assignments, increment or decrement operators, 
function calls, or</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 222012px"><NOBR>comma 
operators; except in an operand of <FONT face=Courier>sizeof</FONT>. If the 
constant expression is required to be integral, its</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 222032px"><NOBR>operands must 
consist of integer, enumeration, character, and floating constants; casts must 
specify an integral</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 222052px"><NOBR>type, and any 
floating constants must be cast to integer. This necessarily rules out arrays, 
indirection,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 222071px"><NOBR>address−of, 
and structure member operations. (However, any operand is permitted for <FONT 
face=Courier>sizeof</FONT>.)</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 222111px"><NOBR>More latitude 
is permitted for the constant expressions of initializers; the operands may be 
any type of</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 222131px"><NOBR>constant, and 
the unary <FONT face=Courier>&amp; </FONT>operator may be applied to external or 
static objects, and to external and static</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 222151px"><NOBR>arrays 
subscripted with a constant expression. The unary <FONT face=Courier>&amp; 
</FONT>operator can also be applied implicitly by</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 222170px"><NOBR>appearance of 
unsubscripted arrays and functions. Initializers must evaluate either to a 
constant or to the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 222190px"><NOBR>address of a 
previously declared external or static object plus or minus a 
constant.</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 221185px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 222265px"><NOBR>A.7.18 Comma 
Operator</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 222265px"><NOBR>187</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 222331px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=188><B>Page 188</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 222423px"><NOBR>Less latitude 
is allowed for the integral constant expressions after <FONT 
face=Courier>#if</FONT>; <FONT face=Courier>sizeof </FONT>expressions, 
enumeration</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 222443px"><NOBR>constants, and 
casts are not permitted. See <FONT face=Times color=#0000ff><A 
href="#211">Par.A.12.5</A></FONT><A 
href="#211"></A>.</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=4><SPAN style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 222484px"><NOBR><B>A.8 
Declarations</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 222531px"><NOBR>Declarations 
specify the interpretation given to each identifier; they do not necessarily 
reserve storage</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 222551px"><NOBR>associated 
with the identifier. Declarations that reserve storage are called 
<I>definitions</I>. Declarations have the</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 222571px"><NOBR>form</NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 222610px"><NOBR><I>declaration</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 222630px"><NOBR><I>declaration−specifiers 
init−declarator−list</I></NOBR></DIV></SPAN></FONT><FONT face=Times size=2><SPAN 
style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 456px; POSITION: absolute; TOP: 222636px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 471px; POSITION: absolute; TOP: 222631px"><NOBR>;</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 222670px"><NOBR>The 
declarators in the init−declarator list contain the identifiers being declared; 
the declaration−specifiers</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 222689px"><NOBR>consist of a 
sequence of type and storage class specifiers.</NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 222729px"><NOBR><I>declaration−specifiers</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 222749px"><NOBR><I>storage−class−specifier 
declaration−specifiers</I></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 484px; POSITION: absolute; TOP: 222755px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 222769px"><NOBR><I>type−specifier 
declaration−specifiers</I></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 417px; POSITION: absolute; TOP: 222775px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 222788px"><NOBR><I>type−qualifier 
declaration−specifiers</I></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 417px; POSITION: absolute; TOP: 222794px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 222828px"><NOBR><I>init−declarator−list</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 222848px"><NOBR><I>init−declarator</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 222868px"><NOBR><I>init−declarator−list 
</I><FONT face=Courier>, </FONT><I>init−declarator</I></NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 222907px"><NOBR><I>init−declarator</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 222927px"><NOBR><I>declarator</I></NOBR></DIV>
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 222947px"><NOBR><I>declarator 
</I><FONT face=Courier>= </FONT><I>initializer</I></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 222986px"><NOBR>Declarators 
will be discussed later (<FONT face=Times color=#0000ff><A 
href="#193">Par.A.8.5</A></FONT><A 
href="#193"></A>); 
they contain the names being declared. A declaration must</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 223006px"><NOBR>have at least 
one declarator, or its type specifier must declare a structure tag, a union tag, 
or the members of an</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 223026px"><NOBR>enumeration; 
empty declarations are not permitted.</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 223066px"><NOBR><B>A.8.1 
Storage Class Specifiers</B></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 223109px"><NOBR>The storage 
class specifiers are:</NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 223149px"><NOBR><I>storage−class 
specifier</I>:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 223169px"><NOBR>auto</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 223189px"><NOBR>register</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 223209px"><NOBR>static</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 223229px"><NOBR>extern</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 223249px"><NOBR>typedef</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 223287px"><NOBR>The meaning of 
the storage classes were discussed in <A 
href="#175"></A><FONT 
face=Times color=#0000ff><A 
href="#175">Par.A.4.4</A></FONT><A 
href="#175"></A>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 223327px"><NOBR>The <FONT 
face=Courier>auto </FONT>and <FONT face=Courier>register </FONT>specifiers give 
the declared objects automatic storage class, and may be used only</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 223347px"><NOBR>within 
functions. Such declarations also serve as definitions and cause storage to be 
reserved. A <FONT face=Courier>register</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 223367px"><NOBR>declaration is 
equivalent to an <FONT face=Courier>auto </FONT>declaration, but hints that the 
declared objects will be accessed</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 223386px"><NOBR>frequently. 
Only a few objects are actually placed into registers, and only certain types 
are eligible; the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 223406px"><NOBR>restrictions 
are implementation−dependent. However, if an object is declared <FONT 
face=Courier>register</FONT>, the unary <FONT 
face=Courier>&amp;</FONT></NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 222373px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 223453px"><NOBR>A.8 
Declarations</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 223453px"><NOBR>188</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 223519px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=189><B>Page 189</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 223611px"><NOBR>operator may 
not be applied to it, explicitly or implicitly.</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 223650px"><NOBR>The rule that 
it is illegal to calculate the address of an object declared <FONT 
face=Courier>register</FONT>, but actually taken to be <FONT 
face=Courier>auto</FONT>, is new.</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 223687px"><NOBR>The <FONT 
face=Courier>static </FONT>specifier gives the declared objects static storage 
class, and may be used either inside or outside</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 223707px"><NOBR>functions. 
Inside a function, this specifier causes storage to be allocated, and serves as 
a definition; for its</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 223727px"><NOBR>effect outside 
a function, see <A 
href="#207"></A><FONT 
face=Times color=#0000ff><A 
href="#207">Par.A.11.2</A></FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 223766px"><NOBR>A declaration 
with <FONT face=Courier>extern</FONT>, used inside a function, specifies that 
the storage for the declared objects is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 223786px"><NOBR>defined 
elsewhere; for its effects outside a function, see <A 
href="#207"></A><FONT 
face=Times color=#0000ff><A 
href="#207">Par.A.11.2</A></FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 223826px"><NOBR>The <FONT 
face=Courier>typedef </FONT>specifier does not reserve storage and is called a 
storage class specifier only for syntactic</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 223846px"><NOBR>convenience; 
it is discussed in <FONT face=Times color=#0000ff><A 
href="#200">Par.A.8.9</A></FONT><A 
href="#200"></A>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 223885px"><NOBR>At most one 
storage class specifier may be given in a declaration. If none is given, these 
rules are used:</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 223905px"><NOBR>objects 
declared inside a function are taken to be <FONT face=Courier>auto</FONT>; 
functions declared within a function are taken to be 
</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 223926px"><NOBR>extern<FONT 
face=Times>; objects and functions declared outside a function are taken to be 
</FONT>static<FONT face=Times>, with external 
linkage.</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 223945px"><NOBR>See <FONT 
face=Times color=#0000ff><A 
href="#204">Pars. 
A.10</A></FONT>−<FONT face=Times color=#0000ff><A 
href="#206">A.11</A></FONT><A 
href="#206"></A>.</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 223984px"><NOBR><B>A.8.2 Type 
Specifiers</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 224028px"><NOBR>The 
type−specifiers are</NOBR></DIV>
<DIV style="LEFT: 148px; POSITION: absolute; TOP: 224067px"><NOBR><I>type 
specifier</I>:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 224088px"><NOBR>void</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 224108px"><NOBR>char</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 224128px"><NOBR>short</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 224147px"><NOBR>int</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 224167px"><NOBR>long</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 224187px"><NOBR>float</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 224207px"><NOBR>double</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 224227px"><NOBR>signed</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 224246px"><NOBR>unsigned</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 224265px"><NOBR><I>struct−or−union−specifier</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 224285px"><NOBR><I>enum−specifier</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 224305px"><NOBR><I>typedef−name</I></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 224344px"><NOBR>At most one of 
the words <FONT face=Courier>long </FONT>or <FONT face=Courier>short </FONT>may 
be specified together with <FONT face=Courier>int</FONT>; the meaning is the 
same if</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 224365px"><NOBR>int <FONT 
face=Times>is not mentioned. The word </FONT>long <FONT face=Times>may be 
specified together with </FONT>double<FONT face=Times>. At most one of 
</FONT>signed <FONT face=Times>or</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 224385px"><NOBR>unsigned <FONT 
face=Times>may be specified together with </FONT>int <FONT face=Times>or any of 
its </FONT>short <FONT face=Times>or </FONT>long <FONT face=Times>varieties, or 
with </FONT>char<FONT face=Times>. Either</FONT></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 224404px"><NOBR>may appear 
alone in which case <FONT face=Courier>int </FONT>is understood. The <FONT 
face=Courier>signed </FONT>specifier is useful for forcing <FONT 
face=Courier>char </FONT>objects</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 224424px"><NOBR>to carry a 
sign; it is permissible but redundant with other integral types.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 224463px"><NOBR>Otherwise, at 
most one type−specifier may be given in a declaration. If the type−specifier is 
missing from a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 224483px"><NOBR>declaration, 
it is taken to be <FONT face=Courier>int</FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 224523px"><NOBR>Types may also 
be qualified, to indicate special properties of the objects being 
declared.</NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 224562px"><NOBR><I>type−qualifier</I>:</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 224583px"><NOBR>const</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 224603px"><NOBR>volatile</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 223561px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 224641px"><NOBR>A.8.2 Type 
Specifiers</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 224641px"><NOBR>189</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 224707px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=190><B>Page 190</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 224799px"><NOBR>Type 
qualifiers may appear with any type specifier. A <FONT face=Courier>const 
</FONT>object may be initialized, but not thereafter</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 224819px"><NOBR>assigned to. 
There are no implementation−dependent semantics for <FONT face=Courier>volatile 
</FONT>objects.</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 224858px"><NOBR>The <FONT 
face=Courier>const </FONT>and <FONT face=Courier>volatile </FONT>properties are 
new with the ANSI standard. The purpose of <FONT face=Courier>const </FONT>is to 
announce objects</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 224874px"><NOBR>that may be 
placed in read−only memory, and perhaps to increase opportunities for 
optimization. The purpose of</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 224891px"><NOBR>volatile <FONT 
face=Times>is to force an implementation to suppress optimization that could 
otherwise occur. For <B><SPAN class=goohl2>example</SPAN></B>, for a 
machine</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 224907px"><NOBR>with 
memory−mapped input/output, a pointer to a device register might be declared as 
a pointer to <FONT face=Courier>volatile</FONT>, in order to</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 224924px"><NOBR>prevent the 
compiler from removing apparently redundant references through the pointer. 
Except that it should diagnose</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 224940px"><NOBR>explicit 
attempts to change <FONT face=Courier>const </FONT>objects, a compiler may 
ignore these qualifiers.</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 224978px"><NOBR><B>A.8.3 
Structure and Union Declarations</B></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 225021px"><NOBR>A structure is 
an object consisting of a sequence of named members of various types. A union is 
an object that</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 225041px"><NOBR>contains, at 
different times, any of several members of various types. Structure and union 
specifiers have the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 225061px"><NOBR>same 
form.</NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 225100px"><NOBR><I>struct−or−union−specifier</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 225120px"><NOBR><I>struct−or−union 
identifier</I></NOBR></DIV></SPAN></FONT><FONT face=Times size=2><SPAN 
style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 344px; POSITION: absolute; TOP: 225126px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 359px; POSITION: absolute; TOP: 225121px"><NOBR>{ <I><FONT 
face=Times>struct−declaration−list </FONT></I>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 225140px"><NOBR><I>struct−or−union 
identifier</I></NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 225179px"><NOBR><I>struct−or−union</I>:</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 225200px"><NOBR>struct</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 225220px"><NOBR>union</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 225259px"><NOBR>A 
struct−declaration−list is a sequence of declarations for the members of the 
structure or union:</NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 225298px"><NOBR><I>struct−declaration−list</I>:</NOBR></DIV>
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 225318px"><NOBR><I>struct 
declaration</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 225338px"><NOBR><I>struct−declaration−list 
struct declaration</I></NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 225377px"><NOBR><I>struct−declaration</I>: 
<I>specifier−qualifier−list struct−declarator−list</I><FONT 
face=Courier>;</FONT></NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 225417px"><NOBR><I>specifier−qualifier−list</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 225437px"><NOBR><I>type−specifier 
specifier−qualifier−list</I></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 423px; POSITION: absolute; TOP: 225443px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 225457px"><NOBR><I>type−qualifier 
specifier−qualifier−list</I></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 423px; POSITION: absolute; TOP: 225463px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 225496px"><NOBR><I>struct−declarator−list</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 225516px"><NOBR><I>struct−declarator</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 225536px"><NOBR><I>struct−declarator−list 
</I><FONT face=Courier>, </FONT><I>struct−declarator</I></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 225575px"><NOBR>Usually, a 
struct−declarator is just a declarator for a member of a structure or union. A 
structure member may</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 225595px"><NOBR>also consist 
of a specified number of bits. Such a member is also called a <I>bit−field</I>; 
its length is set off from</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 225615px"><NOBR>the declarator 
for the field name by a colon.</NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 225655px"><NOBR><I>struct−declarator</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 225674px"><NOBR><I>declarator</I></NOBR></DIV>
<DIV 
style="LEFT: 301px; POSITION: absolute; TOP: 225674px"><NOBR><I>declarator</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 370px; POSITION: absolute; TOP: 225680px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 389px; POSITION: absolute; TOP: 225675px"><NOBR>: <I><FONT 
face=Times>constant−expression</FONT></I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 225714px"><NOBR>A type 
specifier of the form</NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 225754px"><NOBR><I>struct−or−union 
identifier </I><FONT face=Courier>{ </FONT><I>struct−declaration−list </I><FONT 
face=Courier>}</FONT></NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 224749px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 225829px"><NOBR>A.8.3 
Structure and Union Declarations</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 225829px"><NOBR>190</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 225895px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=191><B>Page 191</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 225987px"><NOBR>declares the 
identifier to be the <I>tag </I>of the structure or union specified by the list. 
A subsequent declaration in</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 226007px"><NOBR>the same or an 
inner scope may refer to the same type by using the tag in a specifier without 
the list:</NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 226047px"><NOBR><I>struct−or−union 
identifier</I></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 226086px"><NOBR>If a specifier 
with a tag but without a list appears when the tag is not declared, an 
<I>incomplete type </I>is specified.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 226106px"><NOBR>Objects with 
an incomplete structure or union type may be mentioned in contexts where their 
size is not</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 226126px"><NOBR>needed, for 
<B><SPAN class=goohl2>example</SPAN></B> in declarations (not definitions), for 
specifying a pointer, or for creating a <FONT face=Courier>typedef</FONT>, 
but</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 226146px"><NOBR>not otherwise. 
The type becomes complete on occurrence of a subsequent specifier with that tag, 
and</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 226165px"><NOBR>containing a 
declaration list. Even in specifiers with a list, the structure or union type 
being declared is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 226185px"><NOBR>incomplete 
within the list, and becomes complete only at the <FONT face=Courier>} 
</FONT>terminating the specifier.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 226225px"><NOBR>A structure 
may not contain a member of incomplete type. Therefore, it is impossible to 
declare a structure or</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 226245px"><NOBR>union 
containing an instance of itself. However, besides giving a name to the 
structure or union type, tags</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 226264px"><NOBR>allow 
definition of self−referential structures; a structure or union may contain a 
pointer to an instance of</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 226284px"><NOBR>itself, 
because pointers to incomplete types may be declared.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 226324px"><NOBR>A very special 
rule applies to declarations of the form</NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 226363px"><NOBR><I>struct−or−union 
identifier</I><FONT face=Courier>;</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 226403px"><NOBR>that declare a 
structure or union, but have no declaration list and no declarators. Even if the 
identifier is a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 226423px"><NOBR>structure or 
union tag already declared in an outer scope (<A 
href="#207"></A><FONT 
face=Times color=#0000ff><A 
href="#207">Par.A.11.1</A></FONT>), 
this declaration makes the identifier the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 226443px"><NOBR>tag of a new, 
incompletely−typed structure or union in the current 
scope.</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 226481px"><NOBR>This recondite 
is new with ANSI. It is intended to deal with mutually−recursive structures 
declared in an inner scope, but</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 226498px"><NOBR>whose tags 
might already be declared in the outer scope.</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 226535px"><NOBR>A structure or 
union specifier with a list but no tag creates a unique type; it can be referred 
to directly only in</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 226555px"><NOBR>the 
declaration of which it is a part.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 226594px"><NOBR>The names of 
members and tags do not conflict with each other or with ordinary variables. A 
member name</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 226614px"><NOBR>may not appear 
twice in the same structure or union, but the same member name may be used in 
different</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 226634px"><NOBR>structures or 
unions.</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 226673px"><NOBR>In the first 
edition of this book, the names of structure and union members were not 
associated with their parent. However,</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 226689px"><NOBR>this 
association became common in compilers well before the ANSI 
standard.</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 226726px"><NOBR>A non−field 
member of a structure or union may have any object type. A field member (which 
need not have</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 226746px"><NOBR>a declarator 
and thus may be unnamed) has type <FONT face=Courier>int</FONT>, <FONT 
face=Courier>unsigned int</FONT>, or <FONT face=Courier>signed int</FONT>, and 
is interpreted</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 226766px"><NOBR>as an object 
of integral type of the specified length in bits; whether an <FONT 
face=Courier>int </FONT>field is treated as signed is</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 226786px"><NOBR>implementation−dependent. 
Adjacent field members of structures are packed into 
implementation−dependent</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 226806px"><NOBR>storage units 
in an implementation−dependent direction. When a field following another field 
will not fit into</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 226825px"><NOBR>a 
partially−filled storage unit, it may be split between units, or the unit may be 
padded. An unnamed field</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 226845px"><NOBR>with width 0 
forces this padding, so that the next field will begin at the edge of the next 
allocation unit.</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 226884px"><NOBR>The ANSI 
standard makes fields even more implementation−dependent than did the first 
edition. It is advisable to read the</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 226900px"><NOBR>language rules 
for storing bit−fields as ``implementation−dependent'' without qualification. 
Structures with bit−fields may</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 226917px"><NOBR>be used as a 
portable way of attempting to reduce the storage required for a structure (with 
the probable cost of increasing</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 226933px"><NOBR>the 
instruction space, and time, needed to access the fields), or as a non−portable 
way to describe a storage layout known</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 226950px"><NOBR>at the 
bit−level. In the second case, it is necessary to understand the rules of the 
local implementation.</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 225937px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 227017px"><NOBR>A.8.3 
Structure and Union Declarations</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 227017px"><NOBR>191</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 227083px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=192><B>Page 192</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 227175px"><NOBR>The members of 
a structure have addresses increasing in the order of their declarations. A 
non−field member</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 227195px"><NOBR>of a structure 
is aligned at an addressing boundary depending on its type; therefore, there may 
be unnamed</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 227215px"><NOBR>holes in a 
structure. If a pointer to a structure is cast to the type of a pointer to its 
first member, the result</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 227235px"><NOBR>refers to the 
first member.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 227274px"><NOBR>A union may be 
thought of as a structure all of whose members begin at offset 0 and whose size 
is sufficient</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 227294px"><NOBR>to contain any 
of its members. At most one of the members can be stored in a union at any time. 
If a pointr to</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 227314px"><NOBR>a union is 
cast to the type of a pointer to a member, the result refers to that 
member.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 227353px"><NOBR>A simple 
<B><SPAN class=goohl2>example</SPAN></B> of a structure declaration 
is</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 227393px"><NOBR>struct tnode 
{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 227409px"><NOBR>char 
tword[20];</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 227426px"><NOBR>int 
count;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 227442px"><NOBR>struct tnode 
*left;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 227459px"><NOBR>struct tnode 
*right;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 227475px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 227512px"><NOBR>which contains 
an array of 20 characters, an integer, and two pointers to similar structures. 
Once this</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 227532px"><NOBR>declaration 
has bene given, the declaration</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 227571px"><NOBR>struct tnode 
s, *sp;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 227608px"><NOBR>declares <FONT 
face=Courier>s </FONT>to be a structure of the given sort, and <FONT 
face=Courier>sp </FONT>to be a pointer to a structure of the given sort. With 
these</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 227627px"><NOBR>declarations, 
the expression</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 227667px"><NOBR>sp−&gt;count</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 227703px"><NOBR>refers to the 
<FONT face=Courier>count </FONT>field of the structure to which <FONT 
face=Courier>sp </FONT>points;</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 227743px"><NOBR>s.left</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 227779px"><NOBR>refers to the 
left subtree pointer of the structure <FONT face=Courier>s</FONT>, 
and</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 227819px"><NOBR>s.right−&gt;tword[0]</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 227855px"><NOBR>refers to the 
first character of the <FONT face=Courier>tword </FONT>member of the right 
subtree of <FONT face=Courier>s</FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 227895px"><NOBR>In general, a 
member of a union may not be inspected unless the value of the union has been 
assigned using</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 227914px"><NOBR>the same 
member. However, one special guarantee simplifies the use of unions: if a union 
contains several</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 227934px"><NOBR>structures 
that share a common initial sequence, and the union currently contains one of 
these structures, it is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 227954px"><NOBR>permitted to 
refer to the common initial part of any of the contained structures. For 
<B><SPAN class=goohl2>example</SPAN></B>, the following is a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 227974px"><NOBR>legal 
fragment:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 228013px"><NOBR>union 
{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 228030px"><NOBR>struct 
{</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 228046px"><NOBR>int 
type;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 228063px"><NOBR>} 
n;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 228079px"><NOBR>struct 
{</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 228096px"><NOBR>int 
type;</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 228112px"><NOBR>int 
intnode;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 228129px"><NOBR>} 
ni;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 228145px"><NOBR>struct 
{</NOBR></DIV>
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 228162px"><NOBR>int 
type;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 227125px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 228205px"><NOBR>A.8.3 
Structure and Union Declarations</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 228205px"><NOBR>192</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 228271px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=193><B>Page 193</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 228363px"><NOBR>float 
floatnode;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 228380px"><NOBR>} 
nf;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 228396px"><NOBR>} 
u;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 228413px"><NOBR>...</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 228429px"><NOBR>u.nf.type = 
FLOAT;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 228446px"><NOBR>u.nf.floatnode 
= 3.14;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 228462px"><NOBR>...</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 228479px"><NOBR>if (u.n.type 
== FLOAT)</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 228495px"><NOBR>... 
sin(u.nf.floatnode) ...</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 228532px"><NOBR><B>A.8.4 
Enumerations</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 228575px"><NOBR>Enumerations 
are unique types with values ranging over a set of named constants called 
enumerators. The</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 228595px"><NOBR>form of an 
enumeration specifier borrows from that of structures and unions.</NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 228634px"><NOBR><I>enum−specifier</I>:</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 228655px"><NOBR>enum <I><FONT 
face=Times>identifier</FONT></I></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 272px; POSITION: absolute; TOP: 228660px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 290px; POSITION: absolute; TOP: 228655px"><NOBR>{ <I><FONT 
face=Times>enumerator−list </FONT></I>}</NOBR></DIV>
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 228675px"><NOBR>enum <I><FONT 
face=Times>identifier</FONT></I></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 228714px"><NOBR><I>enumerator−list</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 228733px"><NOBR><I>enumerator</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 228753px"><NOBR><I>enumerator−list 
</I><FONT face=Courier>, </FONT><I>enumerator</I></NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 228793px"><NOBR><I>enumerator</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 228813px"><NOBR><I>identifier</I></NOBR></DIV>
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 228832px"><NOBR><I>identifier 
</I><FONT face=Courier>= </FONT><I>constant−expression</I></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 228872px"><NOBR>The 
identifiers in an enumerator list are declared as constants of type <FONT 
face=Courier>int</FONT>, and may appear wherever</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 228892px"><NOBR>constants are 
required. If no enumerations with <FONT face=Courier>= </FONT>appear, then the 
values of the corresponding constants begin</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 228912px"><NOBR>at 0 and 
increase by 1 as the declaration is read from left to right. An enumerator with 
<FONT face=Courier>= </FONT>gives the associated</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 228931px"><NOBR>identifier the 
value specified; subsequent identifiers continue the progression from the 
assigned value.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 228971px"><NOBR>Enumerator 
names in the same scope must all be distinct from each other and from ordinary 
variable names,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 228991px"><NOBR>but the values 
need not be distinct.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 229030px"><NOBR>The role of 
the identifier in the enum−specifier is analogous to that of the structure tag 
in a struct−specifier; it</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 229050px"><NOBR>names a 
particular enumeration. The rules for enum−specifiers with and without tags and 
lists are the same as</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 229070px"><NOBR>those for 
structure or union specifiers, except that incomplete enumeration types do not 
exist; the tag of an</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 229090px"><NOBR>enum−specifier 
without an enumerator list must refer to an in−scope specifier with a 
list.</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 229129px"><NOBR>Enumerations 
are new since the first edition of this book, but have been part of the language 
for some years.</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 229166px"><NOBR><B>A.8.5 
Declarators</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 229209px"><NOBR>Declarators 
have the syntax:</NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 229249px"><NOBR><I>declarator</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 229269px"><NOBR><I>pointer</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 215px; POSITION: absolute; TOP: 229275px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 234px; POSITION: absolute; TOP: 229269px"><NOBR><I>direct−declarator</I></NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 229308px"><NOBR><I>direct−declarator</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 229328px"><NOBR><I>identifier</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 229349px"><NOBR>(<I><FONT 
face=Times>declarator</FONT></I>)</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 228313px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 229393px"><NOBR>A.8.4 
Enumerations</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 229393px"><NOBR>193</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 229459px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=194><B>Page 194</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 229551px"><NOBR><I>direct−declarator 
</I><FONT face=Courier>[ 
</FONT><I>constant−expression</I></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 442px; POSITION: absolute; TOP: 229557px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 461px; POSITION: absolute; TOP: 229552px"><NOBR>]</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 229571px"><NOBR><I>direct−declarator 
</I><FONT face=Courier>( </FONT><I>parameter−type−list </I><FONT 
face=Courier>)</FONT></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 229591px"><NOBR><I>direct−declarator 
</I><FONT face=Courier>( 
</FONT><I>identifier−list</I></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 397px; POSITION: absolute; TOP: 229597px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 415px; POSITION: absolute; TOP: 229592px"><NOBR>)</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 229630px"><NOBR><I>pointer</I>:</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 229651px"><NOBR>* <I><FONT 
face=Times>type−qualifier−list</FONT></I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 308px; POSITION: absolute; TOP: 229656px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 229671px"><NOBR>* <I><FONT 
face=Times>type−qualifier−list</FONT></I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 308px; POSITION: absolute; TOP: 229676px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 327px; POSITION: absolute; TOP: 229670px"><NOBR><I>pointer</I></NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 229710px"><NOBR><I>type−qualifier−list</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 229729px"><NOBR><I>type−qualifier</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 229749px"><NOBR><I>type−qualifier−list 
type−qualifier</I></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 229789px"><NOBR>The structure 
of declarators resembles that of indirection, function, and array expressions; 
the grouping is the</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 229809px"><NOBR>same.</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 229849px"><NOBR><B>A.8.6 
Meaning of Declarators</B></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 229892px"><NOBR>A list of 
declarators appears after a sequence of type and storage class specifiers. Each 
declarator declares a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 229912px"><NOBR>unique main 
identifier, the one that appears as the first alternative of the production for 
<I>direct−declarator</I>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 229931px"><NOBR>The storage 
class specifiers apply directly to this identifier, but its type depends on the 
form of its declarator.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 229951px"><NOBR>A declarator 
is read as an assertion that when its identifier appears in an expression of the 
same form as the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 229971px"><NOBR>declarator, it 
yields an object of the specified type.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 230011px"><NOBR>Considering 
only the type parts of the declaration specifiers (<FONT face=Times 
color=#0000ff><A 
href="#189">Par. 
A.8.2</A></FONT><A 
href="#189"></A>) 
and a particular declarator, a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 230030px"><NOBR>declaration 
has the form ``<FONT face=Courier>T D</FONT>,'' where <FONT face=Courier>T 
</FONT>is a type and <FONT face=Courier>D </FONT>is a declarator. The type 
attributed to the identifier in</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 230050px"><NOBR>the various 
forms of declarator is described inductively using this notation.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 230090px"><NOBR>In a 
declaration <FONT face=Courier>T D </FONT>where <FONT face=Courier>D </FONT>is 
an unadored identifier, the type of the identifier is <FONT 
face=Courier>T</FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 230129px"><NOBR>In a 
declaration <FONT face=Courier>T D </FONT>where <FONT face=Courier>D </FONT>has 
the form</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 158px; POSITION: absolute; TOP: 230169px"><NOBR>( D1 
)</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 230205px"><NOBR>then the type 
of the identifier in <FONT face=Courier>D1 </FONT>is the same as that of <FONT 
face=Courier>D</FONT>. The parentheses do not alter the type, but 
may</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 230225px"><NOBR>change the 
binding of complex declarators.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 230264px"><NOBR><B>A.8.6.1 
Pointer Declarators</B></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 230304px"><NOBR>In a 
declaration <FONT face=Courier>T D </FONT>where <FONT face=Courier>D </FONT>has 
the form</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 148px; POSITION: absolute; TOP: 230345px"><NOBR>* <I><FONT 
face=Times>type−qualifier−list</FONT></I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 288px; POSITION: absolute; TOP: 230350px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 307px; POSITION: absolute; TOP: 230345px"><NOBR>D1</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 230383px"><NOBR>and the type 
of the identifier in the declaration <FONT face=Courier>T D1 </FONT>is 
``<I>type−modifier </I><FONT face=Courier>T</FONT>,'' the type of the identifier 
of <FONT face=Courier>D </FONT>is</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 230403px"><NOBR>``<I>type−modifier 
type−qualifier−list </I>pointer to <FONT face=Courier>T</FONT>.'' Qualifiers 
following <FONT face=Courier>* </FONT>apply to pointer itself, rather than 
to</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 230423px"><NOBR>the object to 
which the pointer points.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 230463px"><NOBR>For <B><SPAN 
class=goohl2>example</SPAN></B>, consider the 
declaration</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 158px; POSITION: absolute; TOP: 230502px"><NOBR>int 
*ap[];</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 229501px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 230581px"><NOBR>A.8.6 Meaning 
of Declarators</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 230581px"><NOBR>194</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 230647px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=195><B>Page 195</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 230739px"><NOBR>Here, <FONT 
face=Courier>ap[] </FONT>plays the role of <FONT face=Courier>D1</FONT>; a 
declaration ``<FONT face=Courier>int ap[]</FONT>'' (below) would give <FONT 
face=Courier>ap </FONT>the type ``array of int,''</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 230759px"><NOBR>the 
type−qualifier list is empty, and the type−modifier is ``array of.'' Hence the 
actual declaration gives <FONT face=Courier>ap </FONT>the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 230779px"><NOBR>type ``array 
to pointers to <FONT face=Courier>int</FONT>.''</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 230818px"><NOBR>As other 
examples, the declarations</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 158px; POSITION: absolute; TOP: 230858px"><NOBR>int i, *pi, 
*const cpi = i</NOBR></DIV>
<DIV style="LEFT: 158px; POSITION: absolute; TOP: 230874px"><NOBR>const int ci = 
3, *pci;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 230911px"><NOBR>declare an 
integer <FONT face=Courier>i </FONT>and a pointer to an integer <FONT 
face=Courier>pi</FONT>. The value of the constant pointer <FONT face=Courier>cpi 
</FONT>may not be</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 230931px"><NOBR>changed; it 
will always point to the same location, although the value to which it refers 
may be altered. The</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 230950px"><NOBR>integer <FONT 
face=Courier>ci </FONT>is constant, and may not be changed (though it may be 
initialized, as here.) The type of <FONT face=Courier>pci </FONT>is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 230970px"><NOBR>``pointer to 
<FONT face=Courier>const int</FONT>,'' and <FONT face=Courier>pci </FONT>itself 
may be changed to point to another place, but the value to which it</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 230990px"><NOBR>points may not 
be altered by assigning through <FONT face=Courier>pci</FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 231029px"><NOBR><B>A.8.6.2 
Array Declarators</B></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 231069px"><NOBR>In a 
declaration <FONT face=Courier>T D </FONT>where <FONT face=Courier>D </FONT>has 
the form</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 148px; POSITION: absolute; TOP: 231110px"><NOBR>D1 [<I><FONT 
face=Times>constant−expression</FONT></I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 325px; POSITION: absolute; TOP: 231115px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 339px; POSITION: absolute; TOP: 231110px"><NOBR>]</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 231148px"><NOBR>and the type 
of the identifier in the declaration <FONT face=Courier>T D1 </FONT>is 
``<I>type−modifier </I><FONT face=Courier>T</FONT>,'' the type of the identifier 
of <FONT face=Courier>D </FONT>is</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 231168px"><NOBR>``<I>type−modifier 
</I>array of <FONT face=Courier>T</FONT>.'' If the constant−expression is 
present, it must have integral type, and value greater</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 231188px"><NOBR>than 0. If the 
constant expression specifying the bound is missing, the array has an incomplete 
type.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 231228px"><NOBR>An array may 
be constructed from an arithmetic type, from a pointer, from a structure or 
union, or from</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 231247px"><NOBR>another array 
(to generate a multi−dimensional array). Any type from which an array is 
constructed must be</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 231267px"><NOBR>complete; it 
must not be an array of structure of incomplete type. This implies that for a 
multi−dimensional</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 231287px"><NOBR>array, only 
the first dimension may be missing. The type of an object of incomplete aray 
type is completed by</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 231307px"><NOBR>another, 
complete, declaration for the object (<FONT face=Times color=#0000ff><A 
href="#206">Par.A.10.2</A></FONT><A 
href="#206"></A>), 
or by initializing it (<FONT face=Times color=#0000ff><A 
href="#197">Par.A.8.7</A></FONT><A 
href="#197"></A>). 
For <B><SPAN class=goohl2>example</SPAN></B>,</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 158px; POSITION: absolute; TOP: 231346px"><NOBR>float fa[17], 
*afp[17];</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 231383px"><NOBR>declares an 
array of <FONT face=Courier>float </FONT>numbers and an array of pointers to 
<FONT face=Courier>float </FONT>numbers. Also,</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 158px; POSITION: absolute; TOP: 231422px"><NOBR>static int 
x3d[3][5][7];</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 231459px"><NOBR>declares a 
static three−dimensional array of integers, with rank 3 <FONT face=Courier>X 
</FONT>5 <FONT face=Courier>X </FONT>7. In complete detail, <FONT 
face=Courier>x3d </FONT>is an array</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 231478px"><NOBR>of three 
items: each item is an array of five arrays; each of the latter arrays is an 
array of seven integers. Any</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 231498px"><NOBR>of the 
expressions <FONT face=Courier>x3d</FONT>, <FONT face=Courier>x3d[i]</FONT>, 
<FONT face=Courier>x3d[i][j]</FONT>, <FONT face=Courier>x3d[i][j][k] </FONT>may 
reasonably appear in an expression.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 231518px"><NOBR>The first 
three have type ``array,'', the last has type <FONT face=Courier>int</FONT>. 
More specifically, <FONT face=Courier>x3d[i][j] </FONT>is an array of 
7</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 231538px"><NOBR>integers, and 
<FONT face=Courier>x3d[i] </FONT>is an array of 5 arrays of 7 
integers.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 231577px"><NOBR>The array 
subscripting operation is defined so that <FONT face=Courier>E1[E2] </FONT>is 
identical to <FONT face=Courier>*(E1+E2)</FONT>. Therefore, despite 
its</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 231597px"><NOBR>asymmetric 
appearance, subscripting is a commutative operation. Because of the conversion 
rules that apply</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 231617px"><NOBR>to <FONT 
face=Courier>+ </FONT>and to arrays (Pars.<A 
href="#177"></A><FONT 
face=Times color=#0000ff><A 
href="#177">A6.6</A></FONT><A 
href="#177"></A>, 
<FONT face=Times color=#0000ff><A 
href="#178">A.7.1</A></FONT><A 
href="#178"></A>, 
<FONT face=Times color=#0000ff><A 
href="#183">A.7.7</A></FONT><A 
href="#183"></A>), 
if <FONT face=Courier>E1 </FONT>is an array and <FONT face=Courier>E2 </FONT>an 
integer, then <FONT face=Courier>E1[E2] </FONT>refers to 
the</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 231638px"><NOBR>E2<FONT 
face=Times>−th member of </FONT>E1<FONT 
face=Times>.</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 231676px"><NOBR>In the 
<B><SPAN class=goohl2>example</SPAN></B>, <FONT face=Courier>x3d[i][j][k] 
</FONT>is equivalent to <FONT face=Courier>*(x3d[i][j] + k)</FONT>. The first 
subexpression</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 231697px"><NOBR>x3d[i][j] 
<FONT face=Times>is converted by <A 
href="#178"></A></FONT><FONT 
face=Times color=#0000ff><A 
href="#178">Par.A.7.1 
</A></FONT><FONT face=Times>to type ``pointer to array of integers,'' by <A 
href="#183"></A></FONT><FONT 
face=Times color=#0000ff><A 
href="#183">Par.A.7.7</A></FONT><FONT 
face=Times>, the addition</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 231716px"><NOBR>involves 
multiplication by the size of an integer. It follows from the rules that arrays 
are stored by rows (last</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 230689px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 231769px"><NOBR>A.8.6 Meaning 
of Declarators</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 231769px"><NOBR>195</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 231835px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=196><B>Page 196</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 231927px"><NOBR>subscript 
varies fastest) and that the first subscript in the declaration helps determine 
the amount of storage</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 231947px"><NOBR>consumed by an 
array, but plays no other part in subscript calculations.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 231986px"><NOBR><B>A.8.6.3 
Function Declarators</B></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 232026px"><NOBR>In a new−style 
function declaration <FONT face=Courier>T D </FONT>where <FONT face=Courier>D 
</FONT>has the form</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 148px; POSITION: absolute; TOP: 232067px"><NOBR>D1 <FONT 
face=Times>(</FONT><I><FONT face=Times>parameter−type−list</FONT></I><FONT 
face=Times>)</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 232105px"><NOBR>and the type 
of the identifier in the declaration <FONT face=Courier>T D1 </FONT>is 
``<I>type−modifier </I><FONT face=Courier>T</FONT>,'' the type of the identifier 
of <FONT face=Courier>D </FONT>is</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 232125px"><NOBR>``<I>type−modifier 
</I>function with arguments <I>parameter−type−list </I>returning <FONT 
face=Courier>T</FONT>.''</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 232165px"><NOBR>The syntax of 
the parameters is</NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 232204px"><NOBR><I>parameter−type−list</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 232224px"><NOBR><I>parameter−list</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 232244px"><NOBR><I>parameter−list 
</I><FONT face=Courier>, ...</FONT></NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 232284px"><NOBR><I>parameter−list</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 232303px"><NOBR><I>parameter−declaration</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 232323px"><NOBR><I>parameter−list 
</I><FONT face=Courier>, </FONT><I>parameter−declaration</I></NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 232363px"><NOBR><I>parameter−declaration</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 232383px"><NOBR><I>declaration−specifiers 
declarator</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 232402px"><NOBR><I>declaration−specifiers 
abstract−declarator</I></NOBR></DIV></SPAN></FONT><FONT face=Times size=2><SPAN 
style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 457px; POSITION: absolute; TOP: 232408px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 232442px"><NOBR>In the 
new−style declaration, the parameter list specifies the types of the parameters. 
As a special case, the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 232462px"><NOBR>declarator for 
a new−style function with no parameters has a parameter list consisting soley of 
the keyword</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 232483px"><NOBR>void<FONT 
face=Times>. If the parameter list ends with an ellipsis ``</FONT>, ...<FONT 
face=Times>'', then the function may accept more arguments 
than</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 232501px"><NOBR>the number of 
parameters explicitly described, see <A 
href="#179"></A><FONT 
face=Times color=#0000ff><A 
href="#179">Par.A.7.3.2</A></FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 232541px"><NOBR>The types of 
parameters that are arrays or functions are altered to pointers, in accordance 
with the rules for</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 232561px"><NOBR>parameter 
conversions; see <FONT face=Times color=#0000ff><A 
href="#204">Par.A.10.1</A></FONT><A 
href="#204"></A>. 
The only storage class specifier permitted in a parameter's 
declaration</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 232581px"><NOBR>is <FONT 
face=Courier>register</FONT>, and this specifier is ignored unless the function 
declarator heads a function definition.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 232600px"><NOBR>Similarly, if 
the declarators in the parameter declarations contain identifiers and the 
function declarator does</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 232620px"><NOBR>not head a 
function definition, the identifiers go out of scope immediately. Abstract 
declarators, which do not</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 232640px"><NOBR>mention the 
identifiers, are discussed in <A 
href="#199"></A><FONT 
face=Times color=#0000ff><A 
href="#199">Par.A.8.8</A></FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 232680px"><NOBR>In an 
old−style function declaration <FONT face=Courier>T D </FONT>where <FONT 
face=Courier>D </FONT>has the form</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 148px; POSITION: absolute; TOP: 232720px"><NOBR>D1<FONT 
face=Times>(</FONT><I><FONT 
face=Times>identifier−list</FONT></I></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 265px; POSITION: absolute; TOP: 232725px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 279px; POSITION: absolute; TOP: 232719px"><NOBR>)</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 232759px"><NOBR>and the type 
of the identifier in the declaration <FONT face=Courier>T D1 </FONT>is 
``<I>type−modifier </I><FONT face=Courier>T</FONT>,'' the type of the identifier 
of <FONT face=Courier>D </FONT>is</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 232779px"><NOBR>``<I>type−modifier 
</I>function of unspecified arguments returning <FONT face=Courier>T</FONT>.'' 
The parameters (if present) have the form</NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 232818px"><NOBR><I>identifier−list</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 232838px"><NOBR><I>identifier</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 232858px"><NOBR><I>identifier−list 
</I><FONT face=Courier>, </FONT><I>identifier</I></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 232897px"><NOBR>In the 
old−style declarator, the identifier list must be absent unless the declarator 
is used in the head of a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 232917px"><NOBR>function 
definition (<FONT face=Times color=#0000ff><A 
href="#204">Par.A.10.1</A></FONT><A 
href="#204"></A>). 
No information about the types of the parameters is supplied by the</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 231877px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 232957px"><NOBR>A.8.6 Meaning 
of Declarators</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 232957px"><NOBR>196</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 233023px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=197><B>Page 197</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 233115px"><NOBR>declaration.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 233155px"><NOBR>For <B><SPAN 
class=goohl2>example</SPAN></B>, the declaration</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 158px; POSITION: absolute; TOP: 233194px"><NOBR>int f(), 
*fpi(), (*pfi)();</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 233231px"><NOBR>declares a 
function <FONT face=Courier>f </FONT>returning an integer, a function <FONT 
face=Courier>fpi </FONT>returning a pointer to an integer, and a pointer <FONT 
face=Courier>pfi</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 233251px"><NOBR>to a function 
returning an integer. In none of these are the parameter types specified; they 
are old−style.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 233290px"><NOBR>In the 
new−style declaration</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 158px; POSITION: absolute; TOP: 233330px"><NOBR>int 
strcpy(char *dest, const char *source), 
rand(void);</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 233367px"><NOBR>strcpy <FONT 
face=Times>is a function returning </FONT>int<FONT face=Times>, with two 
arguments, the first a character pointer, and the second 
a</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 233386px"><NOBR>pointer to 
constant characters. The parameter names are effectively comments. The second 
function <FONT face=Courier>rand</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 233406px"><NOBR>takes no 
arguments and returns <FONT 
face=Courier>int</FONT>.</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 233444px"><NOBR>Function 
declarators with parameter prototypes are, by far, the most important language 
change introduced by the ANSI</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 233461px"><NOBR>standard. They 
offer an advantage over the ``old−style'' declarators of the first edition by 
providing error−detection and</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 233477px"><NOBR>coercion of 
arguments across function calls, but at a cost: turmoil and confusion during 
their introduction, and the</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 233494px"><NOBR>necessity of 
accomodating both forms. Some syntactic ugliness was required for the sake of 
compatibility, namely <FONT face=Courier>void</FONT></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 233510px"><NOBR>as an explicit 
marker of new−style functions without 
parameters.</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 233528px"><NOBR>The ellipsis 
notation ``<FONT face=Courier>, ...</FONT>'' for variadic functions is also new, 
and, together with the macros in the</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 233548px"><NOBR>standard 
header <FONT face=Courier>&lt;stdarg.h&gt;</FONT>, formalizes a mechanism that 
was officially forbidden but unofficially</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 233567px"><NOBR>condoned in 
the first edition.</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 233607px"><NOBR>These 
notations were adapted from the C++ language.</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 233647px"><NOBR><B>A.8.7 
Initialization</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 233690px"><NOBR>When an object 
is declared, its init−declarator may specify an initial value for the identifier 
being declared.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 233710px"><NOBR>The 
initializer is preceded by <FONT face=Courier>=</FONT>, and is either an 
expression, or a list of initializers nested in braces. A list may</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 233730px"><NOBR>end with a 
comma, a nicety for neat formatting.</NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 233769px"><NOBR><I>initializer</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 233789px"><NOBR><I>assignment−expression</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 233810px"><NOBR>{ <I><FONT 
face=Times>initializer−list </FONT></I>}</NOBR></DIV>
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 233830px"><NOBR>{ <I><FONT 
face=Times>initializer−list </FONT></I>, }</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 233868px"><NOBR><I>initializer−list</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 233888px"><NOBR><I>initializer</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 233908px"><NOBR><I>initializer−list 
</I><FONT face=Courier>, </FONT><I>initializer</I></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 233947px"><NOBR>All the 
expressions in the initializer for a static object or array must be constant 
expressions as described in</NOBR></DIV></SPAN></FONT><FONT face=Times 
color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 233967px"><NOBR><A 
href="#187">Par.A.7.19</A><FONT 
face=Times color=#000000>. The expressions in the initializer for an 
</FONT><FONT face=Courier color=#000000>auto </FONT><FONT face=Times 
color=#000000>or </FONT><FONT face=Courier color=#000000>register </FONT><FONT 
face=Times color=#000000>object or array must likewise 
be</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 233987px"><NOBR>constant 
expressions if the initializer is a brace−enclosed list. However, if the 
initializer for an automatic</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 234007px"><NOBR>object is a 
single expression, it need not be a constant expression, but must merely have 
appropriate type for</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 234027px"><NOBR>assignment to 
the object.</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 234065px"><NOBR>The first 
edition did not countenance initialization of automatic structures, unions, or 
arrays. The ANSI standard allows it,</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 234082px"><NOBR>but only by 
constant constructions unless the initializer can be expressed by a simple 
expression.</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 233065px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 234145px"><NOBR>A.8.7 
Initialization</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 234145px"><NOBR>197</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 234211px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=198><B>Page 198</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 234303px"><NOBR>A static 
object not explicitly initialized is initialized as if it (or its members) were 
assigned the constant 0. The</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 234323px"><NOBR>initial value 
of an automatic object not explicitly intialized is undefined.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 234363px"><NOBR>The 
initializer for a pointer or an object of arithmetic type is a single 
expression, perhaps in braces. The</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 234382px"><NOBR>expression is 
assigned to the object.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 234422px"><NOBR>The 
initializer for a structure is either an expression of the same type, or a 
brace−enclosed list of initializers</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 234442px"><NOBR>for its 
members in order. Unnamed bit−field members are ignored, and are not 
initialized. If there are fewer</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 234462px"><NOBR>initializers 
in the list than members of the structure, the trailing members are initialized 
with 0. There may not</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 234481px"><NOBR>be more 
initializers than members. Unnamed bit−field members are ignored,and are not 
initialized.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 234521px"><NOBR>The 
initializer for an array is a brace−enclosed list of initializers for its 
members. If the array has unknown</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 234541px"><NOBR>size, the 
number of initializers determines the size of the array, and its type becomes 
complete. If the array has</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 234561px"><NOBR>fixed size, 
the number of initializers may not exceed the number of members of the array; if 
there are fewer,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 234580px"><NOBR>the trailing 
members are initialized with 0.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 234620px"><NOBR>As a special 
case, a character array may be initialized by a string literal; successive 
characters of the string</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 234640px"><NOBR>initialize 
successive members of the array. Similarly, a wide character literal (<FONT 
face=Times color=#0000ff><A 
href="#173">Par.A.2.6</A></FONT>) 
may initialize an</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 234660px"><NOBR>array of type 
<FONT face=Courier>wchar_t</FONT>. If the array has unknown size, the number of 
characters in the string, including the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 234679px"><NOBR>terminating 
null character, determines its size; if its size is fixed, the number of 
characters in the string, not</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 234699px"><NOBR>counting the 
terminating null character, must not exceed the size of the array.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 234739px"><NOBR>The 
initializer for a union is either a single expression of the same type, or a 
brace−enclosed initializer for the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 234759px"><NOBR>first member 
of the union.</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 234797px"><NOBR>The first 
edition did not allow initialization of unions. The ``first−member'' rule is 
clumsy, but is hard to generalize</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 234814px"><NOBR>without new 
syntax. Besides allowing unions to be explicitly initialized in at least a 
primitive way, this ANSI rule makes</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 234830px"><NOBR>definite the 
semantics of static unions not explicitly 
initialized.</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 234868px"><NOBR>An 
<I>aggregate </I>is a structure or array. If an aggregate contains members of 
aggregate type, the initialization</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 234887px"><NOBR>rules apply 
recursively. Braces may be elided in the initialization as follows: if the 
initializer for an</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 234907px"><NOBR>aggregate's 
member that itself is an aggregate begins with a left brace, then the succeding 
comma−separated</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 234927px"><NOBR>list of 
initializers initializes the members of the subaggregate; it is erroneous for 
there to be more initializers</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 234947px"><NOBR>than members. 
If, however, the initializer for a subaggregate does not begin with a left 
brace, then only</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 234967px"><NOBR>enough 
elements from the list are taken into account for the members of the 
subaggregate; any remaining</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 234986px"><NOBR>members are 
left to initialize the next member of the aggregate of which the subaggregate is 
a part.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 235026px"><NOBR>For <B><SPAN 
class=goohl2>example</SPAN></B>,</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 235065px"><NOBR>int x[] = { 1, 
3, 5 };</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 235102px"><NOBR>declares and 
initializes <FONT face=Courier>x </FONT>as a 1−dimensional array with three 
members, since no size was specified and there</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 235122px"><NOBR>are three 
initializers.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 235161px"><NOBR>float y[4][3] 
= {</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 235178px"><NOBR>{ 1, 3, 5 
},</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 235194px"><NOBR>{ 2, 4, 6 
},</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 235211px"><NOBR>{ 3, 5, 7 
},</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 235227px"><NOBR>};</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 235264px"><NOBR>is a 
completely−bracketed initialization: 1, 3 and 5 initialize the first row of the 
array <FONT face=Courier>y[0]</FONT>, namely</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 235284px"><NOBR>y[0][0]<FONT 
face=Times>, </FONT>y[0][1]<FONT face=Times>, and </FONT>y[0][2]<FONT 
face=Times>. Likewise the next two lines initialize </FONT>y[1] <FONT 
face=Times>and </FONT>y[2]<FONT face=Times>. The 
initializer</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 234253px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 235333px"><NOBR>A.8.7 
Initialization</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 235333px"><NOBR>198</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 235399px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=199><B>Page 199</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 235491px"><NOBR>ends early, 
and therefore the elements of <FONT face=Courier>y[3] </FONT>are initialized 
with 0. Precisely the same effect could have</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 235511px"><NOBR>been achieved 
by</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 235550px"><NOBR>float y[4][3] 
= {</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 235567px"><NOBR>1, 3, 5, 2, 4, 
6, 3, 5, 7</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 235583px"><NOBR>};</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 235620px"><NOBR>The 
initializer for <FONT face=Courier>y </FONT>begins with a left brace, but that 
for <FONT face=Courier>y[0] </FONT>does not; therefore three elements from the 
list</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 235640px"><NOBR>are used. 
Likewise the next three are taken successively for <FONT face=Courier>y[1] 
</FONT>and for <FONT face=Courier>y[2]</FONT>. 
Also,</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 235679px"><NOBR>float y[4][3] 
= {</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 235696px"><NOBR>{ 1 }, { 2 }, 
{ 3 }, { 4 }</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 235712px"><NOBR>};</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 235749px"><NOBR>initializes 
the first column of <FONT face=Courier>y </FONT>(regarded as a two−dimensional 
array) and leaves the rest 0.</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 235788px"><NOBR>Finally,</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 235828px"><NOBR>char msg[] = 
"Syntax error on line %s\n";</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 235864px"><NOBR>shows a 
character array whose members are initialized with a string; its size includes 
the terminating null</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 235884px"><NOBR>character.</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 235924px"><NOBR><B>A.8.8 Type 
names</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 235967px"><NOBR>In several 
contexts (to specify type conversions explicitly with a cast, to declare 
parameter types in function</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 235987px"><NOBR>declarators, 
and as argument of <FONT face=Courier>sizeof</FONT>) it is necessary to supply 
the name of a data type. This is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 236007px"><NOBR>accomplished 
using a <I>type name</I>, which is syntactically a declaration for an object of 
that type omitting the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 236026px"><NOBR>name of the 
object.</NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 236066px"><NOBR><I>type−name</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 236086px"><NOBR><I>specifier−qualifier−list 
abstract−declarator</I></NOBR></DIV></SPAN></FONT><FONT face=Times size=2><SPAN 
style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 463px; POSITION: absolute; TOP: 236092px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 236125px"><NOBR><I>abstract−declarator</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 236145px"><NOBR><I>pointer</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 236165px"><NOBR><I>pointer</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 215px; POSITION: absolute; TOP: 236171px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 234px; POSITION: absolute; TOP: 236165px"><NOBR><I>direct−abstract−declarator</I></NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 236205px"><NOBR><I>direct−abstract−declarator</I>:</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 236224px"><NOBR>( 
<I>abstract−declarator </I>)</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 236244px"><NOBR><I>direct−abstract−declarator</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 352px; POSITION: absolute; TOP: 236250px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 371px; POSITION: absolute; TOP: 236244px"><NOBR>[<I>constant−expression</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 514px; POSITION: absolute; TOP: 236250px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 528px; POSITION: absolute; TOP: 236244px"><NOBR>]</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 236264px"><NOBR><I>direct−abstract−declarator</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 352px; POSITION: absolute; TOP: 236270px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 371px; POSITION: absolute; TOP: 236264px"><NOBR>(<I>parameter−type−list</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 515px; POSITION: absolute; TOP: 236270px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 530px; POSITION: absolute; TOP: 236264px"><NOBR>)</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 236304px"><NOBR>It is possible 
to identify uniquely the location in the abstract−declarator where the 
identifier would appear if</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 236323px"><NOBR>the 
construction were a declarator in a declaration. The named type is then the same 
as the type of the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 236343px"><NOBR>hypothetical 
identifier. For <B><SPAN 
class=goohl2>example</SPAN></B>,</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 236383px"><NOBR>int</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 236399px"><NOBR>int 
*</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 236416px"><NOBR>int 
*[3]</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 236432px"><NOBR>int 
(*)[]</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 236449px"><NOBR>int 
*()</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 236465px"><NOBR>int 
(*[])(void)</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 235441px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 236521px"><NOBR>A.8.8 Type 
names</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 236521px"><NOBR>199</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 236587px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=200><B>Page 200</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 236679px"><NOBR>name 
respectively the types ``integer,'' ``pointer to integer,'' ``array of 3 
pointers to integers,'' ``pointer to an</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 236699px"><NOBR>unspecified 
number of integers,'' ``function of unspecified parameters returning pointer to 
integer,'' and</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 236719px"><NOBR>``array, of 
unspecified size, of pointers to functions with no parameters each returning an 
integer.''</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 236759px"><NOBR><B>A.8.9 
Typedef</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 236802px"><NOBR>Declarations 
whose storage class specifier is <FONT face=Courier>typedef </FONT>do not 
declare objects; instead they define identifiers</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 236822px"><NOBR>that name 
types. These identifiers are called typedef names.</NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 236861px"><NOBR><I>typedef−name</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 236881px"><NOBR><I>identifier</I></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 236921px"><NOBR>A <FONT 
face=Courier>typedef </FONT>declaration attributes a type to each name among its 
declarators in the usual way (see <A 
href="#194"></A><FONT 
face=Times color=#0000ff><A 
href="#194">Par.A.8.6</A></FONT>).</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 236941px"><NOBR>Thereafter, 
each such typedef name is syntactically equivalent to a type specifier keyword 
for the associated</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 236960px"><NOBR>type.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 237000px"><NOBR>For <B><SPAN 
class=goohl2>example</SPAN></B>, after</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 237039px"><NOBR>typedef long 
Blockno, *Blockptr;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 237056px"><NOBR>typedef struct 
{ double r, theta; } Complex;</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 237092px"><NOBR>the 
constructions</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 237132px"><NOBR>Blockno 
b;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 237148px"><NOBR>extern 
Blockptr bp;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 237165px"><NOBR>Complex z, 
*zp;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 237201px"><NOBR>are legal 
declarations. The type of <FONT face=Courier>b </FONT>is <FONT 
face=Courier>long</FONT>, that of <FONT face=Courier>bp </FONT>is ``pointer to 
<FONT face=Courier>long</FONT>,'' and that of <FONT face=Courier>z </FONT>is the 
specified</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 237221px"><NOBR>structure; 
<FONT face=Courier>zp </FONT>is a pointer to such a 
structure.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 237262px"><NOBR>typedef <FONT 
face=Times>does not introduce new types, only synonyms for types that could be 
specified in another way. In</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 237280px"><NOBR>the <B><SPAN 
class=goohl2>example</SPAN></B>, <FONT face=Courier>b </FONT>has the same type 
as any <FONT face=Courier>long </FONT>object.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 237320px"><NOBR>Typedef names 
may be redeclared in an inner scope, but a non−empty set of type specifiers must 
be given.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 237340px"><NOBR>For <B><SPAN 
class=goohl2>example</SPAN></B>,</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 237379px"><NOBR>extern 
Blockno;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 237416px"><NOBR>does not 
redeclare <FONT face=Courier>Blockno</FONT>, but</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 237455px"><NOBR>extern int 
Blockno;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 237492px"><NOBR>does.</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 237532px"><NOBR><B>A.8.10 Type 
Equivalence</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 237575px"><NOBR>Two type 
specifier lists are equivalent if they contain the same set of type specifiers, 
taking into account that</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 237595px"><NOBR>some 
specifiers can be implied by others (for <B><SPAN 
class=goohl2>example</SPAN></B>, <FONT face=Courier>long </FONT>alone implies 
<FONT face=Courier>long int</FONT>). Structures, unions,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 237614px"><NOBR>and 
enumerations with different tags are distinct, and a tagless union, structure, 
or enumeration specifies a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 237634px"><NOBR>unique 
type.</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 236629px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 237709px"><NOBR>A.8.9 
Typedef</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 237709px"><NOBR>200</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 237775px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=201><B>Page 201</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 237867px"><NOBR>Two types are 
the same if their abstract declarators (<FONT face=Times color=#0000ff><A 
href="#199">Par.A.8.8</A></FONT><A 
href="#199"></A>), 
after expanding any <FONT face=Courier>typedef </FONT>types, and</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 237887px"><NOBR>deleting any 
function parameter specifiers, are the same up to the equivalence of type 
specifier lists. Array</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 237907px"><NOBR>sizes and 
function parameter types are significant.</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=4><SPAN style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 237948px"><NOBR><B>A.9 
Statements</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 237995px"><NOBR>Except as 
described, statements are executed in sequence. Statements are executed for 
their effect, and do not</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 238015px"><NOBR>have values. 
They fall into several groups.</NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 238054px"><NOBR><I>statement</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 238074px"><NOBR><I>labeled−statement</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 238094px"><NOBR><I>expression−statement</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 238114px"><NOBR><I>compound−statement</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 238133px"><NOBR><I>selection−statement</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 238153px"><NOBR><I>iteration−statement</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 238173px"><NOBR><I>jump−statement</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 238213px"><NOBR><B>A.9.1 
Labeled Statements</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 238256px"><NOBR>Statements may 
carry label prefixes.</NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 238296px"><NOBR><I>labeled−statement</I>:</NOBR></DIV>
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 238316px"><NOBR><I>identifier 
</I><FONT face=Courier>: </FONT><I>statement</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 238336px"><NOBR>case <I><FONT 
face=Times>constant−expression </FONT></I>: <I><FONT 
face=Times>statement</FONT></I></NOBR></DIV>
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 238356px"><NOBR>default : 
<I><FONT face=Times>statement</FONT></I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 238395px"><NOBR>A label 
consisting of an identifier declares the identifier. The only use of an 
identifier label is as a target of</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 238415px"><NOBR>goto<FONT 
face=Times>. The scope of the identifier is the current function. Because labels 
have their own name space, they do</FONT></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 238434px"><NOBR>not interfere 
with other identifiers and cannot be redeclared. See <A 
href="#207"></A><FONT 
face=Times color=#0000ff><A 
href="#207">Par.A.11.1</A></FONT><A 
href="#207"></A>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 238474px"><NOBR>Case labels 
and default labels are used with the <FONT face=Courier>switch </FONT>statement 
(<A 
href="#202"></A><FONT 
face=Times color=#0000ff><A 
href="#202">Par.A.9.4</A></FONT><A 
href="#202"></A>). 
The constant expression of</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 238495px"><NOBR>case <FONT 
face=Times>must have integral type.</FONT></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 238533px"><NOBR>Labels 
themselves do not alter the flow of control.</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 238573px"><NOBR><B>A.9.2 
Expression Statement</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 238616px"><NOBR>Most 
statements are expression statements, which have the form</NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 238656px"><NOBR><I>expression−statement</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 238676px"><NOBR><I>expression</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 238px; POSITION: absolute; TOP: 238682px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 253px; POSITION: absolute; TOP: 238677px"><NOBR>;</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 238715px"><NOBR>Most 
expression statements are assignments or function calls. All side effects from 
the expression are</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 238735px"><NOBR>completed 
before the next statement is executed. If the expression is missing, the 
construction is called a null</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 238755px"><NOBR>statement; it 
is often used to supply an empty body to an iteration statement to place a 
label.</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 238795px"><NOBR><B>A.9.3 
Compound Statement</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 238838px"><NOBR>So that 
several statements can be used where one is expected, the compound statement 
(also called ``block'') is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 238858px"><NOBR>provided. The 
body of a function definition is a compound statement.</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 237817px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 238897px"><NOBR>A.9 
Statements</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 238897px"><NOBR>201</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 238963px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=202><B>Page 202</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 239055px"><NOBR><I>compound−statement</I>:</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 239076px"><NOBR>{ <I><FONT 
face=Times>declaration−list</FONT></I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 289px; POSITION: absolute; TOP: 239081px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 308px; POSITION: absolute; TOP: 239075px"><NOBR>statement−list</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 400px; POSITION: absolute; TOP: 239081px"><NOBR>opt</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 419px; POSITION: absolute; TOP: 239076px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 239115px"><NOBR><I>declaration−list</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 239134px"><NOBR><I>declaration</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 239154px"><NOBR><I>declaration−list 
declaration</I></NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 239194px"><NOBR><I>statement−list</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 239214px"><NOBR><I>statement</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 239233px"><NOBR><I>statement−list 
statement</I></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 239273px"><NOBR>If an 
identifier in the declaration−list was in scope outside the block, the outer 
declaration is suspended within</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 239293px"><NOBR>the block (see 
<FONT face=Times color=#0000ff><A 
href="#207">Par.A.11.1</A></FONT><A 
href="#207"></A>), 
after which it resumes its force. An identifier may be declared only once in 
the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 239313px"><NOBR>same block. 
These rules apply to identifiers in the same name space (<FONT face=Times 
color=#0000ff><A 
href="#206">Par.A.11</A></FONT><A 
href="#206"></A>); 
identifiers in different name</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 239332px"><NOBR>spaces are 
treated as distinct.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 239372px"><NOBR>Initialization 
of automatic objects is performed each time the block is entered at the top, and 
proceeds in the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 239392px"><NOBR>order of the 
declarators. If a jump into the block is executed, these initializations are not 
performed.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 239412px"><NOBR>Initialization 
of <FONT face=Courier>static </FONT>objects are performed only once, before the 
program begins execution.</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 239452px"><NOBR><B>A.9.4 
Selection Statements</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 239495px"><NOBR>Selection 
statements choose one of several flows of control.</NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 239534px"><NOBR><I>selection−statement</I>:</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 239555px"><NOBR>if <FONT 
face=Times>(</FONT><I><FONT face=Times>expression</FONT></I><FONT face=Times>) 
</FONT><I><FONT face=Times>statement</FONT></I></NOBR></DIV>
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 239575px"><NOBR>if <FONT 
face=Times>(</FONT><I><FONT face=Times>expression</FONT></I><FONT face=Times>) 
</FONT><I><FONT face=Times>statement </FONT></I>else <I><FONT 
face=Times>statement</FONT></I></NOBR></DIV>
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 239595px"><NOBR>switch <FONT 
face=Times>(</FONT><I><FONT face=Times>expression</FONT></I><FONT face=Times>) 
</FONT><I><FONT face=Times>statement</FONT></I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 239633px"><NOBR>In both forms 
of the <FONT face=Courier>if </FONT>statement, the expression, which must have 
arithmetic or pointer type, is evaluated,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 239653px"><NOBR>including all 
side effects, and if it compares unequal to 0, the first substatement is 
executed. In the second</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 239673px"><NOBR>form, the 
second substatement is executed if the expression is 0. The <FONT 
face=Courier>else </FONT>ambiguity is resolved by</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 239693px"><NOBR>connecting an 
<FONT face=Courier>else </FONT>with the last encountered <FONT 
face=Courier>else</FONT>−less <FONT face=Courier>if </FONT>at the same block 
nesting level.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 239732px"><NOBR>The <FONT 
face=Courier>switch </FONT>statement causes control to be transferred to one of 
several statements depending on the value of</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 239752px"><NOBR>an expression, 
which must have integral type. The substatement controlled by a <FONT 
face=Courier>switch </FONT>is typically</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 239772px"><NOBR>compound. Any 
statement within the substatement may be labeled with one or more <FONT 
face=Courier>case </FONT>labels (<FONT face=Times color=#0000ff><A 
href="#201">Par.A.9.1</A></FONT><A 
href="#201"></A>).</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 239792px"><NOBR>The 
controlling expression undergoes integral promotion (<FONT face=Times 
color=#0000ff><A 
href="#175">Par.A.6.1</A></FONT><A 
href="#175"></A>), 
and the case constants are converted to</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 239812px"><NOBR>the promoted 
type. No two of these case constants associated with the same switch may have 
the same value</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 239831px"><NOBR>after 
conversion. There may also be at most one <FONT face=Courier>default 
</FONT>label associated with a switch. Switches may be</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 239851px"><NOBR>nested; a 
<FONT face=Courier>case </FONT>or <FONT face=Courier>default </FONT>label is 
associated with the smallest switch that contains it.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 239891px"><NOBR>When the <FONT 
face=Courier>switch </FONT>statement is executed, its expression is evaluated, 
including all side effects, and compared</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 239911px"><NOBR>with each case 
constant. If one of the case constants is equal to the value of the expression, 
control passes to</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 239930px"><NOBR>the statement 
of the matched <FONT face=Courier>case </FONT>label. If no case constant matches 
the expression, and if there is a</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 239951px"><NOBR>default <FONT 
face=Times>label, control passes to the labeled statement. If no case matches, 
and if there is no </FONT>default<FONT face=Times>, 
then</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 239970px"><NOBR>none of the 
substatements of the swtich is executed.</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 240009px"><NOBR>In the first 
edition of this book, the controlling expression of <FONT 
face=Courier>switch</FONT>, and the case constants, were required to have <FONT 
face=Courier>int</FONT></NOBR></DIV>
<DIV 
style="LEFT: 162px; POSITION: absolute; TOP: 240025px"><NOBR>type.</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 239005px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 240085px"><NOBR>A.9.4 
Selection Statements</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 240085px"><NOBR>202</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 240151px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=203><B>Page 203</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 240244px"><NOBR><B>A.9.5 
Iteration Statements</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 240287px"><NOBR>Iteration 
statements specify looping.</NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 240326px"><NOBR><I>iteration−statement</I>:</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 240347px"><NOBR>while <FONT 
face=Times>(</FONT><I><FONT face=Times>expression</FONT></I><FONT face=Times>) 
</FONT><I><FONT face=Times>statement</FONT></I></NOBR></DIV>
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 240367px"><NOBR>do <I><FONT 
face=Times>statement </FONT></I>while <FONT face=Times>(</FONT><I><FONT 
face=Times>expression</FONT></I><FONT face=Times>)</FONT>;</NOBR></DIV>
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 240387px"><NOBR>for <FONT 
face=Times>(</FONT><I><FONT 
face=Times>expression</FONT></I></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 277px; POSITION: absolute; TOP: 240392px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 292px; POSITION: absolute; TOP: 240387px"><NOBR>; <I><FONT 
face=Times>expression</FONT></I></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 377px; POSITION: absolute; TOP: 240392px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 391px; POSITION: absolute; TOP: 240387px"><NOBR>; <I><FONT 
face=Times>expression</FONT></I></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 476px; POSITION: absolute; TOP: 240392px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 490px; POSITION: absolute; TOP: 240386px"><NOBR>) 
<I>statement</I></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 240425px"><NOBR>In the <FONT 
face=Courier>while </FONT>and <FONT face=Courier>do </FONT>statements, the 
substatement is executed repeatedly so long as the value of the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 240445px"><NOBR>expression 
remains unequal to 0; the expression must have arithmetic or pointer type. With 
<FONT face=Courier>while</FONT>, the test,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 240465px"><NOBR>including all 
side effects from the expression, occurs before each execution of the statement; 
with <FONT face=Courier>do</FONT>, the test</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 240485px"><NOBR>follows each 
iteration.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 240524px"><NOBR>In the <FONT 
face=Courier>for </FONT>statement, the first expression is evaluated once, and 
thus specifies initialization for the loop.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 240544px"><NOBR>There is no 
restriction on its type. The second expression must have arithmetic or pointer 
type; it is evaluated</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 240564px"><NOBR>before each 
iteration, and if it becomes equal to 0, the <FONT face=Courier>for </FONT>is 
terminated. The third expression is evaluated</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 240584px"><NOBR>after each 
iteration, and thus specifies a re−initialization for the loop. There is no 
restriction on its type.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 240604px"><NOBR>Side−effects 
from each expression are completed immediately after its evaluation. If the 
substatement does</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 240623px"><NOBR>not contain 
<FONT face=Courier>continue</FONT>, a statement</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 148px; POSITION: absolute; TOP: 240664px"><NOBR>for <FONT 
face=Times>(</FONT><I><FONT face=Times>expression1</FONT></I>; <I><FONT 
face=Times>expression2</FONT></I>; <I><FONT 
face=Times>expression3</FONT></I><FONT face=Times>) </FONT><I><FONT 
face=Times>statement</FONT></I></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 240703px"><NOBR>is equivalent 
to</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 240742px"><NOBR><I>expression1</I>;</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 240759px"><NOBR>while 
(<I>expression2</I>) {</NOBR></DIV>
<DIV 
style="LEFT: 141px; POSITION: absolute; TOP: 240775px"><NOBR><I>statement</I></NOBR></DIV>
<DIV 
style="LEFT: 141px; POSITION: absolute; TOP: 240792px"><NOBR><I>expression3</I>;</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 240808px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 240844px"><NOBR>Any of the 
three expressions may be dropped. A missing second expression makes the implied 
test equivalent</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 240864px"><NOBR>to testing a 
non−zero element.</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 240904px"><NOBR><B>A.9.6 Jump 
statements</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 240947px"><NOBR>Jump 
statements transfer control unconditionally.</NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 240987px"><NOBR><I>jump−statement</I>:</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 241008px"><NOBR>goto <I><FONT 
face=Times>identifier</FONT></I>;</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 241028px"><NOBR>continue;</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 241047px"><NOBR>break;</NOBR></DIV>
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 241067px"><NOBR>return 
<I><FONT face=Times>expression</FONT></I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 301px; POSITION: absolute; TOP: 241072px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 316px; POSITION: absolute; TOP: 241067px"><NOBR>;</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 241106px"><NOBR>In the <FONT 
face=Courier>goto </FONT>statement, the identifier must be a label (<A 
href="#201"></A><FONT 
face=Times color=#0000ff><A 
href="#201">Par.A.9.1</A></FONT>) 
located in the current function. Control</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 241126px"><NOBR>transfers to 
the labeled statement.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 241165px"><NOBR>A <FONT 
face=Courier>continue </FONT>statement may appear only within an iteration 
statement. It causes control to pass to the</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 241185px"><NOBR>loop−continuation 
portion of the smallest enclosing such statement. More precisely, within each of 
the</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 241205px"><NOBR>statements</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 240193px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 241273px"><NOBR>A.9.5 
Iteration Statements</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 241273px"><NOBR>203</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 241339px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=204><B>Page 204</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 241431px"><NOBR>while (...) { 
do { for (...) {</NOBR></DIV>
<DIV style="LEFT: 149px; POSITION: absolute; TOP: 241448px"><NOBR>... ... 
...</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 241464px"><NOBR>contin: ; 
contin: ; contin: ;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 241481px"><NOBR>} } while 
(...); }</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 241517px"><NOBR>a <FONT 
face=Courier>continue </FONT>not contained in a smaller iteration statement is 
the same as <FONT face=Courier>goto contin</FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 241557px"><NOBR>A <FONT 
face=Courier>break </FONT>statement may appear only in an iteration statement or 
a <FONT face=Courier>switch </FONT>statement, and terminates</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 241576px"><NOBR>execution of 
the smallest enclosing such statement; control passes to the statement following 
the terminated</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 241596px"><NOBR>statement.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 241636px"><NOBR>A function 
returns to its caller by the <FONT face=Courier>return </FONT>statement. When 
<FONT face=Courier>return </FONT>is followed by an expression, the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 241656px"><NOBR>value is 
returned to the caller of the function. The expression is converted, as by 
assignment, to the type</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 241675px"><NOBR>returned by 
the function in which it appears.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 241715px"><NOBR>Flowing off 
the end of a function is equivalent to a return with no expression. In either 
case, the returned</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 241735px"><NOBR>value is 
undefined.</NOBR></DIV></SPAN></FONT><FONT face=Times size=4><SPAN 
style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 241776px"><NOBR><B>A.10 
External Declarations</B></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 241823px"><NOBR>The unit of 
input provided to the C compiler is called a translation unit; it consists of a 
sequence of external</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 241843px"><NOBR>declarations, 
which are either declarations or function definitions.</NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 241882px"><NOBR><I>translation−unit</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 241902px"><NOBR><I>external−declaration</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 241922px"><NOBR><I>translation−unit 
external−declaration</I></NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 241961px"><NOBR><I>external−declaration</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 241981px"><NOBR><I>function−definition</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 242001px"><NOBR><I>declaration</I></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 242041px"><NOBR>The scope of 
external declarations persists to the end of the translation unit in which they 
are declared, just as</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 242060px"><NOBR>the effect of 
declarations within the blocks persists to the end of the block. The syntax of 
external declarations</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 242080px"><NOBR>is the same as 
that of all declarations, except that only at this level may the code for 
functions be given.</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 242120px"><NOBR><B>A.10.1 
Function Definitions</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 242163px"><NOBR>Function 
definitions have the form</NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 242203px"><NOBR><I>function−definition</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 242223px"><NOBR><I>declaration−specifiers</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 318px; POSITION: absolute; TOP: 242229px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 337px; POSITION: absolute; TOP: 242223px"><NOBR><I>declarator 
declaration−list</I></NOBR></DIV></SPAN></FONT><FONT face=Times size=2><SPAN 
style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 518px; POSITION: absolute; TOP: 242229px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 537px; POSITION: absolute; TOP: 242223px"><NOBR><I>compound−statement</I></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 242262px"><NOBR>The only 
storage−class specifiers allowed among the declaration specifiers are <FONT 
face=Courier>extern </FONT>or <FONT face=Courier>static</FONT>; 
see</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 242282px"><NOBR><A 
href="#207">Par.A.11.2 
</A><FONT face=Times color=#000000>for the distinction between 
them.</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 242322px"><NOBR>A function may 
return an arithmetic type, a structure, a union, a pointer, or <FONT 
face=Courier>void</FONT>, but not a function or an</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 242342px"><NOBR>array. The 
declarator in a function declaration must specify explicitly that the declared 
identifier has function</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 242361px"><NOBR>type; that is, 
it must contain one of the forms (see <FONT face=Times color=#0000ff><A 
href="#196">Par.A.8.6.3</A></FONT>).</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 242401px"><NOBR><I>direct−declarator 
</I>( <I>parameter−type−list </I>)</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 242421px"><NOBR><I>direct−declarator 
</I>( <I>identifier−list</I></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 392px; POSITION: absolute; TOP: 242427px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 411px; POSITION: absolute; TOP: 242421px"><NOBR>)</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 241381px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 242461px"><NOBR>A.10 External 
Declarations</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 242461px"><NOBR>204</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 242527px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=205><B>Page 205</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 242619px"><NOBR>where the 
direct−declarator is an identifier or a parenthesized identifier. In particular, 
it must not achieve</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 242639px"><NOBR>function type 
by means of a <FONT face=Courier>typedef</FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 242679px"><NOBR>In the first 
form, the definition is a new−style function, and its parameters, together with 
their types, are</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 242698px"><NOBR>declared in 
its parameter type list; the declaration−list following the function's 
declarator must be absent.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 242718px"><NOBR>Unless the 
parameter type list consists solely of <FONT face=Courier>void</FONT>, showing 
that the function takes no parameters, each</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 242738px"><NOBR>declarator in 
the parameter type list must contain an identifier. If the parameter type list 
ends with ``<FONT face=Courier>, ...</FONT>''</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 242758px"><NOBR>then the 
function may be called with more arguments than parameters; the <FONT 
face=Courier>va_arg </FONT>macro mechanism</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 242778px"><NOBR>defined in the 
standard header <FONT face=Courier>&lt;stdarg.h&gt; </FONT>and described in <A 
href="#221"></A><FONT 
face=Times color=#0000ff><A 
href="#221">Appendix 
B </A></FONT>must be used to refer to the extra</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 242797px"><NOBR>arguments. 
Variadic functions must have at least one named parameter.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 242837px"><NOBR>In the second 
form, the definition is old−style: the identifier list names the parameters, 
while the declaration</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 242857px"><NOBR>list 
attributes types to them. If no declaration is given for a parameter, its type 
is taken to be <FONT face=Courier>int</FONT>. The</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 242877px"><NOBR>declaration 
list must declare only parameters named in the list, initialization is not 
permitted, and the only</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 242896px"><NOBR>storage−class 
specifier possible is <FONT face=Courier>register</FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 242936px"><NOBR>In both styles 
of function definition, the parameters are understood to be declared just after 
the beginning of</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 242956px"><NOBR>the compound 
statement constituting the function's body, and thus the same identifiers must 
not be redeclared</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 242976px"><NOBR>there 
(although they may, like other identifiers, be redeclared in inner blocks). If a 
parameter is declared to</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 242995px"><NOBR>have type 
``array of <I>type</I>,'' the declaration is adjusted to read ``pointer to 
<I>type</I>;'' similarly, if a parameter is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 243015px"><NOBR>declared to 
have type ``function returning <I>type</I>,'' the declaration is adjusted to 
read ``pointer to function</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 243035px"><NOBR>returning 
<I>type</I>.'' During the call to a function, the arguments are converted as 
necessary and assigned to the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 243055px"><NOBR>parameters; 
see <A 
href="#179"></A><FONT 
face=Times color=#0000ff><A 
href="#179">Par.A.7.3.2</A></FONT><A 
href="#179"></A>.</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 243094px"><NOBR>New−style 
function definitions are new with the ANSI standard. There is also a small 
change in the details of promotion;</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 243110px"><NOBR>the first 
edition specified that the declarations of <FONT face=Courier>float 
</FONT>parameters were adjusted to read <FONT face=Courier>double</FONT>. The 
difference</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 243127px"><NOBR>becomes 
noticable when a pointer to a parameter is generated within a 
function.</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 243164px"><NOBR>A complete 
<B><SPAN class=goohl2>example</SPAN></B> of a new−style function definition 
is</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 243203px"><NOBR>int max(int a, 
int b, int c)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 243220px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 243236px"><NOBR>int 
m;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 243269px"><NOBR>m = (a &gt; b) 
? a : b;</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 243286px"><NOBR>return (m &gt; 
c) ? m : c;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 243302px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 243339px"><NOBR>Here <FONT 
face=Courier>int </FONT>is the declaration specifier; <FONT face=Courier>max(int 
a, int b, int c) </FONT>is the function's declarator, and <FONT 
face=Courier>{</FONT></NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 243359px"><NOBR>... } <FONT 
face=Times>is the block giving the code for the function. The corresponding 
old−style definition would be</FONT></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 243398px"><NOBR>int max(a, b, 
c)</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 243414px"><NOBR>int a, b, 
c;</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 243431px"><NOBR>{</NOBR></DIV>
<DIV style="LEFT: 166px; POSITION: absolute; TOP: 243447px"><NOBR>/* ... 
*/</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 243464px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 243500px"><NOBR>where now 
<FONT face=Courier>int max(a, b, c) </FONT>is the declarator, and <FONT 
face=Courier>int a, b, c; </FONT>is the declaration list for the</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 243520px"><NOBR>parameters.</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 242569px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 243649px"><NOBR>A.10 External 
Declarations</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 243649px"><NOBR>205</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 243715px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=206><B>Page 206</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 243808px"><NOBR><B>A.10.2 
External Declarations</B></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 243851px"><NOBR>External 
declarations specify the characteristics of objects, functions and other 
identifiers. The term</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 243871px"><NOBR>``external'' 
refers to their location outside functions, and is not directly connected with 
the <FONT face=Courier>extern </FONT>keyword;</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 243890px"><NOBR>the storage 
class for an externally−declared object may be left empty, or it may be 
specified as <FONT face=Courier>extern </FONT>or</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 243911px"><NOBR>static<FONT 
face=Times>.</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 243950px"><NOBR>Several 
external declarations for the same identifier may exist within the same 
translation unit if they agree in</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 243970px"><NOBR>type and 
linkage, and if there is at most one definition for the identifier.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 244009px"><NOBR>Two 
declarations for an object or function are deemed to agree in type under the 
rule discussed in <FONT face=Times color=#0000ff><A 
href="#200">Par.A.8.10</A></FONT><A 
href="#200"></A>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 244029px"><NOBR>In addition, 
if the declarations differ because one type is an incomplete structure, union, 
or enumeration type</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 244049px"><NOBR>(<FONT 
face=Times color=#0000ff><A 
href="#190">Par.A.8.3</A></FONT>) 
and the other is the corresponding completed type with the same tag, the types 
are taken to agree.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 244069px"><NOBR>Moreover, if 
one type is an incomplete array type (<A 
href="#195"></A><FONT 
face=Times color=#0000ff><A 
href="#195">Par.A.8.6.2</A></FONT>) 
and the other is a completed array type, the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 244088px"><NOBR>types, if 
otherwise identical, are also taken to agree. Finally, if one type specifies an 
old−style function, and</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 244108px"><NOBR>the other an 
otherwise identical new−style function, with parameter declarations, the types 
are taken to agree.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 244148px"><NOBR>If the first 
external declarator for a function or object includes the <FONT 
face=Courier>static </FONT>specifier, the identifier has</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 244168px"><NOBR><I>internal 
linkage</I>; otherwise it has <I>external linkage</I>. Linkage is discussed in 
<FONT face=Times color=#0000ff><A 
href="#207">Par.11.2</A></FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 244207px"><NOBR>An external 
declaration for an object is a definition if it has an initializer. An external 
object declaration that</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 244227px"><NOBR>does not have 
an initializer, and does not contain the <FONT face=Courier>extern 
</FONT>specifier, is a <I>tentative definition</I>. If a definition</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 244247px"><NOBR>for an object 
appears in a translation unit, any tentative definitions are treated merely as 
redundant</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 244267px"><NOBR>declarations. 
If no definition for the object appears in the translation unit, all its 
tentative definitions become a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 244286px"><NOBR>single 
definition with initializer 0.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 244326px"><NOBR>Each object 
must have exactly one definition. For objects with internal linkage, this rule 
applies separately to</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 244346px"><NOBR>each 
translation unit, because internally−linked objects are unique to a translation 
unit. For objects with</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 244366px"><NOBR>external 
linkage, it applies to the entire program.</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 244404px"><NOBR>Although the 
one−definition rule is formulated somewhat differently in the first edition of 
this book, it is in effect identical</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 244421px"><NOBR>to the one 
stated here. Some implementations relax it by generalizing the notion of 
tentative definition. In the alternate</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 244437px"><NOBR>formulation, 
which is usual in UNIX systems and recognized as a common extension by the 
Standard, all the tentative</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 244454px"><NOBR>definitions 
for an externally linked object, throughout all the translation units of the 
program, are considered together</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 244470px"><NOBR>instead of in 
each translation unit separately. If a definition occurs somewhere in the 
program, then the tentative</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 244487px"><NOBR>definitions 
become merely declarations, but if no definition appears, then all its tentative 
definitions become a definition</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 244503px"><NOBR>with 
initializer 0.</NOBR></DIV></SPAN></FONT><FONT face=Times size=4><SPAN 
style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 244542px"><NOBR><B>A.11 Scope 
and Linkage</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 244589px"><NOBR>A program need 
not all be compiled at one time: the source text may be kept in several files 
containing</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 244609px"><NOBR>translation 
units, and precompiled routines may be loaded from libraries. Communication 
among the functions</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 244628px"><NOBR>of a program 
may be carried out both through calls and through manipulation of external 
data.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 244668px"><NOBR>Therefore, 
there are two kinds of scope to consider: first, the <I>lexical scope </I>of an 
identifier which is the region</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 244688px"><NOBR>of the program 
text within which the identifier's characteristics are understood; and second, 
the scope</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 244708px"><NOBR>associated 
with objects and functions with external linkage, which determines the 
connections between</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 244727px"><NOBR>identifiers in 
separately compiled translation units.</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 243757px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 244837px"><NOBR>A.10.2 
External Declarations</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 244837px"><NOBR>206</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 244903px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=207><B>Page 207</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 244996px"><NOBR><B>A.11.1 
Lexical Scope</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 245039px"><NOBR>Identifiers 
fall into several name spaces that do not interfere with one another; the same 
identifier may be used</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 245059px"><NOBR>for different 
purposes, even in the same scope, if the uses are in different name spaces. 
These classes are:</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 245078px"><NOBR>objects, 
functions, typedef names, and <FONT face=Courier>enum </FONT>constants; labels; 
tags of structures or unions, and enumerations;</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 245098px"><NOBR>and members of 
each structure or union individually.</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 245137px"><NOBR>These rules 
differ in several ways from those described in the first edition of this manual. 
Labels did not previously have</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 245153px"><NOBR>their own name 
space; tags of structures and unions each had a separate space, and in some 
implementations enumerations</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 245170px"><NOBR>tags did as 
well; putting different kinds of tags into the same space is a new restriction. 
The most important departure from</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 245186px"><NOBR>the first 
edition is that each structure or union creates a separate name space for its 
members, so that the same name may</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 245203px"><NOBR>appear in 
several different structures. This rule has been common practice for several 
years.</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 245240px"><NOBR>The lexical 
scope of an object or function identifier in an external declaration begins at 
the end of its</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 245260px"><NOBR>declarator and 
persists to the end of the translation unit in which it appears. The scope of a 
parameter of a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 245280px"><NOBR>function 
definition begins at the start of the block defining the function, and persists 
through the function; the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 245299px"><NOBR>scope of a 
parameter in a function declaration ends at the end of the declarator. The scope 
of an identifier</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 245319px"><NOBR>declared at 
the head of a block begins at the end of its declarator, and persists to the end 
of the block. The</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 245339px"><NOBR>scope of a 
label is the whole of the function in which it appears. The scope of a 
structure, union, or</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 245359px"><NOBR>enumeration 
tag, or an enumeration constant, begins at its appearance in a type specifier, 
and persists to the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 245379px"><NOBR>end of a 
translation unit (for declarations at the external level) or to the end of the 
block (for declarations</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 245398px"><NOBR>within a 
function).</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 245438px"><NOBR>If an 
identifier is explicitly declared at the head of a block, including the block 
constituting a function, any</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 245458px"><NOBR>declaration of 
the identifier outside the block is suspended until the end of the 
block.</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 245498px"><NOBR><B>A.11.2 
Linkage</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 245541px"><NOBR>Within a 
translation unit, all declarations of the same object or function identifier 
with internal linkage refer to</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 245561px"><NOBR>the same 
thing, and the object or function is unique to that translation unit. All 
declarations for the same</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 245581px"><NOBR>object or 
function identifier with external linkage refer to the same thing, and the 
object or function is shared</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 245600px"><NOBR>by the entire 
program.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 245640px"><NOBR>As discussed 
in <FONT face=Times color=#0000ff><A 
href="#206">Par.A.10.2</A></FONT><A 
href="#206"></A>, 
the first external declaration for an identifier gives the identifier internal 
linkage if</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 245660px"><NOBR>the <FONT 
face=Courier>static </FONT>specifier is used, external linkage otherwise. If a 
declaration for an identifier within a block does</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 245680px"><NOBR>not include 
the <FONT face=Courier>extern </FONT>specifier, then the identifier has no 
linkage and is unique to the function. If it does</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 245699px"><NOBR>include <FONT 
face=Courier>extern</FONT>, and an external declaration for is active in the 
scope surrounding the block, then the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 245719px"><NOBR>identifier has 
the same linkage as the external declaration, and refers to the same object or 
function; but if no</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 245739px"><NOBR>external 
declaration is visible, its linkage is external.</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=4><SPAN style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 245780px"><NOBR><B>A.12 
Preprocessing</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 245827px"><NOBR>A preprocessor 
performs macro substitution, conditional compilation, and inclusion of named 
files. Lines</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 245847px"><NOBR>beginning with 
<FONT face=Courier>#</FONT>, perhaps preceded by white space, communicate with 
this preprocessor. The syntax of these</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 245867px"><NOBR>lines is 
independent of the rest of the language; they may appear anywhere and have 
effect that lasts</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 245886px"><NOBR>(independent 
of scope) until the end of the translation unit. Line boundaries are 
significant; each line is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 245906px"><NOBR>analyzed 
individually (bus see <A 
href="#208"></A><FONT 
face=Times color=#0000ff><A 
href="#208">Par.A.12.2 
</A></FONT>for how to adjoin lines). To the preprocessor, a token is 
any</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 245926px"><NOBR>language 
token, or a character sequence giving a file name as in the <FONT 
face=Courier>#include </FONT>directive (<FONT face=Times color=#0000ff><A 
href="#210">Par.A.12.4</A></FONT><A 
href="#210"></A>); 
in</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 245946px"><NOBR>addition, any 
character not otherwise defined is taken as a token. However, the effect of 
white spaces other</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 245966px"><NOBR>than space and 
horizontal tab is undefined within preprocessor lines.</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 244945px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 246025px"><NOBR>A.11.1 Lexical 
Scope</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 246025px"><NOBR>207</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 246091px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=208><B>Page 208</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 246183px"><NOBR>Preprocessing 
itself takes place in several logically successive phases that may, in a 
particular</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 246203px"><NOBR>implementation, be 
condensed.</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 246243px"><NOBR>First, 
trigraph sequences as described in <FONT face=Times color=#0000ff><A 
href="#208">Par.A.12.1 
</A></FONT>are replaced by their equivalents. Should the</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 246262px"><NOBR>operating 
system environment require it, newline characters are introduced between the 
lines of the</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 246282px"><NOBR>source 
file.</NOBR></DIV>
<DIV style="LEFT: 146px; POSITION: absolute; TOP: 246243px"><NOBR>1. 
</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 246302px"><NOBR>Each 
occurrence of a backslash character <FONT face=Courier>\ </FONT>followed by a 
newline is deleted, this splicing lines</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 246322px"><NOBR>(<FONT 
face=Times color=#0000ff><A 
href="#208">Par.A.12.2</A></FONT><A 
href="#208"></A>).</NOBR></DIV>
<DIV style="LEFT: 146px; POSITION: absolute; TOP: 246302px"><NOBR>2. 
</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 246342px"><NOBR>The program is 
split into tokens separated by white−space characters; comments are replaced by 
a</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 246361px"><NOBR>single space. 
Then preprocessing directives are obeyed, and macros (Pars.<A 
href="#208"></A><FONT 
face=Times color=#0000ff><A 
href="#208">A.12.3</A></FONT>−<FONT 
face=Times color=#0000ff><A 
href="#213">A.12.10</A></FONT><A 
href="#213"></A>) 
are</NOBR></DIV>
<DIV 
style="LEFT: 162px; POSITION: absolute; TOP: 246381px"><NOBR>expanded.</NOBR></DIV>
<DIV style="LEFT: 146px; POSITION: absolute; TOP: 246342px"><NOBR>3. 
</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 246401px"><NOBR>Escape 
sequences in character constants and string literals (Pars. <FONT face=Times 
color=#0000ff><A 
href="#172">A.2.5.2</A></FONT><A 
href="#172"></A>, 
<FONT face=Times color=#0000ff><A 
href="#173">A.2.6</A></FONT><A 
href="#173"></A>) 
are replaced by their</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 246421px"><NOBR>equivalents; 
then adjacent string literals are concatenated.</NOBR></DIV>
<DIV style="LEFT: 146px; POSITION: absolute; TOP: 246401px"><NOBR>4. 
</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 246441px"><NOBR>The result is 
translated, then linked together with other programs and libraries, by 
collecting the</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 246460px"><NOBR>necessary 
programs and data, and connecting external functions and object references to 
their</NOBR></DIV>
<DIV 
style="LEFT: 162px; POSITION: absolute; TOP: 246480px"><NOBR>definitions.</NOBR></DIV>
<DIV style="LEFT: 146px; POSITION: absolute; TOP: 246441px"><NOBR>5. 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 246520px"><NOBR><B>A.12.1 
Trigraph Sequences</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 246563px"><NOBR>The character 
set of C source programs is contained within seven−bit ASCII, but is a superset 
of the ISO</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 246583px"><NOBR>646−1983 
Invariant Code Set. In order to enable programs to be represented in the reduced 
set, all</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 246603px"><NOBR>occurrences of 
the following trigraph sequences are replaced by the corresponding single 
character. This</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 246623px"><NOBR>replacement 
occurs before any other processing.</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 183px; POSITION: absolute; TOP: 246662px"><NOBR>??= # ??( [ 
??&lt; {</NOBR></DIV>
<DIV style="LEFT: 183px; POSITION: absolute; TOP: 246679px"><NOBR>??/ \ ??) ] 
??&gt; }</NOBR></DIV>
<DIV style="LEFT: 183px; POSITION: absolute; TOP: 246695px"><NOBR>??' ^ ??! | 
??− </NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 246732px"><NOBR>No other such 
replacements occur.</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 246770px"><NOBR>Trigraph 
sequences are new with the ANSI standard.</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 246808px"><NOBR><B>A.12.2 Line 
Splicing</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 246851px"><NOBR>Lines that end 
with the backslash character <FONT face=Courier>\ </FONT>are folded by deleting 
the backslash and the following newline</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 246871px"><NOBR>character. 
This occurs before division into tokens.</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 246911px"><NOBR><B>A.12.3 
Macro Definition and Expansion</B></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 246954px"><NOBR>A control line 
of the form</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 148px; POSITION: absolute; TOP: 246995px"><NOBR># define 
<I><FONT face=Times>identifier 
token−sequence</FONT></I></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 247033px"><NOBR>causes the 
preprocessor to replace subsequent instances of the identifier with the given 
sequence of tokens;</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 247053px"><NOBR>leading and 
trailing white space around the token sequence is discarded. A second <FONT 
face=Courier>#define </FONT>for the same</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 247073px"><NOBR>identifier is 
erroneous unless the second token sequence is identical to the first, where all 
white space</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 247093px"><NOBR>separations 
are taken to be equivalent.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 247132px"><NOBR>A line of the 
form</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 148px; POSITION: absolute; TOP: 247173px"><NOBR># define 
<I><FONT face=Times>identifier </FONT></I><FONT face=Times>(</FONT><I><FONT 
face=Times>identifier−list</FONT></I><FONT face=Times>) </FONT><I><FONT 
face=Times>token−sequence</FONT></I></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 246133px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 247213px"><NOBR>A.12.1 
Trigraph Sequences</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 247213px"><NOBR>208</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 247279px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=209><B>Page 209</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 247371px"><NOBR>where there is 
no space between the first identifier and the (, is a macro definition with 
parameters given by</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 247391px"><NOBR>the identifier 
list. As with the first form, leading and trailing white space arround the token 
sequence is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 247411px"><NOBR>discarded, and 
the macro may be redefined only with a definition in which the number and 
spelling of</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 247431px"><NOBR>parameters, 
and the token sequence, is identical.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 247470px"><NOBR>A control line 
of the form</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 148px; POSITION: absolute; TOP: 247511px"><NOBR># undef 
<I><FONT face=Times>identifier</FONT></I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 247549px"><NOBR>causes the 
identifier's preprocessor definition to be forgotten. It is not erroneous to 
apply <FONT face=Courier>#undef </FONT>to an</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 247569px"><NOBR>unknown 
identifier.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 247609px"><NOBR>When a macro 
has been defined in the second form, subsequent textual instances of the macro 
identifier</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 247629px"><NOBR>followed by 
optional white space, and then by (, a sequence of tokens separated by commas, 
and a ) constitute</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 247648px"><NOBR>a call of the 
macro. The arguments of the call are the comma−separated token sequences; commas 
that are</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 247668px"><NOBR>quoted or 
protected by nested parentheses do not separate arguments. During collection, 
arguments are not</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 247688px"><NOBR>macro−expanded. The 
number of arguments in the call must match the number of parameters in the 
definition.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 247708px"><NOBR>After the 
arguments are isolated, leading and trailing white space is removed from them. 
Then the token</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 247728px"><NOBR>sequence 
resulting from each argument is substituted for each unquoted occurrence of the 
corresponding</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 247747px"><NOBR>parameter's 
identifier in the replacement token sequence of the macro. Unless the parameter 
in the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 247767px"><NOBR>replacement 
sequence is preceded by <FONT face=Courier>#</FONT>, or preceded or followed by 
<FONT face=Courier>##</FONT>, the argument tokens are examined for</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 247787px"><NOBR>macro calls, 
and expanded as necessary, just before insertion.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 247827px"><NOBR>Two special 
operators influence the replacement process. First, if an occurrence of a 
parameter in the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 247846px"><NOBR>replacement 
token sequence is immediately preceded by <FONT face=Courier>#</FONT>, string 
quotes (<FONT face=Courier>"</FONT>) are placed around the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 247866px"><NOBR>corresponding 
parameter, and then both the <FONT face=Courier># </FONT>and the parameter 
identifier are replaced by the quoted</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 247886px"><NOBR>argument. A 
<FONT face=Courier>\ </FONT>character is inserted before each <FONT 
face=Courier>" </FONT>or <FONT face=Courier>\ </FONT>character that appears 
surrounding, or inside, a string</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 247906px"><NOBR>literal or 
character constant in the argument.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 247945px"><NOBR>Second, if the 
definition token sequence for either kind of macro contains a <FONT 
face=Courier>## </FONT>operator, then just after</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 247965px"><NOBR>replacement of 
the parameters, each <FONT face=Courier>## </FONT>is deleted, together with any 
white space on either side, so as to</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 247985px"><NOBR>concatenate 
the adjacent tokens and form a new token. The effect is undefined if invalid 
tokens are produced,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 248005px"><NOBR>or if the 
result depends on the order of processing of the <FONT face=Courier>## 
</FONT>operators. Also, <FONT face=Courier>## </FONT>may not appear at 
the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 248025px"><NOBR>beginning or 
end of a replacement token sequence.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 248064px"><NOBR>In both kinds 
of macro, the replacement token sequence is repeatedly rescanned for more 
defined identifiers.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 248084px"><NOBR>However, once 
a given identifier has been replaced in a given expansion, it is not replaced if 
it turns up again</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 248104px"><NOBR>during 
rescanning; instead it is left unchanged.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 248143px"><NOBR>Even if the 
final value of a macro expansion begins with with <FONT face=Courier>#</FONT>, 
it is not taken to be a preprocessing directive.</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 248182px"><NOBR>The details of 
the macro−expansion process are described more precisely in the ANSI standard 
than in the first edition.</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 248199px"><NOBR>The most 
important change is the addition of the <FONT face=Courier># </FONT>and <FONT 
face=Courier>## </FONT>operators, which make quotation and concatenation 
admissible.</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 248215px"><NOBR>Some of the 
new rules, especially those involving concatenation, are bizarre. (See <B><SPAN 
class=goohl2>example</SPAN></B> below.)</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 248252px"><NOBR>For <B><SPAN 
class=goohl2>example</SPAN></B>, this facility may be used for 
``manifest−constants,'' as in</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 248292px"><NOBR>#define 
TABSIZE 100</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 248308px"><NOBR>int 
table[TABSIZE];</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 248345px"><NOBR>The 
definition</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 247321px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 248401px"><NOBR>A.12.1 
Trigraph Sequences</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 248401px"><NOBR>209</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 248467px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=210><B>Page 210</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 248559px"><NOBR>#define 
ABSDIFF(a, b) ((a)&gt;(b) ? (a)−(b) : (b)−(a))</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 248596px"><NOBR>defines a 
macro to return the absolute value of the difference between its arguments. 
Unlike a function to do</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 248615px"><NOBR>the same 
thing, the arguments and returned value may have any arithmetic type or even be 
pointers. Also, the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 248635px"><NOBR>arguments, 
which might have side effects, are evaluated twice, once for the test and once 
to produce the value.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 248675px"><NOBR>Given the 
definition</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 248714px"><NOBR>#define 
tempfile(dir) #dir "%s"</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 248751px"><NOBR>the macro call 
<FONT face=Courier>tempfile(/usr/tmp) 
</FONT>yields</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 248790px"><NOBR>"/usr/tmp" 
"%s"</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 248827px"><NOBR>which will 
subsequently be catenated into a single string. 
After</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 248866px"><NOBR>#define cat(x, 
y) x ## y</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 248902px"><NOBR>the call <FONT 
face=Courier>cat(var, 123) </FONT>yields <FONT face=Courier>var123</FONT>. 
However, the call <FONT face=Courier>cat(cat(1,2),3) </FONT>is undefined: 
the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 248922px"><NOBR>presence of 
<FONT face=Courier>## </FONT>prevents the arguments of the outer call from being 
expanded. Thus it produces the token</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 248942px"><NOBR>string</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 248981px"><NOBR>cat ( 1 , 2 
)3</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 249018px"><NOBR>and <FONT 
face=Courier>)3 </FONT>(the catenation of the last token of the first argument 
with the first token of the second) is not a legal</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 249038px"><NOBR>token. If a 
second level of macro definition is introduced,</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 249077px"><NOBR>#define 
xcat(x, y) cat(x,y)</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 249114px"><NOBR>things work 
more smoothly; <FONT face=Courier>xcat(xcat(1, 2), 3) </FONT>does produce <FONT 
face=Courier>123</FONT>, because the expansion of <FONT 
face=Courier>xcat</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 249133px"><NOBR>itself does 
not involve the <FONT face=Courier>## </FONT>operator.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 249173px"><NOBR>Likewise, 
<FONT face=Courier>ABSDIFF(ABSDIFF(a,b),c) </FONT>produces the expected, 
fully−expanded result.</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 249213px"><NOBR><B>A.12.4 File 
Inclusion</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 249256px"><NOBR>A control line 
of the form</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 128px; POSITION: absolute; TOP: 249297px"><NOBR># include 
&lt;<I><FONT face=Times>filename</FONT></I>&gt;</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 249335px"><NOBR>causes the 
replacement of that line by the entire contents of the file <I>filename</I>. The 
characters in the name</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 249355px"><NOBR><I>filename 
</I>must not include <FONT face=Courier>&gt; </FONT>or newline, and the effect 
is undefined if it contains any of <FONT face=Courier>"</FONT>, <FONT 
face=Courier>'</FONT>, <FONT face=Courier>\</FONT>, or <FONT 
face=Courier>/*</FONT>. The</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 249375px"><NOBR>named file is 
searched for in a sequence of implementation−defined places.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 249415px"><NOBR>Similarly, a 
control line of the form</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 128px; POSITION: absolute; TOP: 249455px"><NOBR># include 
"<I><FONT face=Times>filename</FONT></I>"</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 249494px"><NOBR>searches first 
in association with the original source file (a deliberately 
implementation−dependent phrase),</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 249514px"><NOBR>and if that 
search fails, then as in the first form. The effect of using <FONT 
face=Courier>'</FONT>, <FONT face=Courier>\</FONT>, or <FONT face=Courier>/* 
</FONT>in the filename remains</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 249533px"><NOBR>undefined, but 
<FONT face=Courier>&gt; </FONT>is permitted.</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 248509px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 249589px"><NOBR>A.12.4 File 
Inclusion</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 249589px"><NOBR>210</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 249655px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=211><B>Page 211</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 249747px"><NOBR>Finally, a 
directive of the form</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 128px; POSITION: absolute; TOP: 249788px"><NOBR># include 
<I><FONT face=Times>token−sequence</FONT></I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 249826px"><NOBR>not matching 
one of the previous forms is interpreted by expanding the token sequence as for 
normal text; one</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 249846px"><NOBR>of the two 
forms with <FONT face=Courier>&lt;...&gt; </FONT>or <FONT face=Courier>"..." 
</FONT>must result, and is then treated as previously 
described.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 249887px"><NOBR>#include <FONT 
face=Times>files may be nested.</FONT></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 249926px"><NOBR><B>A.12.5 
Conditional Compilation</B></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 249969px"><NOBR>Parts of a 
program may be compiled conditionally, according to the following schematic 
syntax.</NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 250009px"><NOBR><I>preprocessor−conditional</I>:</NOBR></DIV>
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 250028px"><NOBR><I>if−line 
text elif−parts else−part</I></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 379px; POSITION: absolute; TOP: 250034px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 398px; POSITION: absolute; TOP: 250029px"><NOBR>#endif</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 250068px"><NOBR><I>if−line</I>:</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 250089px"><NOBR># if <I><FONT 
face=Times>constant−expression</FONT></I></NOBR></DIV>
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 250108px"><NOBR># ifdef 
<I><FONT face=Times>identifier</FONT></I></NOBR></DIV>
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 250128px"><NOBR># ifndef 
<I><FONT face=Times>identifier</FONT></I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 250167px"><NOBR><I>elif−parts</I>:</NOBR></DIV>
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 250187px"><NOBR><I>elif−line 
text</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 250207px"><NOBR><I>elif−parts</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 234px; POSITION: absolute; TOP: 250213px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 250246px"><NOBR><I>elif−line</I>:</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 250267px"><NOBR># elif 
<I><FONT 
face=Times>constant−expression</FONT></I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 250306px"><NOBR><I>else−part</I>:</NOBR></DIV>
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 250325px"><NOBR><I>else−line 
text</I></NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 250365px"><NOBR><I>else−line</I>:</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 250386px"><NOBR>#else</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 250424px"><NOBR>Each of the 
directives (if−line, elif−line, else−line, and <FONT face=Courier>#endif</FONT>) 
appears alone on a line. The constant</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 250444px"><NOBR>expressions in 
<FONT face=Courier>#if </FONT>and subsequent <FONT face=Courier>#elif 
</FONT>lines are evaluated in order until an expression with a 
non−zero</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 250464px"><NOBR>value is 
found; text following a line with a zero value is discarded. The text following 
the successful directive</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 250484px"><NOBR>line is 
treated normally. ``Text'' here refers to any material, including preprocessor 
lines, that is not part of the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 250504px"><NOBR>conditional 
structure; it may be empty. Once a successful <FONT face=Courier>#if </FONT>or 
<FONT face=Courier>#elif </FONT>line has been found and its text</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 250523px"><NOBR>processed, 
succeeding <FONT face=Courier>#elif </FONT>and <FONT face=Courier>#else 
</FONT>lines, together with their text, are discarded. If all the 
expressions</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 250543px"><NOBR>are zero, and 
there is an <FONT face=Courier>#else</FONT>, the text following the <FONT 
face=Courier>#else </FONT>is treated normally. Text controlled by 
inactive</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 250563px"><NOBR>arms of the 
conditional is ignored except for checking the nesting of 
conditionals.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 250603px"><NOBR>The constant 
expression in <FONT face=Courier>#if </FONT>and <FONT face=Courier>#elif 
</FONT>is subject to ordinary macro replacement. Moreover, any</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 250622px"><NOBR>expressions of 
the form</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 148px; POSITION: absolute; TOP: 250663px"><NOBR>defined 
<I><FONT face=Times>identifier</FONT></I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 250702px"><NOBR>or</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 148px; POSITION: absolute; TOP: 250742px"><NOBR>defined <FONT 
face=Times>(</FONT><I><FONT face=Times>identifier</FONT></I><FONT 
face=Times>)</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 249697px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 250777px"><NOBR>A.12.5 
Conditional Compilation</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 250777px"><NOBR>211</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 250843px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=212><B>Page 212</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 250935px"><NOBR>are replaced, 
before scanning for macros, by <FONT face=Courier>1L </FONT>if the identifier is 
defined in the preprocessor, and by <FONT face=Courier>0L </FONT>if</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 250955px"><NOBR>not. Any 
identifiers remaining after macro expansion are replaced by <FONT 
face=Courier>0L</FONT>. Finally, each integer constant is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 250975px"><NOBR>considered to 
be suffixed with <FONT face=Courier>L</FONT>, so that all arithmetic is taken to 
be long or unsigned long.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 251014px"><NOBR>The resulting 
constant expression (<FONT face=Times color=#0000ff><A 
href="#187">Par.A.7.19</A></FONT><A 
href="#187"></A>) 
is restricted: it must be integral, and may not contain <FONT 
face=Courier>sizeof</FONT>,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 251034px"><NOBR>a cast, or an 
enumeration constant.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 251074px"><NOBR>The control 
lines</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 148px; POSITION: absolute; TOP: 251114px"><NOBR>#ifdef 
<I><FONT face=Times>identifier</FONT></I></NOBR></DIV>
<DIV style="LEFT: 148px; POSITION: absolute; TOP: 251134px"><NOBR>#ifndef 
<I><FONT face=Times>identifier</FONT></I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 251173px"><NOBR>are equivalent 
to</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 148px; POSITION: absolute; TOP: 251213px"><NOBR># if defined 
<I><FONT face=Times>identifier</FONT></I></NOBR></DIV>
<DIV style="LEFT: 148px; POSITION: absolute; TOP: 251233px"><NOBR># if ! defined 
<I><FONT face=Times>identifier</FONT></I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 251272px"><NOBR>respectively.</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 251311px"><NOBR>#elif <FONT 
face=Times>is new since the first edition, although it has been available is 
some preprocessors. The </FONT>defined <FONT 
face=Times>preprocessor</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 251327px"><NOBR>operator is 
also new.</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 251365px"><NOBR><B>A.12.6 Line 
Control</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 251408px"><NOBR>For the 
benefit of other preprocessors that generate C programs, a line in one of the 
forms</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 148px; POSITION: absolute; TOP: 251448px"><NOBR># line 
<I><FONT face=Times>constant </FONT></I>"<I><FONT 
face=Times>filename</FONT></I>"</NOBR></DIV>
<DIV style="LEFT: 148px; POSITION: absolute; TOP: 251468px"><NOBR># line 
<I><FONT face=Times>constant</FONT></I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 251507px"><NOBR>causes the 
compiler to believe, for purposes of error diagnostics, that the line number of 
the next source line is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 251527px"><NOBR>given by the 
decimal integer constant and the current input file is named by the identifier. 
If the quoted</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 251546px"><NOBR>filename is 
absent, the remembered name does not change. Macros in the line are expanded 
before it is</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 251566px"><NOBR>interpreted.</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 251606px"><NOBR><B>A.12.7 
Error Generation</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 251649px"><NOBR>A preprocessor 
line of the form</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 148px; POSITION: absolute; TOP: 251690px"><NOBR># error 
<I><FONT face=Times>token−sequence</FONT></I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 328px; POSITION: absolute; TOP: 251695px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 251729px"><NOBR>causes the 
preprocessor to write a diagnostic message that includes the token 
sequence.</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 251769px"><NOBR><B>A.12.8 
Pragmas</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 251812px"><NOBR>A control line 
of the form</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 148px; POSITION: absolute; TOP: 251852px"><NOBR># pragma 
<I><FONT face=Times>token−sequence</FONT></I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 338px; POSITION: absolute; TOP: 251857px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 251891px"><NOBR>causes the 
preprocessor to perform an implementation−dependent action. An unrecognized 
pragma is ignored.</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 250885px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 251965px"><NOBR>A.12.6 Line 
Control</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 251965px"><NOBR>212</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 252031px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=213><B>Page 213</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 252124px"><NOBR><B>A.12.9 Null 
directive</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 252167px"><NOBR>A control line 
of the form</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 252207px"><NOBR>#</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 252246px"><NOBR>has no 
effect.</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 252286px"><NOBR><B>A.12.10 
Predefined names</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 252329px"><NOBR>Several 
identifiers are predefined, and expand to produce special information. They, and 
also the preprocessor</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 252349px"><NOBR>expansion 
operator <FONT face=Courier>defined</FONT>, may not be undefined or 
redefined.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 110px; POSITION: absolute; TOP: 252392px"><NOBR>__FILE__ <FONT 
face=Times>A string literal containing the name of the file being 
compiled.</FONT></NOBR></DIV>
<DIV 
style="LEFT: 110px; POSITION: absolute; TOP: 252428px"><NOBR>__DATE__</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 195px; POSITION: absolute; TOP: 252417px"><NOBR>A string 
literal containing the date of compilation, in the 
form</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 195px; POSITION: absolute; TOP: 252438px"><NOBR>"Mmmm dd 
yyyy"</NOBR></DIV>
<DIV 
style="LEFT: 110px; POSITION: absolute; TOP: 252474px"><NOBR>__TIME__</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 195px; POSITION: absolute; TOP: 252463px"><NOBR>A string 
literal containing the time of compilation, in the 
form</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 195px; POSITION: absolute; TOP: 252484px"><NOBR>"hh:mm:ss"</NOBR></DIV>
<DIV 
style="LEFT: 110px; POSITION: absolute; TOP: 252520px"><NOBR>__STDC__</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 195px; POSITION: absolute; TOP: 252509px"><NOBR>The constant 
<FONT face=Courier>1</FONT>. It is intended that this identifier be defined to 
be</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 195px; POSITION: absolute; TOP: 252530px"><NOBR>1 <FONT 
face=Times>only in standard−conforming 
implementations.</FONT></NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 252573px"><NOBR>#error <FONT 
face=Times>and </FONT>#pragma <FONT face=Times>are new with the ANSI standard; 
the predefined preprocessor macros are new, but some of 
them</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 252588px"><NOBR>have been 
available in some implementations.</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=4><SPAN style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 252627px"><NOBR><B>A.13 
Grammar</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 252674px"><NOBR>Below is a 
recapitulation of the grammar that was given throughout the earlier part of this 
appendix. It has</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 252694px"><NOBR>exactly the 
same content, but is in different order.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 252733px"><NOBR>The grammar 
has undefined terminal symbols <I>integer−constant</I>, 
<I>character−constant</I>, <I>floating−constant</I>,</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 252753px"><NOBR><I>identifier</I>, 
<I>string</I>, and <I>enumeration−constant</I>; the <FONT 
face=Courier>typewriter </FONT>style words and symbols are terminals 
given</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 252773px"><NOBR>literally. 
This grammar can be transformed mechanically into input acceptable for an 
automatic</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 252793px"><NOBR>parser−generator. 
Besides adding whatever syntactic marking is used to indicate alternatives in 
productions, it</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 252812px"><NOBR>is necessary 
to expand the ``one of'' constructions, and (depending on the rules of the 
parser−generator) to</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 252832px"><NOBR>duplicate each 
production with an <I>opt </I>symbol, once with the symbol and once without. 
With one further</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 252852px"><NOBR>change, namely 
deleting the production <I>typedef−name</I>: <I>identifier </I>and making 
<I>typedef−name </I>a terminal</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 252872px"><NOBR>symbol, this 
grammar is acceptable to the YACC parser−generator. It has only one conflict, 
generated by the</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 252893px"><NOBR>if−else <FONT 
face=Times>ambiguity.</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 252931px"><NOBR><I>translation−unit</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 252951px"><NOBR><I>external−declaration</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 252971px"><NOBR><I>translation−unit 
external−declaration</I></NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 253010px"><NOBR><I>external−declaration</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 253030px"><NOBR><I>function−definition</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 253050px"><NOBR><I>declaration</I></NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 253090px"><NOBR><I>function−definition</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 253109px"><NOBR><I>declaration−specifiers</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 318px; POSITION: absolute; TOP: 253115px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 337px; POSITION: absolute; TOP: 253109px"><NOBR><I>declarator 
declaration−list</I></NOBR></DIV></SPAN></FONT><FONT face=Times size=2><SPAN 
style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 518px; POSITION: absolute; TOP: 253115px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 537px; POSITION: absolute; TOP: 253109px"><NOBR><I>compound−statement</I></NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 252073px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 253153px"><NOBR>A.12.9 Null 
directive</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 253153px"><NOBR>213</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 253219px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=214><B>Page 214</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 253311px"><NOBR><I>declaration</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 253331px"><NOBR><I>declaration−specifiers 
init−declarator−list</I></NOBR></DIV></SPAN></FONT><FONT face=Times size=2><SPAN 
style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 456px; POSITION: absolute; TOP: 253337px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 471px; POSITION: absolute; TOP: 253332px"><NOBR>;</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 253371px"><NOBR><I>declaration−list</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 253390px"><NOBR><I>declaration</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 253410px"><NOBR><I>declaration−list 
declaration</I></NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 253450px"><NOBR><I>declaration−specifiers</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 253470px"><NOBR><I>storage−class−specifier 
declaration−specifiers</I></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 484px; POSITION: absolute; TOP: 253476px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 253489px"><NOBR><I>type−specifier 
declaration−specifiers</I></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 417px; POSITION: absolute; TOP: 253495px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 253509px"><NOBR><I>type−qualifier 
declaration−specifiers</I></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 417px; POSITION: absolute; TOP: 253515px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 253549px"><NOBR><I>storage−class 
specifier</I>: one of</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 253570px"><NOBR>auto register 
static extern typedef</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 148px; POSITION: absolute; TOP: 253608px"><NOBR><I>type 
specifier</I>: one of</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 253629px"><NOBR>void char 
short int long float double signed</NOBR></DIV>
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 253649px"><NOBR>unsigned 
<I><FONT face=Times>struct−or−union−specifier enum−specifier 
typedef−name</FONT></I></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 253687px"><NOBR><I>type−qualifier</I>: 
one of</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 253708px"><NOBR>const 
volatile</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 253747px"><NOBR><I>struct−or−union−specifier</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 253767px"><NOBR><I>struct−or−union 
identifier</I></NOBR></DIV></SPAN></FONT><FONT face=Times size=2><SPAN 
style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 344px; POSITION: absolute; TOP: 253773px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 363px; POSITION: absolute; TOP: 253768px"><NOBR>{ <I><FONT 
face=Times>struct−declaration−list </FONT></I>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 253786px"><NOBR><I>struct−or−union 
identifier</I></NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 253826px"><NOBR><I>struct−or−union</I>: 
one of</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 253847px"><NOBR>struct 
union</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 253885px"><NOBR><I>struct−declaration−list</I>:</NOBR></DIV>
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 253905px"><NOBR><I>struct 
declaration</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 253925px"><NOBR><I>struct−declaration−list 
struct declaration</I></NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 253965px"><NOBR><I>init−declarator−list</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 253984px"><NOBR><I>init−declarator</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 254004px"><NOBR><I>init−declarator−list</I><FONT 
face=Courier>, </FONT><I>init−declarator</I></NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 254044px"><NOBR><I>init−declarator</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 254064px"><NOBR><I>declarator</I></NOBR></DIV>
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 254083px"><NOBR><I>declarator 
</I><FONT face=Courier>= </FONT><I>initializer</I></NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 254123px"><NOBR><I>struct−declaration</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 254143px"><NOBR><I>specifier−qualifier−list 
struct−declarator−list</I><FONT face=Courier>;</FONT></NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 254182px"><NOBR><I>specifier−qualifier−list</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 254202px"><NOBR><I>type−specifier 
specifier−qualifier−list</I></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 423px; POSITION: absolute; TOP: 254208px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 254222px"><NOBR><I>type−qualifier 
specifier−qualifier−list</I></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 423px; POSITION: absolute; TOP: 254228px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 254262px"><NOBR><I>struct−declarator−list</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 254281px"><NOBR><I>struct−declarator</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 254301px"><NOBR><I>struct−declarator−list 
</I><FONT face=Courier>, </FONT><I>struct−declarator</I></NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 253261px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 254341px"><NOBR>A.12.9 Null 
directive</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 254341px"><NOBR>214</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 254407px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=215><B>Page 215</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 254499px"><NOBR><I>struct−declarator</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 254519px"><NOBR><I>declarator</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 254539px"><NOBR><I>declarator</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 237px; POSITION: absolute; TOP: 254545px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 256px; POSITION: absolute; TOP: 254540px"><NOBR>: <I><FONT 
face=Times>constant−expression</FONT></I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 254578px"><NOBR><I>enum−specifier</I>:</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 254599px"><NOBR>enum <I><FONT 
face=Times>identifier</FONT></I></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 272px; POSITION: absolute; TOP: 254604px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 290px; POSITION: absolute; TOP: 254599px"><NOBR>{ <I><FONT 
face=Times>enumerator−list </FONT></I>}</NOBR></DIV>
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 254619px"><NOBR>enum <I><FONT 
face=Times>identifier</FONT></I></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 254658px"><NOBR><I>enumerator−list</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 254677px"><NOBR><I>enumerator</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 254697px"><NOBR><I>enumerator−list 
</I><FONT face=Courier>, </FONT><I>enumerator</I></NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 254737px"><NOBR><I>enumerator</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 254757px"><NOBR><I>identifier</I></NOBR></DIV>
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 254776px"><NOBR><I>identifier 
</I><FONT face=Courier>= </FONT><I>constant−expression</I></NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 254816px"><NOBR><I>declarator</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 254836px"><NOBR><I>pointer</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 215px; POSITION: absolute; TOP: 254842px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 234px; POSITION: absolute; TOP: 254836px"><NOBR><I>direct−declarator</I></NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 254875px"><NOBR><I>direct−declarator</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 254895px"><NOBR><I>identifier</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 254916px"><NOBR>(<I><FONT 
face=Times>declarator</FONT></I>)</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 254935px"><NOBR><I>direct−declarator 
</I><FONT face=Courier>[ 
</FONT><I>constant−expression</I></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 442px; POSITION: absolute; TOP: 254941px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 461px; POSITION: absolute; TOP: 254936px"><NOBR>]</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 254955px"><NOBR><I>direct−declarator 
</I><FONT face=Courier>( </FONT><I>parameter−type−list </I><FONT 
face=Courier>)</FONT></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 254974px"><NOBR><I>direct−declarator 
</I><FONT face=Courier>( 
</FONT><I>identifier−list</I></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 397px; POSITION: absolute; TOP: 254980px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 415px; POSITION: absolute; TOP: 254975px"><NOBR>)</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 255014px"><NOBR><I>pointer</I>:</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 255035px"><NOBR>* <I><FONT 
face=Times>type−qualifier−list</FONT></I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 308px; POSITION: absolute; TOP: 255040px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 255055px"><NOBR>* <I><FONT 
face=Times>type−qualifier−list</FONT></I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 308px; POSITION: absolute; TOP: 255060px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 327px; POSITION: absolute; TOP: 255054px"><NOBR><I>pointer</I></NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 255093px"><NOBR><I>type−qualifier−list</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 255113px"><NOBR><I>type−qualifier</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 255133px"><NOBR><I>type−qualifier−list 
type−qualifier</I></NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 255172px"><NOBR><I>parameter−type−list</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 255192px"><NOBR><I>parameter−list</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 255212px"><NOBR><I>parameter−list 
</I><FONT face=Courier>, ...</FONT></NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 255252px"><NOBR><I>parameter−list</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 255271px"><NOBR><I>parameter−declaration</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 255291px"><NOBR><I>parameter−list 
</I><FONT face=Courier>, </FONT><I>parameter−declaration</I></NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 255331px"><NOBR><I>parameter−declaration</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 255351px"><NOBR><I>declaration−specifiers 
declarator</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 255370px"><NOBR><I>declaration−specifiers 
abstract−declarator</I></NOBR></DIV></SPAN></FONT><FONT face=Times size=2><SPAN 
style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 457px; POSITION: absolute; TOP: 255376px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 255410px"><NOBR><I>identifier−list</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 255430px"><NOBR><I>identifier</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 255450px"><NOBR><I>identifier−list 
</I><FONT face=Courier>, </FONT><I>identifier</I></NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 254449px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 255529px"><NOBR>A.12.9 Null 
directive</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 255529px"><NOBR>215</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 255595px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=216><B>Page 216</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 255687px"><NOBR><I>initializer</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 255707px"><NOBR><I>assignment−expression</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 255728px"><NOBR>{ <I><FONT 
face=Times>initializer−list </FONT></I>}</NOBR></DIV>
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 255748px"><NOBR>{ <I><FONT 
face=Times>initializer−list </FONT></I>, }</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 255786px"><NOBR><I>initializer−list</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 255806px"><NOBR><I>initializer</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 255826px"><NOBR><I>initializer−list 
</I><FONT face=Courier>, </FONT><I>initializer</I></NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 255865px"><NOBR><I>type−name</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 255885px"><NOBR><I>specifier−qualifier−list 
abstract−declarator</I></NOBR></DIV></SPAN></FONT><FONT face=Times size=2><SPAN 
style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 463px; POSITION: absolute; TOP: 255891px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 255925px"><NOBR><I>abstract−declarator</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 255945px"><NOBR><I>pointer</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 255964px"><NOBR><I>pointer</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 215px; POSITION: absolute; TOP: 255970px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 234px; POSITION: absolute; TOP: 255964px"><NOBR><I>direct−abstract−declarator</I></NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 256004px"><NOBR><I>direct−abstract−declarator</I>:</NOBR></DIV>
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 256024px"><NOBR>( 
<I>abstract−declarator </I>)</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 256044px"><NOBR><I>direct−abstract−declarator</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 352px; POSITION: absolute; TOP: 256050px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 371px; POSITION: absolute; TOP: 256044px"><NOBR>[<I>constant−expression</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 514px; POSITION: absolute; TOP: 256050px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 528px; POSITION: absolute; TOP: 256044px"><NOBR>]</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 256063px"><NOBR><I>direct−abstract−declarator</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 352px; POSITION: absolute; TOP: 256069px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 371px; POSITION: absolute; TOP: 256063px"><NOBR>(<I>parameter−type−list</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 515px; POSITION: absolute; TOP: 256069px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 530px; POSITION: absolute; TOP: 256063px"><NOBR>)</NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 256103px"><NOBR><I>typedef−name</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 256123px"><NOBR><I>identifier</I></NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 256162px"><NOBR><I>statement</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 256182px"><NOBR><I>labeled−statement</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 256202px"><NOBR><I>expression−statement</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 256222px"><NOBR><I>compound−statement</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 256242px"><NOBR><I>selection−statement</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 256261px"><NOBR><I>iteration−statement</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 256281px"><NOBR><I>jump−statement</I></NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 256321px"><NOBR><I>labeled−statement</I>:</NOBR></DIV>
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 256341px"><NOBR><I>identifier 
</I><FONT face=Courier>: </FONT><I>statement</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 256361px"><NOBR>case <I><FONT 
face=Times>constant−expression </FONT></I>: <I><FONT 
face=Times>statement</FONT></I></NOBR></DIV>
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 256381px"><NOBR>default : 
<I><FONT face=Times>statement</FONT></I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 256420px"><NOBR><I>expression−statement</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 256440px"><NOBR><I>expression</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 238px; POSITION: absolute; TOP: 256446px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 253px; POSITION: absolute; TOP: 256441px"><NOBR>;</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 256479px"><NOBR><I>compound−statement</I>:</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 256500px"><NOBR>{ <I><FONT 
face=Times>declaration−list</FONT></I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 289px; POSITION: absolute; TOP: 256505px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 308px; POSITION: absolute; TOP: 256499px"><NOBR><I>statement−list</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 402px; POSITION: absolute; TOP: 256505px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 421px; POSITION: absolute; TOP: 256500px"><NOBR>}</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 256539px"><NOBR><I>statement−list</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 256558px"><NOBR><I>statement</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 256578px"><NOBR><I>statement−list 
statement</I></NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 256618px"><NOBR><I>selection−statement</I>:</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 256639px"><NOBR>if <FONT 
face=Times>(</FONT><I><FONT face=Times>expression</FONT></I><FONT face=Times>) 
</FONT><I><FONT face=Times>statement</FONT></I></NOBR></DIV>
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 256658px"><NOBR>if <FONT 
face=Times>(</FONT><I><FONT face=Times>expression</FONT></I><FONT face=Times>) 
</FONT><I><FONT face=Times>statement </FONT></I>else <I><FONT 
face=Times>statement</FONT></I></NOBR></DIV>
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 256678px"><NOBR>switch <FONT 
face=Times>(</FONT><I><FONT face=Times>expression</FONT></I><FONT face=Times>) 
</FONT><I><FONT face=Times>statement</FONT></I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 255637px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 256717px"><NOBR>A.12.9 Null 
directive</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 256717px"><NOBR>216</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 256783px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=217><B>Page 217</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 256875px"><NOBR><I>iteration−statement</I>:</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 256896px"><NOBR>while <FONT 
face=Times>(</FONT><I><FONT face=Times>expression</FONT></I><FONT face=Times>) 
</FONT><I><FONT face=Times>statement</FONT></I></NOBR></DIV>
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 256916px"><NOBR>do <I><FONT 
face=Times>statement </FONT></I>while <FONT face=Times>(</FONT><I><FONT 
face=Times>expression</FONT></I><FONT face=Times>)</FONT>;</NOBR></DIV>
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 256936px"><NOBR>for <FONT 
face=Times>(</FONT><I><FONT 
face=Times>expression</FONT></I></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 277px; POSITION: absolute; TOP: 256941px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 292px; POSITION: absolute; TOP: 256936px"><NOBR>; <I><FONT 
face=Times>expression</FONT></I></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 377px; POSITION: absolute; TOP: 256941px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 391px; POSITION: absolute; TOP: 256936px"><NOBR>; <I><FONT 
face=Times>expression</FONT></I></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 476px; POSITION: absolute; TOP: 256941px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 490px; POSITION: absolute; TOP: 256935px"><NOBR>) 
<I>statement</I></NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 256974px"><NOBR><I>jump−statement</I>:</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 256995px"><NOBR>goto <I><FONT 
face=Times>identifier</FONT></I>;</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 257015px"><NOBR>continue;</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 257035px"><NOBR>break;</NOBR></DIV>
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 257054px"><NOBR>return 
<I><FONT face=Times>expression</FONT></I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 301px; POSITION: absolute; TOP: 257059px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 316px; POSITION: absolute; TOP: 257054px"><NOBR>;</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 257093px"><NOBR><I>expression</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 257113px"><NOBR><I>assignment−expression</I></NOBR></DIV>
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 257133px"><NOBR><I>expression 
</I><FONT face=Courier>, </FONT><I>assignment−expression</I></NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 257172px"><NOBR><I>assignment−expression</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 257192px"><NOBR><I>conditional−expression</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 257212px"><NOBR><I>unary−expression 
assignment−operator assignment−expression</I></NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 257251px"><NOBR><I>assignment−operator</I>: 
one of</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 257272px"><NOBR>= *= /= %= += 
−= &lt;&lt;= &gt;&gt;= &amp;= ^= |=</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 257311px"><NOBR><I>conditional−expression</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 257331px"><NOBR><I>logical−OR−expression</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 257350px"><NOBR><I>logical−OR−expression 
</I><FONT face=Courier>? </FONT><I>expression </I><FONT face=Courier>: 
</FONT><I>conditional−expression</I></NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 257390px"><NOBR><I>constant−expression</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 257410px"><NOBR><I>conditional−expression</I></NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 257449px"><NOBR><I>logical−OR−expression</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 257469px"><NOBR><I>logical−AND−expression</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 257489px"><NOBR><I>logical−OR−expression 
</I><FONT face=Courier>|| </FONT><I>logical−AND−expression</I></NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 257529px"><NOBR><I>logical−AND−expression</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 257548px"><NOBR><I>inclusive−OR−expression</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 257568px"><NOBR><I>logical−AND−expression 
</I><FONT face=Courier>&amp;&amp; 
</FONT><I>inclusive−OR−expression</I></NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 257608px"><NOBR><I>inclusive−OR−expression</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 257628px"><NOBR><I>exclusive−OR−expression</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 257647px"><NOBR><I>inclusive−OR−expression 
</I><FONT face=Courier>| </FONT><I>exclusive−OR−expression</I></NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 257687px"><NOBR><I>exclusive−OR−expression</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 257707px"><NOBR><I>AND−expression</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 257727px"><NOBR><I>exclusive−OR−expression 
</I><FONT face=Courier>^ </FONT><I>AND−expression</I></NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 257766px"><NOBR><I>AND−expression</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 257786px"><NOBR><I>equality−expression</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 257806px"><NOBR><I>AND−expression 
</I><FONT face=Courier>&amp; </FONT><I>equality−expression</I></NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 257845px"><NOBR><I>equality−expression</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 257865px"><NOBR><I>relational−expression</I></NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 256825px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 257905px"><NOBR>A.12.9 Null 
directive</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 257905px"><NOBR>217</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 257971px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=218><B>Page 218</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 258063px"><NOBR><I>equality−expression 
</I><FONT face=Courier>== </FONT><I>relational−expression</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 258083px"><NOBR><I>equality−expression 
</I><FONT face=Courier>!= </FONT><I>relational−expression</I></NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 258123px"><NOBR><I>relational−expression</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 258142px"><NOBR><I>shift−expression</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 258162px"><NOBR><I>relational−expression 
</I><FONT face=Courier>&lt; </FONT><I>shift−expression</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 258182px"><NOBR><I>relational−expression 
</I><FONT face=Courier>&gt; </FONT><I>shift−expression</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 258202px"><NOBR><I>relational−expression 
</I><FONT face=Courier>&lt;= </FONT><I>shift−expression</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 258222px"><NOBR><I>relational−expression 
</I><FONT face=Courier>&gt;= </FONT><I>shift−expression</I></NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 258261px"><NOBR><I>shift−expression</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 258281px"><NOBR><I>additive−expression</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 258301px"><NOBR><I>shift−expression 
</I><FONT face=Courier>&lt;&lt; </FONT><I>additive−expression</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 258321px"><NOBR><I>shift−expression 
</I><FONT face=Courier>&gt;&gt; </FONT><I>additive−expression</I></NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 258360px"><NOBR><I>additive−expression</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 258380px"><NOBR><I>multiplicative−expression</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 258400px"><NOBR><I>additive−expression 
</I><FONT face=Courier>+ </FONT><I>multiplicative−expression</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 258420px"><NOBR><I>additive−expression 
</I><FONT face=Courier>− </FONT><I>multiplicative−expression</I></NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 258459px"><NOBR><I>multiplicative−expression</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 258479px"><NOBR><I>multiplicative−expression 
</I><FONT face=Courier>* </FONT><I>cast−expression</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 258499px"><NOBR><I>multiplicative−expression 
</I><FONT face=Courier>/ </FONT><I>cast−expression</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 258519px"><NOBR><I>multiplicative−expression 
</I><FONT face=Courier>% </FONT><I>cast−expression</I></NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 258558px"><NOBR><I>cast−expression</I>:</NOBR></DIV>
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 258578px"><NOBR><I>unary 
expression</I></NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 258598px"><NOBR>(<I>type−name</I>) 
<I>cast−expression</I></NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 258637px"><NOBR><I>unary−expression</I>:</NOBR></DIV>
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 258657px"><NOBR><I>postfix 
expression</I></NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 258678px"><NOBR>++<I><FONT 
face=Times>unary expression</FONT></I></NOBR></DIV>
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 258698px"><NOBR>−−<I><FONT 
face=Times>unary expression</FONT></I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 258717px"><NOBR><I>unary−operator 
cast−expression</I></NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 258737px"><NOBR>sizeof 
<I><FONT face=Times>unary−expression</FONT></I></NOBR></DIV>
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 258757px"><NOBR>sizeof <FONT 
face=Times>(</FONT><I><FONT face=Times>type−name</FONT></I><FONT 
face=Times>)</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 148px; POSITION: absolute; TOP: 258796px"><NOBR><I>unary 
operator</I>: one of</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 258817px"><NOBR>&amp; * + − 
!</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 258855px"><NOBR><I>postfix−expression</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 258875px"><NOBR><I>primary−expression</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 258895px"><NOBR><I>postfix−expression</I>[<I>expression</I>]</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 258915px"><NOBR><I>postfix−expression</I>(<I>argument−expression−list</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 475px; POSITION: absolute; TOP: 258921px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 490px; POSITION: absolute; TOP: 258915px"><NOBR>)</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 258934px"><NOBR><I>postfix−expression</I>.<I>identifier</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 258954px"><NOBR><I>postfix−expression</I><FONT 
face=Courier>−&gt;</FONT>+<I>identifier</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 258974px"><NOBR><I>postfix−expression</I><FONT 
face=Courier>++</FONT></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 258994px"><NOBR><I>postfix−expression</I><FONT 
face=Courier>−−</FONT></NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 259033px"><NOBR><I>primary−expression</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 259053px"><NOBR><I>identifier</I></NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 258013px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 259093px"><NOBR>A.12.9 Null 
directive</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 259093px"><NOBR>218</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 259159px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=219><B>Page 219</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 259251px"><NOBR><I>constant</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 259271px"><NOBR><I>string</I></NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 259291px"><NOBR>(<I>expression</I>)</NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 259330px"><NOBR><I>argument−expression−list</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 259350px"><NOBR><I>assignment−expression</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 259370px"><NOBR><I>assignment−expression−list 
</I><FONT face=Courier>, </FONT><I>assignment−expression</I></NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 259410px"><NOBR><I>constant</I>:</NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 259429px"><NOBR><I>integer−constant</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 259449px"><NOBR><I>character−constant</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 259469px"><NOBR><I>floating−constant</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 259489px"><NOBR><I>enumeration−constant</I></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 259528px"><NOBR>The following 
grammar for the preprocessor summarizes the structure of control lines, but is 
not suitable for</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 259548px"><NOBR>mechanized 
parsing. It includes the symbol <I>text</I>, which means ordinary program text, 
non−conditional</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 259568px"><NOBR>preprocessor 
control lines, or complete preprocessor conditional instructions.</NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 259608px"><NOBR><I>control−line</I>:</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 259628px"><NOBR># define 
<I><FONT face=Times>identifier token−sequence</FONT></I></NOBR></DIV>
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 259648px"><NOBR># define 
<I><FONT face=Times>identifier</FONT></I><FONT face=Times>(</FONT><I><FONT 
face=Times>identifier, ... , identifier</FONT></I><FONT face=Times>) 
</FONT><I><FONT face=Times>token−sequence</FONT></I></NOBR></DIV>
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 259668px"><NOBR># undef 
<I><FONT face=Times>identifier</FONT></I></NOBR></DIV>
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 259688px"><NOBR># include 
&lt;<I><FONT face=Times>filename</FONT></I>&gt;</NOBR></DIV>
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 259708px"><NOBR># include 
"<I><FONT face=Times>filename</FONT></I>"</NOBR></DIV>
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 259727px"><NOBR># line 
<I><FONT face=Times>constant </FONT></I>"<I><FONT 
face=Times>filename</FONT></I>"</NOBR></DIV>
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 259747px"><NOBR># line 
<I><FONT face=Times>constant</FONT></I></NOBR></DIV>
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 259767px"><NOBR># error 
<I><FONT face=Times>token−sequence</FONT></I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 348px; POSITION: absolute; TOP: 259772px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 259787px"><NOBR># pragma 
<I><FONT face=Times>token−sequence</FONT></I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 358px; POSITION: absolute; TOP: 259792px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 259807px"><NOBR>#</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 259825px"><NOBR><I>preprocessor−conditional</I></NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 259865px"><NOBR><I>preprocessor−conditional</I>:</NOBR></DIV>
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 259885px"><NOBR><I>if−line 
text elif−parts else−part</I></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 379px; POSITION: absolute; TOP: 259891px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 398px; POSITION: absolute; TOP: 259886px"><NOBR>#endif</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 259924px"><NOBR><I>if−line</I>:</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 259945px"><NOBR># if <I><FONT 
face=Times>constant−expression</FONT></I></NOBR></DIV>
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 259965px"><NOBR># ifdef 
<I><FONT face=Times>identifier</FONT></I></NOBR></DIV>
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 259985px"><NOBR># ifndef 
<I><FONT face=Times>identifier</FONT></I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 260023px"><NOBR><I>elif−parts</I>:</NOBR></DIV>
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 260043px"><NOBR><I>elif−line 
text</I></NOBR></DIV>
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 260063px"><NOBR><I>elif−parts</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 234px; POSITION: absolute; TOP: 260069px"><NOBR><I>opt</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 260103px"><NOBR><I>elif−line</I>:</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 260123px"><NOBR># elif 
<I><FONT 
face=Times>constant−expression</FONT></I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 260162px"><NOBR><I>else−part</I>:</NOBR></DIV>
<DIV style="LEFT: 167px; POSITION: absolute; TOP: 260182px"><NOBR><I>else−line 
text</I></NOBR></DIV>
<DIV 
style="LEFT: 148px; POSITION: absolute; TOP: 260221px"><NOBR><I>else−line</I>:</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 167px; POSITION: absolute; TOP: 260242px"><NOBR>#else</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 259201px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 260281px"><NOBR>A.12.9 Null 
directive</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 260281px"><NOBR>219</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 260347px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=220><B>Page 220</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 312px; POSITION: absolute; TOP: 260462px"><NOBR><A 
href="#153">Back 
to Chapter 8 </A><FONT face=Times color=#000000>−− </FONT><A 
href="#1">Index 
</A><FONT face=Times color=#000000>−− </FONT><A 
href="#221">Appendix 
B</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 260389px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 261469px"><NOBR>A.12.9 Null 
directive</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 261469px"><NOBR>220</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 261535px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=221><B>Page 221</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 304px; POSITION: absolute; TOP: 261650px"><NOBR><A 
href="#170">Back 
to Appendix A </A><FONT face=Times color=#000000>−− </FONT><A 
href="#1">Index 
</A><FONT face=Times color=#000000>−− </FONT><A 
href="#238">Appendix 
C</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=4><SPAN 
style="FONT-SIZE: 26px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 261695px"><NOBR><B>Appendix B 
− Standard Library</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 261747px"><NOBR>This appendix 
is a summary of the library defined by the ANSI standard. The standard library 
is not part of</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 261766px"><NOBR>the C language 
proper, but an environment that supports standard C will provide the function 
declarations and</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 261786px"><NOBR>type and macro 
definitions of this library. We have omitted a few functions that are of limited 
utility or easily</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 261806px"><NOBR>synthesized 
from others; we have omitted multi−byte characters; and we have omitted 
discussion of locale</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 261826px"><NOBR>issues; that 
is, properties that depend on local language, nationality, or 
culture.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 261865px"><NOBR>The functions, 
types and macros of the standard library are declared in standard 
<I>headers</I>:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 261905px"><NOBR>&lt;assert.h&gt; 
&lt;float.h&gt; &lt;math.h&gt; &lt;stdarg.h&gt; &lt;stdlib.h&gt;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 261921px"><NOBR>&lt;ctype.h&gt; 
&lt;limits.h&gt; &lt;setjmp.h&gt; &lt;stddef.h&gt; &lt;string.h&gt;</NOBR></DIV>
<DIV 
style="LEFT: 133px; POSITION: absolute; TOP: 261938px"><NOBR>&lt;errno.h&gt; 
&lt;locale.h&gt; &lt;signal.h&gt; &lt;stdio.h&gt; 
&lt;time.h&gt;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 261974px"><NOBR>A header can 
be accessed by</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 128px; POSITION: absolute; TOP: 262015px"><NOBR>#include <FONT 
face=Times>&lt;</FONT><I><FONT face=Times>header</FONT></I><FONT 
face=Times>&gt;</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 262054px"><NOBR>Headers may be 
included in any order and any number of times. A header must be included outside 
of any</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 262073px"><NOBR>external 
declaration or definition and before any use of anything it declares. A header 
need not be a source</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 262093px"><NOBR>file.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 262133px"><NOBR>External 
identifiers that begin with an underscore are reserved for use by the library, 
as are all other identifiers</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 262153px"><NOBR>that begin 
with an underscore and an upper−case letter or another 
underscore.</NOBR></DIV></SPAN></FONT><FONT face=Times size=4><SPAN 
style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 262194px"><NOBR><B>B.1 Input 
and Output: &lt;stdio.h&gt;</B></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 262240px"><NOBR>The input and 
output functions, types, and macros defined in <FONT 
face=Courier>&lt;stdio.h&gt; </FONT>represent nearly one third of 
the</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 262260px"><NOBR>library.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 262300px"><NOBR>A <I>stream 
</I>is a source or destination of data that may be associated with a disk or 
other peripheral. The library</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 262320px"><NOBR>supports text 
streams and binary streams, although on some systems, notably UNIX, these are 
identical. A text</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 262339px"><NOBR>stream is a 
sequence of lines; each line has zero or more characters and is terminated by 
<FONT face=Courier>'\n'</FONT>. An</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 262359px"><NOBR>environment 
may need to convert a text stream to or from some other representation (such as 
mapping <FONT face=Courier>'\n'</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 262379px"><NOBR>to carriage 
return and linefeed). A binary stream is a sequence of unprocessed bytes that 
record internal data,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 262399px"><NOBR>with the 
property that if it is written, then read back on the same system, it will 
compare equal.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 262438px"><NOBR>A stream is 
connected to a file or device by <I>opening </I>it; the connection is broken by 
<I>closing </I>the stream.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 262458px"><NOBR>Opening a file 
returns a pointer to an object of type <FONT face=Courier>FILE</FONT>, which 
records whatever information is necessary to</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 262478px"><NOBR>control the 
stream. We will use ``file pointer'' and ``stream'' interchangeably when there 
is no ambiguity.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 262518px"><NOBR>When a program 
begins execution, the three streams <FONT face=Courier>stdin</FONT>, <FONT 
face=Courier>stdout</FONT>, and <FONT face=Courier>stderr </FONT>are already 
open.</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 262558px"><NOBR><B>B.1.1 File 
Operations</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 262601px"><NOBR>The following 
functions deal with operations on files. The type <FONT face=Courier>size_t 
</FONT>is the unsigned integral type</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 262621px"><NOBR>produced by 
the <FONT face=Courier>sizeof </FONT>operator.</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 261577px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 262657px"><NOBR>Appendix B − 
Standard Library</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 262657px"><NOBR>221</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 262723px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=222><B>Page 222</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 262816px"><NOBR><I>FILE 
*fopen(const char *filename, const char *mode)</I></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 262836px"><NOBR>fopen <FONT 
face=Times>opens the named file, and returns a stream, or </FONT>NULL <FONT 
face=Times>if the attempt fails. Legal values for</FONT></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 262856px"><NOBR>mode <FONT 
face=Times>include:</FONT></NOBR></DIV>
<DIV style="LEFT: 276px; POSITION: absolute; TOP: 262897px"><NOBR>"w" <FONT 
face=Times>create text file for writing; discard previous contents if 
any</FONT></NOBR></DIV>
<DIV style="LEFT: 276px; POSITION: absolute; TOP: 262924px"><NOBR>"a" <FONT 
face=Times>append; open or create text file for writing at end of 
file</FONT></NOBR></DIV>
<DIV style="LEFT: 276px; POSITION: absolute; TOP: 262950px"><NOBR>"r+" <FONT 
face=Times>open text file for update (i.e., reading and 
writing)</FONT></NOBR></DIV>
<DIV style="LEFT: 276px; POSITION: absolute; TOP: 262976px"><NOBR>"w+" <FONT 
face=Times>create text file for update, discard previous contents if 
any</FONT></NOBR></DIV>
<DIV style="LEFT: 276px; POSITION: absolute; TOP: 263002px"><NOBR>"a+" <FONT 
face=Times>append; open or create text file for update, writing at 
end</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 263045px"><NOBR>Update mode 
permits reading and writing the same file; <FONT face=Courier>fflush </FONT>or a 
file−positioning function must</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 263065px"><NOBR>be called 
between a read and a write or vice versa. If the mode includes <FONT 
face=Courier>b </FONT>after the initial letter, as 
in</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 263086px"><NOBR>"rb" <FONT 
face=Times>or </FONT>"w+b"<FONT face=Times>, that indicates a binary file. 
Filenames are limited to </FONT>FILENAME_MAX <FONT 
face=Times>characters.</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 263105px"><NOBR>At most <FONT 
face=Courier>FOPEN_MAX </FONT>files may be open at 
once.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 263145px"><NOBR><I>FILE 
*freopen(const char *filename, const char *mode, FILE *stream)</I></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 263165px"><NOBR>freopen <FONT 
face=Times>opens the file with the specified mode and associates the stream with 
it. It returns</FONT></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 263185px"><NOBR>stream<FONT 
face=Times>, or </FONT>NULL <FONT face=Times>if an error occurs. </FONT>freopen 
<FONT face=Times>is normally used to change the files associated 
with</FONT></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 263205px"><NOBR>stdin<FONT 
face=Times>, </FONT>stdout<FONT face=Times>, or </FONT>stderr<FONT 
face=Times>.</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 263244px"><NOBR><I>int 
fflush(FILE *stream)</I></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 263263px"><NOBR>On an output 
stream, <FONT face=Courier>fflush </FONT>causes any buffered but unwritten data 
to be written; on an input</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 263283px"><NOBR>stream, the 
effect is undefined. It returns <FONT face=Courier>EOF </FONT>for a write error, 
and zero otherwise. <FONT face=Courier>fflush(NULL)</FONT></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 263303px"><NOBR>flushes all 
output streams.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 263343px"><NOBR><I>int 
fclose(FILE *stream)</I></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 263363px"><NOBR>fclose <FONT 
face=Times>flushes any unwritten data for </FONT>stream<FONT face=Times>, 
discards any unread buffered input, frees 
any</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 263382px"><NOBR>automatically 
allocated buffer, then closes the stream. It returns <FONT face=Courier>EOF 
</FONT>if any errors occurred, and zero</NOBR></DIV>
<DIV 
style="LEFT: 162px; POSITION: absolute; TOP: 263402px"><NOBR>otherwise.</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 263442px"><NOBR><I>int 
remove(const char *filename)</I></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 263462px"><NOBR>remove <FONT 
face=Times>removes the named file, so that a subsequent attempt to open it will 
fail. It returns non−zero</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 263481px"><NOBR>if the attempt 
fails.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 263522px"><NOBR><I>int 
rename(const char *oldname, const char *newname)</I></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 263541px"><NOBR>rename <FONT 
face=Times>changes the name of a file; it returns non−zero if the attempt 
fails.</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 263581px"><NOBR><I>FILE 
*tmpfile(void)</I></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 263601px"><NOBR>tmpfile <FONT 
face=Times>creates a temporary file of mode </FONT>"wb+" <FONT face=Times>that 
will be automatically removed when closed</FONT></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 263620px"><NOBR>or when the 
program terminates normally. <FONT face=Courier>tmpfile </FONT>returns a stream, 
or <FONT face=Courier>NULL </FONT>if it could not create</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 263639px"><NOBR>the 
file.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 263680px"><NOBR><I>char 
*tmpnam(char s[L_tmpnam])</I></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 263700px"><NOBR>tmpnam(NULL) 
<FONT face=Times>creates a string that is not the name of an existing file, and 
returns a pointer to an</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 263719px"><NOBR>internal 
static array. <FONT face=Courier>tmpnam(s) </FONT>stores the string in <FONT 
face=Courier>s </FONT>as well as returning it as the function value; <FONT 
face=Courier>s</FONT></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 263738px"><NOBR>must have room 
for at least <FONT face=Courier>L_tmpnam </FONT>characters. <FONT 
face=Courier>tmpnam </FONT>generates a different name each time it</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 263758px"><NOBR>is called; at 
most <FONT face=Courier>TMP_MAX </FONT>different names are guaranteed during 
execution of the program. Note</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 263778px"><NOBR>that <FONT 
face=Courier>tmpnam </FONT>creates a name, not a file.</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 262765px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 263845px"><NOBR>Appendix B − 
Standard Library</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 263845px"><NOBR>222</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 263911px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=223><B>Page 223</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 264004px"><NOBR><I>int 
setvbuf(FILE *stream, char *buf, int mode, size_t size)</I></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 264024px"><NOBR>setvbuf <FONT 
face=Times>controls buffering for the stream; it must be called before reading, 
writing or any other</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 264043px"><NOBR>operation. A 
<FONT face=Courier>mode </FONT>of <FONT face=Courier>_IOFBF </FONT>causes full 
buffering, <FONT face=Courier>_IOLBF </FONT>line buffering of text files, 
and</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 264064px"><NOBR>_IONBF <FONT 
face=Times>no buffering. If </FONT>buf <FONT face=Times>is not </FONT>NULL<FONT 
face=Times>, it will be used as the buffer, otherwise a buffer will 
be</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 264082px"><NOBR>allocated. 
<FONT face=Courier>size </FONT>determines the buffer size. <FONT 
face=Courier>setvbuf </FONT>returns non−zero for any 
error.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 264123px"><NOBR><I>void 
setbuf(FILE *stream, char *buf)</I></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 264142px"><NOBR>If <FONT 
face=Courier>buf </FONT>is <FONT face=Courier>NULL</FONT>, buffering is turned 
off for the stream. Otherwise, <FONT face=Courier>setbuf </FONT>is equivalent to 
<FONT face=Courier>(void)</FONT></NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 162px; POSITION: absolute; TOP: 264163px"><NOBR>setvbuf(stream, 
buf, _IOFBF, BUFSIZ)<FONT face=Times>.</FONT></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 264202px"><NOBR><B>B.1.2 
Formatted Output</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 264245px"><NOBR>The <FONT 
face=Courier>printf </FONT>functions provide formatted output 
conversion.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 264284px"><NOBR>int 
fprintf(FILE *stream, const char *format, ...)</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 264322px"><NOBR>fprintf <FONT 
face=Times>converts and writes output to </FONT>stream <FONT face=Times>under 
the control of </FONT>format<FONT face=Times>. The return value is 
the</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 264340px"><NOBR>number of 
characters written, or negative if an error occurred.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 264380px"><NOBR>The format 
string contains two types of objects: ordinary characters, which are copied to 
the output stream,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 264400px"><NOBR>and conversion 
specifications, each of which causes conversion and printing of the next 
successive argument</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 264420px"><NOBR>to <FONT 
face=Courier>fprintf</FONT>. Each conversion specification begins with the 
character <FONT face=Courier>% </FONT>and ends with a conversion 
character.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 264439px"><NOBR>Between the 
<FONT face=Courier>% </FONT>and the conversion character there may be, in 
order:</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 264479px"><NOBR>Flags (in any 
order), which modify the specification:</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 264500px"><NOBR>−<FONT 
face=Times>, which specifies left adjustment of the converted argument in its 
field.</FONT></NOBR></DIV></SPAN></FONT><FONT face=Symbol size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 264493px"><NOBR>♦ 
</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 264520px"><NOBR>+<FONT 
face=Times>, which specifies that the number will always be printed with a 
sign.</FONT></NOBR></DIV></SPAN></FONT><FONT face=Symbol size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 264513px"><NOBR>♦ 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 264538px"><NOBR><I>space</I>: 
if the first character is not a sign, a space will be 
prefixed.</NOBR></DIV></SPAN></FONT><FONT face=Symbol size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 264533px"><NOBR>♦ 
</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 264559px"><NOBR>0<FONT 
face=Times>: for numeric conversions, specifies padding to the field width with 
leading zeros.</FONT></NOBR></DIV></SPAN></FONT><FONT face=Symbol size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 264553px"><NOBR>♦ 
</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 264579px"><NOBR>#<FONT 
face=Times>, which specifies an alternate output form. For </FONT>o<FONT 
face=Times>, the first digit will become zero. For </FONT>x <FONT face=Times>or 
</FONT>X<FONT face=Times>,</FONT></NOBR></DIV>
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 264599px"><NOBR>0x <FONT 
face=Times>or </FONT>0X <FONT face=Times>will be prefixed to a non−zero result. 
For </FONT>e<FONT face=Times>, </FONT>E<FONT face=Times>, </FONT>f<FONT 
face=Times>, </FONT>g<FONT face=Times>, and </FONT>G<FONT face=Times>, the 
output will always</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 216px; POSITION: absolute; TOP: 264618px"><NOBR>have a decimal 
point; for <FONT face=Courier>g </FONT>and <FONT face=Courier>G</FONT>, trailing 
zeros will not be removed.</NOBR></DIV></SPAN></FONT><FONT face=Symbol 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 199px; POSITION: absolute; TOP: 264573px"><NOBR>♦ 
</NOBR></DIV>
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 264474px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 264637px"><NOBR>A number 
specifying a minimum field width. The converted argument will be printed in a 
field at</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 264657px"><NOBR>least this 
wide, and wider if necessary. If the converted argument has fewer characters 
than the field</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 264677px"><NOBR>width it will 
be padded on the left (or right, if left adjustment has been requested) to make 
up the field</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 264697px"><NOBR>width. The 
padding character is normally space, but is <FONT face=Courier>0 </FONT>if the 
zero padding flag is present.</NOBR></DIV></SPAN></FONT><FONT face=Symbol 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 264632px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 264717px"><NOBR>A period, 
which separates the field width from the 
precision.</NOBR></DIV></SPAN></FONT><FONT face=Symbol size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 264711px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 264736px"><NOBR>A number, the 
precision, that specifies the maximum number of characters to be printed from a 
string,</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 264756px"><NOBR>or the number 
of digits to be printed after the decimal point for <FONT face=Courier>e</FONT>, 
<FONT face=Courier>E</FONT>, or <FONT face=Courier>f </FONT>conversions, or the 
number</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 264776px"><NOBR>of significant 
digits for <FONT face=Courier>g </FONT>or <FONT face=Courier>G 
</FONT>conversion, or the number of digits to be printed for an integer 
(leading</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 264797px"><NOBR>0<FONT 
face=Times>s will be added to make up the necessary 
width).</FONT></NOBR></DIV></SPAN></FONT><FONT face=Symbol size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 264731px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 264816px"><NOBR>A length 
modifier <FONT face=Courier>h</FONT>, <FONT face=Courier>l </FONT>(letter ell), 
or <FONT face=Courier>L</FONT>. ``<FONT face=Courier>h</FONT>'' indicates that 
the corresponding argument is to be printed</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 264835px"><NOBR>as a <FONT 
face=Courier>short </FONT>or <FONT face=Courier>unsigned short</FONT>; ``<FONT 
face=Courier>l</FONT>'' indicates that the argument is a <FONT face=Courier>long 
</FONT>or <FONT face=Courier>unsigned</FONT></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 264856px"><NOBR>long<FONT 
face=Times>, ``</FONT>L<FONT face=Times>'' indicates that the argument is a 
</FONT>long double<FONT face=Times>.</FONT></NOBR></DIV></SPAN></FONT><FONT 
face=Symbol size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 264810px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 264895px"><NOBR>Width or 
precision or both may be specified as <FONT face=Courier>*</FONT>, in which case 
the value is computed by converting the next</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 264915px"><NOBR>argument(s), 
which must be <FONT face=Courier>int</FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 264954px"><NOBR>The conversion 
characters and their meanings are shown in Table B.1. If the character after the 
<FONT face=Courier>% </FONT>is not a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 264974px"><NOBR>conversion 
character, the behavior is undefined.</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 263953px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 265033px"><NOBR>B.1.2 
Formatted Output</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 265033px"><NOBR>223</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 265099px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=224><B>Page 224</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 376px; POSITION: absolute; TOP: 265191px"><NOBR><I><B>Table 
B.1 </B>Printf Conversions</I></NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 265252px"><NOBR><I>int 
printf(const char *format, ...)</I></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 265271px"><NOBR>printf(...) 
<FONT face=Times>is equivalent to </FONT>fprintf(stdout, ...)<FONT 
face=Times>.</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 265311px"><NOBR><I>int 
sprintf(char *s, const char *format, ...)</I></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 265331px"><NOBR>sprintf <FONT 
face=Times>is the same as </FONT>printf <FONT face=Times>except that the output 
is written into the string </FONT>s<FONT face=Times>, terminated 
with</FONT></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 265351px"><NOBR>'\0'<FONT 
face=Times>. </FONT>s <FONT face=Times>must be big enough to hold the result. 
The return count does not include the </FONT>'\0'<FONT 
face=Times>.</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 265390px"><NOBR><I>int 
vprintf(const char *format, va_list arg)</I></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 265410px"><NOBR><I>int 
vfprintf(FILE *stream, const char *format, va_list arg)</I></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 265430px"><NOBR><I>int 
vsprintf(char *s, const char *format, va_list 
arg)</I></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 265449px"><NOBR>The functions 
<FONT face=Courier>vprintf</FONT>, <FONT face=Courier>vfprintf</FONT>, and <FONT 
face=Courier>vsprintf </FONT>are equivalent to the corresponding <FONT 
face=Courier>printf</FONT></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 265468px"><NOBR>functions, 
except that the variable argument list is replaced by <FONT 
face=Courier>arg</FONT>, which has been initialized by 
the</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 265489px"><NOBR>va_start <FONT 
face=Times>macro and perhaps </FONT>va_arg <FONT face=Times>calls. See the 
discussion of </FONT>&lt;stdarg.h&gt; <FONT face=Times>in <A 
href="#232"></A></FONT><FONT 
face=Times color=#0000ff><A 
href="#232">Section 
B.7</A></FONT><FONT face=Times>.</FONT></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 265528px"><NOBR><B>B.1.3 
Formatted Input</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 265571px"><NOBR>The <FONT 
face=Courier>scanf </FONT>function deals with formatted input 
conversion.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 265611px"><NOBR>int 
fscanf(FILE *stream, const char *format, ...)</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 265648px"><NOBR>fscanf <FONT 
face=Times>reads from </FONT>stream <FONT face=Times>under control of 
</FONT>format<FONT face=Times>, and assigns converted values through 
subsequent</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 265667px"><NOBR>arguments, 
<I>each of which must be a pointer</I>. It returns when <FONT 
face=Courier>format </FONT>is exhausted. <FONT face=Courier>fscanf 
</FONT>returns <FONT face=Courier>EOF </FONT>if</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 265687px"><NOBR>end of file or 
an error occurs before any conversion; otherwise it returns the number of input 
items converted</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 265707px"><NOBR>and 
assigned.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 265746px"><NOBR>The format 
string usually contains conversion specifications, which are used to direct 
interpretation of input.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 265766px"><NOBR>The format 
string may contain:</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 265806px"><NOBR>Blanks or 
tabs, which are not ignored.</NOBR></DIV></SPAN></FONT><FONT face=Symbol 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 265800px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 265825px"><NOBR>Ordinary 
characters (not %), which are expected to match the next non−white space 
character of the</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 265845px"><NOBR>input 
stream.</NOBR></DIV></SPAN></FONT><FONT face=Symbol size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 265820px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 265865px"><NOBR>Conversion 
specifications, consisting of a <FONT face=Courier>%</FONT>, an optional 
assignment suppression character <FONT face=Courier>*</FONT>, an</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 265885px"><NOBR>optional 
number specifying a maximum field width, an optional <FONT 
face=Courier>h</FONT>, <FONT face=Courier>l</FONT>, or <FONT face=Courier>L 
</FONT>indicating the width of the</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 265905px"><NOBR>target, and a 
conversion character.</NOBR></DIV></SPAN></FONT><FONT face=Symbol size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 265860px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 265944px"><NOBR>A conversion 
specification determines the conversion of the next input field. Normally the 
result is placed in</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 265964px"><NOBR>the variable 
pointed to by the corresponding argument. If assignment suppression is indicated 
by <FONT face=Courier>*</FONT>, as in <FONT 
face=Courier>%*s</FONT>,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 265984px"><NOBR>however, the 
input field is simply skipped; no assignment is made. An input field is defined 
as a string of</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 266004px"><NOBR>non−white 
space characters; it extends either to the next white space character or until 
the field width, if</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 266023px"><NOBR>specified, is 
exhausted. This implies that <FONT face=Courier>scanf </FONT>will read across 
line boundaries to find its input, since</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 266043px"><NOBR>newlines are 
white space. (White space characters are blank, tab, newline, carriage return, 
vertical tab, and</NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 266063px"><NOBR>formfeed.)</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 266103px"><NOBR>The conversion 
character indicates the interpretation of the input field. The corresponding 
argument must be a</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 266122px"><NOBR>pointer. The 
legal conversion characters are shown in Table B.2.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 266162px"><NOBR>The conversion 
characters <FONT face=Courier>d</FONT>, <FONT face=Courier>i</FONT>, <FONT 
face=Courier>n</FONT>, <FONT face=Courier>o</FONT>, <FONT face=Courier>u</FONT>, 
and <FONT face=Courier>x </FONT>may be preceded by <FONT face=Courier>h 
</FONT>if the argument is a pointer to <FONT 
face=Courier>short</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 266182px"><NOBR>rather than 
int, or by <FONT face=Courier>l </FONT>(letter ell) if the argument is a pointer 
to <FONT face=Courier>long</FONT>. The conversion characters <FONT 
face=Courier>e</FONT>, <FONT face=Courier>f</FONT>, and <FONT 
face=Courier>g</FONT></NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 265141px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 266221px"><NOBR>B.1.3 
Formatted Input</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 266221px"><NOBR>224</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 266287px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=225><B>Page 225</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 266379px"><NOBR>may be 
preceded by <FONT face=Courier>l </FONT>if a pointer to <FONT 
face=Courier>double </FONT>rather than <FONT face=Courier>float </FONT>is in the 
argument list, and by <FONT face=Courier>L </FONT>if a pointer</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 266399px"><NOBR>to a <FONT 
face=Courier>long double</FONT>.</NOBR></DIV>
<DIV style="LEFT: 377px; POSITION: absolute; TOP: 266439px"><NOBR><I><B>Table 
B.2 </B>Scanf Conversions</I></NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 266499px"><NOBR><I>int 
scanf(const char *format, ...)</I></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 266519px"><NOBR>scanf(...) 
<FONT face=Times>is identical to </FONT>fscanf(stdin, ...)<FONT 
face=Times>.</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 266558px"><NOBR><I>int 
sscanf(const char *s, const char *format, ...)</I></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 266578px"><NOBR>sscanf(s, ...) 
<FONT face=Times>is equivalent to </FONT>scanf(...) <FONT face=Times>except that 
the input characters are taken from</FONT></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 266597px"><NOBR>the string 
<FONT face=Courier>s</FONT>.</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 266637px"><NOBR><B>B.1.4 
Character Input and Output Functions</B></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 266681px"><NOBR><I>int 
fgetc(FILE *stream)</I></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 266701px"><NOBR>fgetc <FONT 
face=Times>returns the next character of </FONT>stream <FONT face=Times>as an 
</FONT>unsigned char <FONT face=Times>(converted to an </FONT>int<FONT 
face=Times>), or</FONT></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 266721px"><NOBR>EOF <FONT 
face=Times>if end of file or error occurs.</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 266760px"><NOBR><I>char 
*fgets(char *s, int n, FILE *stream)</I></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 266780px"><NOBR>fgets <FONT 
face=Times>reads at most the next </FONT>n−1 <FONT face=Times>characters into 
the array </FONT>s<FONT face=Times>, stopping if a newline is 
encountered;</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 266799px"><NOBR>the newline is 
included in the array, which is terminated by <FONT face=Courier>'\0'</FONT>. 
<FONT face=Courier>fgets </FONT>returns <FONT face=Courier>s</FONT>, or <FONT 
face=Courier>NULL </FONT>if end</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 266819px"><NOBR>of file or 
error occurs.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 266859px"><NOBR><I>int 
fputc(int c, FILE *stream)</I></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 266879px"><NOBR>fputc <FONT 
face=Times>writes the character </FONT>c <FONT face=Times>(converted to an 
</FONT>unsigend char<FONT face=Times>) on </FONT>stream<FONT face=Times>. It 
returns the</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 266898px"><NOBR>character 
written, or <FONT face=Courier>EOF </FONT>for 
error.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 266938px"><NOBR><I>int 
fputs(const char *s, FILE *stream)</I></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 266958px"><NOBR>fputs <FONT 
face=Times>writes the string </FONT>s <FONT face=Times>(which need not contain 
</FONT>\n<FONT face=Times>) on </FONT>stream<FONT face=Times>; it returns 
non−negative, or </FONT>EOF</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 266977px"><NOBR>for an 
error.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 267018px"><NOBR><I>int 
getc(FILE *stream)</I></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 267037px"><NOBR>getc <FONT 
face=Times>is equivalent to </FONT>fgetc <FONT face=Times>except that if it is a 
macro, it may evaluate </FONT>stream <FONT face=Times>more than 
once.</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 267077px"><NOBR><I>int 
getchar(void)</I></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 267097px"><NOBR>getchar <FONT 
face=Times>is equivalent to </FONT>getc(stdin)<FONT 
face=Times>.</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 267136px"><NOBR><I>char 
*gets(char *s)</I></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 267156px"><NOBR>gets <FONT 
face=Times>reads the next input line into the array </FONT>s<FONT face=Times>; 
it replaces the terminating newline with </FONT>'\0'<FONT face=Times>. 
It</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 267175px"><NOBR>returns <FONT 
face=Courier>s</FONT>, or <FONT face=Courier>NULL </FONT>if end of file or error 
occurs.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 267216px"><NOBR><I>int 
putc(int c, FILE *stream)</I></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 267235px"><NOBR>putc <FONT 
face=Times>is equivalent to </FONT>fputc <FONT face=Times>except that if it is a 
macro, it may evaluate </FONT>stream <FONT face=Times>more than 
once.</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 267275px"><NOBR><I>int 
putchar(int c)</I></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 267295px"><NOBR>putchar(c) 
<FONT face=Times>is equivalent to </FONT>putc(c,stdout)<FONT 
face=Times>.</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 267334px"><NOBR><I>int 
puts(const char *s)</I></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 267354px"><NOBR>puts <FONT 
face=Times>writes the string </FONT>s <FONT face=Times>and a newline to 
</FONT>stdout<FONT face=Times>. It returns </FONT>EOF <FONT face=Times>if an 
error occurs, non−negative</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 162px; POSITION: absolute; TOP: 267373px"><NOBR>otherwise.</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 266329px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 267409px"><NOBR>B.1.4 
Character Input and Output Functions</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 267409px"><NOBR>225</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 267475px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=226><B>Page 226</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 267568px"><NOBR><I>int 
ungetc(int c, FILE *stream)</I></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 267588px"><NOBR>ungetc <FONT 
face=Times>pushes </FONT>c <FONT face=Times>(converted to an </FONT>unsigned 
char<FONT face=Times>) back onto </FONT>stream<FONT face=Times>, where it will 
be returned</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 267607px"><NOBR>on the next 
read. Only one character of pushback per stream is guaranteed. <FONT 
face=Courier>EOF </FONT>may not be pushed</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 267627px"><NOBR>back. <FONT 
face=Courier>ungetc </FONT>returns the character pushed back, or <FONT 
face=Courier>EOF </FONT>for error.</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 267667px"><NOBR><B>B.1.5 
Direct Input and Output Functions</B></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 267711px"><NOBR><I>size_t 
fread(void *ptr, size_t size, size_t nobj, FILE *stream)</I></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 267730px"><NOBR>fread <FONT 
face=Times>reads from </FONT>stream <FONT face=Times>into the array </FONT>ptr 
<FONT face=Times>at most </FONT>nobj <FONT face=Times>objects of size 
</FONT>size<FONT face=Times>. </FONT>fread <FONT 
face=Times>returns</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 267749px"><NOBR>the number of 
objects read; this may be less than the number requested. <FONT 
face=Courier>feof </FONT>and <FONT face=Courier>ferror </FONT>must 
be</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 267769px"><NOBR>used to 
determine status.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 267810px"><NOBR><I>size_t 
fwrite(const void *ptr, size_t size, size_t nobj, FILE *stream)</I></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 267829px"><NOBR>fwrite <FONT 
face=Times>writes, from the array </FONT>ptr<FONT face=Times>, </FONT>nobj <FONT 
face=Times>objects of size </FONT>size <FONT face=Times>on </FONT>stream<FONT 
face=Times>. It returns the number</FONT></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 267848px"><NOBR>of objects 
written, which is less than <FONT face=Courier>nobj </FONT>on 
error.</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 267888px"><NOBR><B>B.1.6 File 
Positioning Functions</B></NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 267932px"><NOBR><I>int 
fseek(FILE *stream, long offset, int origin)</I></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 267952px"><NOBR>fseek <FONT 
face=Times>sets the file position for </FONT>stream<FONT face=Times>; a 
subsequent read or write will access data beginning at 
the</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 267971px"><NOBR>new position. 
For a binary file, the position is set to <FONT face=Courier>offset 
</FONT>characters from <FONT face=Courier>origin</FONT>, which may 
be</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 267992px"><NOBR>SEEK_SET <FONT 
face=Times>(beginning), </FONT>SEEK_CUR <FONT face=Times>(current position), or 
</FONT>SEEK_END <FONT face=Times>(end of file). For a 
text</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 268011px"><NOBR>stream, <FONT 
face=Courier>offset </FONT>must be zero, or a value returned by <FONT 
face=Courier>ftell </FONT>(in which case <FONT face=Courier>origin </FONT>must 
be</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 268031px"><NOBR>SEEK_SET<FONT 
face=Times>). </FONT>fseek <FONT face=Times>returns non−zero on 
error.</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 268071px"><NOBR><I>long 
ftell(FILE *stream)</I></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 268091px"><NOBR>ftell <FONT 
face=Times>returns the current file position for </FONT>stream<FONT face=Times>, 
or </FONT>−1 <FONT face=Times>on error.</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 268130px"><NOBR><I>void 
rewind(FILE *stream)</I></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 268150px"><NOBR>rewind(fp) 
<FONT face=Times>is equivalent to </FONT>fseek(fp, 0L, SEEK_SET); 
clearerr(fp)<FONT face=Times>.</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 268190px"><NOBR><I>int 
fgetpos(FILE *stream, fpos_t *ptr)</I></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 268210px"><NOBR>fgetpos <FONT 
face=Times>records the current position in </FONT>stream <FONT face=Times>in 
</FONT>*ptr<FONT face=Times>, for subsequent use by </FONT>fsetpos<FONT 
face=Times>. The</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 268229px"><NOBR>type <FONT 
face=Courier>fpos_t </FONT>is suitable for recording such values. <FONT 
face=Courier>fgetpos </FONT>returns non−zero on 
error.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 268269px"><NOBR><I>int 
fsetpos(FILE *stream, const fpos_t *ptr)</I></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 268289px"><NOBR>fsetpos <FONT 
face=Times>positions </FONT>stream <FONT face=Times>at the position recorded by 
</FONT>fgetpos <FONT face=Times>in </FONT>*ptr<FONT face=Times>. </FONT>fsetpos 
<FONT face=Times>returns</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 268308px"><NOBR>non−zero on 
error.</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 17px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 268348px"><NOBR><B>B.1.7 Error 
Functions</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 268391px"><NOBR>Many of the 
functions in the library set status indicators when error or end of file occur. 
These indicators may</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 268411px"><NOBR>be set and 
tested explicitly. In addition, the integer expression <FONT face=Courier>errno 
</FONT>(declared in <FONT face=Courier>&lt;errno.h&gt;</FONT>) may 
contain</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 268431px"><NOBR>an error 
number that gives further information about the most recent 
error.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 268471px"><NOBR><I>void 
clearerr(FILE *stream)</I></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 268491px"><NOBR>clearerr <FONT 
face=Times>clears the end of file and error indicators for </FONT>stream<FONT 
face=Times>.</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 268530px"><NOBR><I>int 
feof(FILE *stream)</I></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 268550px"><NOBR>feof <FONT 
face=Times>returns non−zero if the end of file indicator for </FONT>stream <FONT 
face=Times>is set.</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 267517px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 268597px"><NOBR>B.1.5 Direct 
Input and Output Functions</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 268597px"><NOBR>226</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 268663px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=227><B>Page 227</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 268756px"><NOBR><I>int 
ferror(FILE *stream)</I></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 268776px"><NOBR>ferror <FONT 
face=Times>returns non−zero if the error indicator for </FONT>stream <FONT 
face=Times>is set.</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 268816px"><NOBR><I>void 
perror(const char *s)</I></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 268835px"><NOBR>perror(s) 
<FONT face=Times>prints </FONT>s <FONT face=Times>and an implementation−defined 
error message corresponding to the integer in</FONT></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 268855px"><NOBR>errno<FONT 
face=Times>, as if by</FONT></NOBR></DIV>
<DIV 
style="LEFT: 202px; POSITION: absolute; TOP: 268875px"><NOBR>fprintf(stderr, 
"%s: %s\n", s, "<I><FONT face=Times>error 
message</FONT></I>");</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 268914px"><NOBR>See <FONT 
face=Courier>strerror </FONT>in <A 
href="#227"></A><FONT 
face=Times color=#0000ff><A 
href="#227">Section 
B.3</A></FONT>.</NOBR></DIV></SPAN></FONT><FONT face=Times size=4><SPAN 
style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 268955px"><NOBR><B>B.2 
Character Class Tests: &lt;ctype.h&gt;</B></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 269002px"><NOBR>The header 
<FONT face=Courier>&lt;ctype.h&gt; </FONT>declares functions for testing 
characters. For each function, the argument list is 
an</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 269022px"><NOBR>int<FONT 
face=Times>, whose value must be </FONT>EOF <FONT face=Times>or representable as 
an </FONT>unsigned char<FONT face=Times>, and the return value is an 
</FONT>int<FONT face=Times>.</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 269041px"><NOBR>The functions 
return non−zero (true) if the argument <FONT face=Courier>c </FONT>satisfies the 
condition described, and zero if not.</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 110px; POSITION: absolute; TOP: 269084px"><NOBR>isalpha(c) 
isupper(c) <FONT face=Times>or </FONT>islower(c) <FONT face=Times>is 
true</FONT></NOBR></DIV>
<DIV style="LEFT: 110px; POSITION: absolute; TOP: 269110px"><NOBR>iscntrl(c) 
<FONT face=Times>control character</FONT></NOBR></DIV>
<DIV style="LEFT: 110px; POSITION: absolute; TOP: 269136px"><NOBR>isdigit(c) 
<FONT face=Times>decimal digit</FONT></NOBR></DIV>
<DIV style="LEFT: 110px; POSITION: absolute; TOP: 269163px"><NOBR>isgraph(c) 
<FONT face=Times>printing character except space</FONT></NOBR></DIV>
<DIV style="LEFT: 110px; POSITION: absolute; TOP: 269189px"><NOBR>islower(c) 
<FONT face=Times>lower−case letter</FONT></NOBR></DIV>
<DIV style="LEFT: 110px; POSITION: absolute; TOP: 269215px"><NOBR>isprint(c) 
<FONT face=Times>printing character including space</FONT></NOBR></DIV>
<DIV style="LEFT: 110px; POSITION: absolute; TOP: 269241px"><NOBR>ispunct(c) 
<FONT face=Times>printing character except space or letter or 
digit</FONT></NOBR></DIV>
<DIV style="LEFT: 110px; POSITION: absolute; TOP: 269268px"><NOBR>isspace(c) 
<FONT face=Times>space, formfeed, newline, carriage return, tab, vertical 
tab</FONT></NOBR></DIV>
<DIV style="LEFT: 110px; POSITION: absolute; TOP: 269294px"><NOBR>isupper(c) 
<FONT face=Times>upper−case letter</FONT></NOBR></DIV>
<DIV style="LEFT: 110px; POSITION: absolute; TOP: 269320px"><NOBR>isxdigit(c) 
<FONT face=Times>hexadecimal digit</FONT></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 269343px"><NOBR>In the 
seven−bit ASCII character set, the printing characters are <FONT 
face=Courier>0x20 (' ') </FONT>to <FONT face=Courier>0x7E ('−')</FONT>; the 
control</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 269363px"><NOBR>characters are 
0 <FONT face=Courier>NUL </FONT>to <FONT face=Courier>0x1F </FONT>(US), and 
<FONT face=Courier>0x7F </FONT>(DEL).</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 269403px"><NOBR>In addition, 
there are two functions that convert the case of 
letters:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 110px; POSITION: absolute; TOP: 269455px"><NOBR>int 
toupper(c)</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 256px; POSITION: absolute; TOP: 269444px"><NOBR>convert <FONT 
face=Courier>c </FONT>to</NOBR></DIV>
<DIV style="LEFT: 256px; POSITION: absolute; TOP: 269464px"><NOBR>upper 
case</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 269488px"><NOBR>If <FONT 
face=Courier>c </FONT>is an upper−case letter, <FONT face=Courier>tolower(c) 
</FONT>returns the corresponding lower−case letter, <FONT 
face=Courier>toupper(c)</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 269508px"><NOBR>returns the 
corresponding upper−case letter; otherwise it returns <FONT 
face=Courier>c</FONT>.</NOBR></DIV></SPAN></FONT><FONT face=Times size=4><SPAN 
style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 269549px"><NOBR><B>B.3 String 
Functions: &lt;string.h&gt;</B></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 269596px"><NOBR>There are two 
groups of string functions defined in the header <FONT 
face=Courier>&lt;string.h&gt;</FONT>. The first have names 
beginning</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 269616px"><NOBR>with <FONT 
face=Courier>str</FONT>; the second have names beginning with <FONT 
face=Courier>mem</FONT>. Except for <FONT face=Courier>memmove</FONT>, the 
behavior is undefined if</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 269636px"><NOBR>copying takes 
place between overlapping objects. Comparison functions treat arguments as <FONT 
face=Courier>unsigned</FONT></NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 269656px"><NOBR>char <FONT 
face=Times>arrays.</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 269695px"><NOBR>In the 
following table, variables <FONT face=Courier>s </FONT>and <FONT face=Courier>t 
</FONT>are of type <FONT face=Courier>char *</FONT>; <FONT face=Courier>cs 
</FONT>and <FONT face=Courier>ct </FONT>are of type <FONT face=Courier>const 
char *</FONT>; <FONT face=Courier>n </FONT>is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 269715px"><NOBR>of type <FONT 
face=Courier>size_t</FONT>; and <FONT face=Courier>c </FONT>is an <FONT 
face=Courier>int </FONT>converted to <FONT 
face=Courier>char</FONT>.</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 268705px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 269785px"><NOBR>B.2 Character 
Class Tests: &lt;ctype.h&gt;</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 269785px"><NOBR>227</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 269851px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=228><B>Page 228</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 110px; POSITION: absolute; TOP: 269946px"><NOBR>char 
*strncpy(s,ct,n) <FONT face=Times>copy at most 
</FONT>n</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 325px; POSITION: absolute; TOP: 269965px"><NOBR>characters of 
string <FONT face=Courier>ct </FONT>to</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 325px; POSITION: absolute; TOP: 269986px"><NOBR>s<FONT 
face=Times>; return </FONT>s<FONT face=Times>. Pad with</FONT></NOBR></DIV>
<DIV style="LEFT: 325px; POSITION: absolute; TOP: 270006px"><NOBR>'\0'<FONT 
face=Times>'s if </FONT>ct <FONT face=Times>has 
fewer</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 325px; POSITION: absolute; TOP: 270025px"><NOBR>than <FONT 
face=Courier>n </FONT>characters.</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 110px; POSITION: absolute; TOP: 270062px"><NOBR>char 
*strcat(s,ct)</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 325px; POSITION: absolute; TOP: 270051px"><NOBR>concatenate 
string <FONT face=Courier>ct </FONT>to</NOBR></DIV>
<DIV style="LEFT: 325px; POSITION: absolute; TOP: 270071px"><NOBR>end of string 
<FONT face=Courier>s</FONT>; return <FONT 
face=Courier>s</FONT>.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 110px; POSITION: absolute; TOP: 270127px"><NOBR>char 
*strncat(s,ct,n)</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 325px; POSITION: absolute; TOP: 270097px"><NOBR>concatenate at 
most <FONT face=Courier>n</FONT></NOBR></DIV>
<DIV style="LEFT: 325px; POSITION: absolute; TOP: 270117px"><NOBR>characters of 
string <FONT face=Courier>ct </FONT>to</NOBR></DIV>
<DIV style="LEFT: 325px; POSITION: absolute; TOP: 270136px"><NOBR>string <FONT 
face=Courier>s</FONT>, terminate <FONT face=Courier>s</FONT></NOBR></DIV>
<DIV style="LEFT: 325px; POSITION: absolute; TOP: 270156px"><NOBR>with <FONT 
face=Courier>'\0'</FONT>; return <FONT 
face=Courier>s</FONT>.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 110px; POSITION: absolute; TOP: 270213px"><NOBR>int 
strcmp(cs,ct)</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 325px; POSITION: absolute; TOP: 270183px"><NOBR>compare string 
<FONT face=Courier>cs </FONT>to</NOBR></DIV>
<DIV style="LEFT: 325px; POSITION: absolute; TOP: 270202px"><NOBR>string <FONT 
face=Courier>ct</FONT>, return &lt;0 if</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 325px; POSITION: absolute; TOP: 270223px"><NOBR>cs&lt;ct<FONT 
face=Times>, 0 if </FONT>cs==ct<FONT face=Times>, 
or</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 325px; POSITION: absolute; TOP: 270242px"><NOBR>&gt;0 if <FONT 
face=Courier>cs&gt;ct</FONT>.</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 110px; POSITION: absolute; TOP: 270309px"><NOBR>int 
strncmp(cs,ct,n)</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 325px; POSITION: absolute; TOP: 270268px"><NOBR>compare at 
most <FONT face=Courier>n</FONT></NOBR></DIV>
<DIV style="LEFT: 325px; POSITION: absolute; TOP: 270288px"><NOBR>characters of 
string <FONT face=Courier>cs </FONT>to</NOBR></DIV>
<DIV style="LEFT: 325px; POSITION: absolute; TOP: 270308px"><NOBR>string <FONT 
face=Courier>ct</FONT>; return &lt;0 if</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 325px; POSITION: absolute; TOP: 270328px"><NOBR>cs&lt;ct<FONT 
face=Times>, 0 if </FONT>cs==ct<FONT face=Times>, 
or</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 325px; POSITION: absolute; TOP: 270347px"><NOBR>&gt;0 if <FONT 
face=Courier>cs&gt;ct</FONT>.</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 110px; POSITION: absolute; TOP: 270394px"><NOBR>char 
*strchr(cs,c)</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 325px; POSITION: absolute; TOP: 270374px"><NOBR>return pointer 
to first</NOBR></DIV>
<DIV style="LEFT: 325px; POSITION: absolute; TOP: 270393px"><NOBR>occurrence of 
<FONT face=Courier>c </FONT>in <FONT face=Courier>cs 
</FONT>or</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 325px; POSITION: absolute; TOP: 270414px"><NOBR>NULL <FONT 
face=Times>if not present.</FONT></NOBR></DIV>
<DIV style="LEFT: 110px; POSITION: absolute; TOP: 270460px"><NOBR>char 
*strrchr(cs,c)</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 325px; POSITION: absolute; TOP: 270439px"><NOBR>return pointer 
to last</NOBR></DIV>
<DIV style="LEFT: 325px; POSITION: absolute; TOP: 270459px"><NOBR>occurrence of 
<FONT face=Courier>c </FONT>in <FONT face=Courier>cs 
</FONT>or</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 325px; POSITION: absolute; TOP: 270480px"><NOBR>NULL <FONT 
face=Times>if not present.</FONT></NOBR></DIV>
<DIV style="LEFT: 110px; POSITION: absolute; TOP: 270526px"><NOBR>size_t 
strspn(cs,ct)</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 325px; POSITION: absolute; TOP: 270505px"><NOBR>return length 
of prefix of</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 325px; POSITION: absolute; TOP: 270526px"><NOBR>cs <FONT 
face=Times>consisting of</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 325px; POSITION: absolute; TOP: 270545px"><NOBR>characters in 
<FONT face=Courier>ct</FONT>.</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 110px; POSITION: absolute; TOP: 270592px"><NOBR>size_t 
strcspn(cs,ct)</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 325px; POSITION: absolute; TOP: 270571px"><NOBR>return length 
of prefix of</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 325px; POSITION: absolute; TOP: 270592px"><NOBR>cs <FONT 
face=Times>consisting of</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 325px; POSITION: absolute; TOP: 270611px"><NOBR>characters 
<I>not </I>in <FONT face=Courier>ct</FONT>.</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 110px; POSITION: absolute; TOP: 270677px"><NOBR>char 
*strpbrk(cs,ct)</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 325px; POSITION: absolute; TOP: 270637px"><NOBR>return pointer 
to first</NOBR></DIV>
<DIV style="LEFT: 325px; POSITION: absolute; TOP: 270657px"><NOBR>occurrence in 
string <FONT face=Courier>cs</FONT></NOBR></DIV>
<DIV style="LEFT: 325px; POSITION: absolute; TOP: 270677px"><NOBR>of any 
character string</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 325px; POSITION: absolute; TOP: 270697px"><NOBR>ct<FONT 
face=Times>, or </FONT>NULL <FONT face=Times>if 
not</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 325px; POSITION: absolute; TOP: 270716px"><NOBR>present.</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 110px; POSITION: absolute; TOP: 270773px"><NOBR>char 
*strstr(cs,ct)</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 325px; POSITION: absolute; TOP: 270742px"><NOBR>return pointer 
to first</NOBR></DIV>
<DIV style="LEFT: 325px; POSITION: absolute; TOP: 270762px"><NOBR>occurrence of 
string <FONT face=Courier>ct</FONT></NOBR></DIV>
<DIV style="LEFT: 325px; POSITION: absolute; TOP: 270782px"><NOBR>in <FONT 
face=Courier>cs</FONT>, or <FONT face=Courier>NULL </FONT>if not</NOBR></DIV>
<DIV 
style="LEFT: 325px; POSITION: absolute; TOP: 270802px"><NOBR>present.</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 110px; POSITION: absolute; TOP: 270829px"><NOBR>size_t 
strlen(cs)</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 325px; POSITION: absolute; TOP: 270828px"><NOBR>return length 
of <FONT face=Courier>cs</FONT>.</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 110px; POSITION: absolute; TOP: 270885px"><NOBR>char 
*strerror(n)</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 325px; POSITION: absolute; TOP: 270854px"><NOBR>return pointer 
to</NOBR></DIV>
<DIV 
style="LEFT: 325px; POSITION: absolute; TOP: 270874px"><NOBR>implementation−defined</NOBR></DIV>
<DIV style="LEFT: 325px; POSITION: absolute; TOP: 270894px"><NOBR>string 
corresponding to</NOBR></DIV>
<DIV style="LEFT: 325px; POSITION: absolute; TOP: 270914px"><NOBR>error <FONT 
face=Courier>n</FONT>.</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 269893px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 270973px"><NOBR>B.2 Character 
Class Tests: &lt;ctype.h&gt;</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 270973px"><NOBR>228</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 271039px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=229><B>Page 229</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 110px; POSITION: absolute; TOP: 271134px"><NOBR>char 
*strtok(s,ct)</NOBR></DIV>
<DIV style="LEFT: 325px; POSITION: absolute; TOP: 271134px"><NOBR>strtok <FONT 
face=Times>searches </FONT>s <FONT 
face=Times>for</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 325px; POSITION: absolute; TOP: 271153px"><NOBR>tokens 
delimited by</NOBR></DIV>
<DIV style="LEFT: 325px; POSITION: absolute; TOP: 271173px"><NOBR>characters 
from <FONT face=Courier>ct</FONT>; see</NOBR></DIV>
<DIV 
style="LEFT: 325px; POSITION: absolute; TOP: 271193px"><NOBR>below.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 271217px"><NOBR>A sequence of 
calls of <FONT face=Courier>strtok(s,ct) </FONT>splits <FONT face=Courier>s 
</FONT>into tokens, each delimited by a character from <FONT 
face=Courier>ct</FONT>. The first</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 271237px"><NOBR>call in a 
sequence has a non−<FONT face=Courier>NULL s</FONT>, it finds the first token in 
<FONT face=Courier>s </FONT>consisting of characters not in <FONT 
face=Courier>ct</FONT>; it</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 271256px"><NOBR>terminates 
that by overwriting the next character of <FONT face=Courier>s </FONT>with <FONT 
face=Courier>'\0' </FONT>and returns a pointer to the token. Each</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 271276px"><NOBR>subsequent 
call, indicated by a <FONT face=Courier>NULL </FONT>value of <FONT 
face=Courier>s</FONT>, returns the next such token, searching from just past the 
end</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 271296px"><NOBR>of the 
previous one. <FONT face=Courier>strtok </FONT>returns <FONT face=Courier>NULL 
</FONT>when no further token is found. The string <FONT face=Courier>ct 
</FONT>may be different on</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 271316px"><NOBR>each 
call.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 271355px"><NOBR>The <FONT 
face=Courier>mem... </FONT>functions are meant for manipulating objects as 
character arrays; the intent is an interface to</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 271375px"><NOBR>efficient 
routines. In the following table, <FONT face=Courier>s </FONT>and <FONT 
face=Courier>t </FONT>are of type <FONT face=Courier>void *</FONT>; <FONT 
face=Courier>cs </FONT>and <FONT face=Courier>ct </FONT>are of type <FONT 
face=Courier>const void</FONT></NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 271396px"><NOBR>*<FONT 
face=Times>; </FONT>n <FONT face=Times>is of type </FONT>size_t<FONT 
face=Times>; and </FONT>c <FONT face=Times>is an </FONT>int <FONT 
face=Times>converted to an </FONT>unsigned char<FONT 
face=Times>.</FONT></NOBR></DIV>
<DIV style="LEFT: 110px; POSITION: absolute; TOP: 271448px"><NOBR>void 
*memmove(s,ct,n)</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 325px; POSITION: absolute; TOP: 271437px"><NOBR>same as <FONT 
face=Courier>memcpy </FONT>except that it works even if the objects</NOBR></DIV>
<DIV 
style="LEFT: 325px; POSITION: absolute; TOP: 271457px"><NOBR>overlap.</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 110px; POSITION: absolute; TOP: 271494px"><NOBR>int 
memcmp(cs,ct,n)</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 325px; POSITION: absolute; TOP: 271483px"><NOBR>compare the 
first <FONT face=Courier>n </FONT>characters of <FONT face=Courier>cs 
</FONT>with <FONT face=Courier>ct</FONT>; return as</NOBR></DIV>
<DIV style="LEFT: 325px; POSITION: absolute; TOP: 271503px"><NOBR>with <FONT 
face=Courier>strcmp</FONT>.</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 110px; POSITION: absolute; TOP: 271540px"><NOBR>void 
*memchr(cs,c,n)</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 325px; POSITION: absolute; TOP: 271529px"><NOBR>return pointer 
to first occurrence of character <FONT face=Courier>c </FONT>in <FONT 
face=Courier>cs</FONT>, or</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 325px; POSITION: absolute; TOP: 271550px"><NOBR>NULL <FONT 
face=Times>if not present among the first </FONT>n <FONT 
face=Times>characters.</FONT></NOBR></DIV>
<DIV style="LEFT: 110px; POSITION: absolute; TOP: 271576px"><NOBR>void 
*memset(s,c,n)</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 325px; POSITION: absolute; TOP: 271575px"><NOBR>place 
character <FONT face=Courier>c </FONT>into first <FONT face=Courier>n 
</FONT>characters of <FONT face=Courier>s</FONT>, return <FONT 
face=Courier>s</FONT>.</NOBR></DIV></SPAN></FONT><FONT face=Times size=4><SPAN 
style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 271601px"><NOBR><B>B.4 
Mathematical Functions: &lt;math.h&gt;</B></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 271647px"><NOBR>The header 
<FONT face=Courier>&lt;math.h&gt; </FONT>declares mathematical functions and 
macros.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 271687px"><NOBR>The macros 
<FONT face=Courier>EDOM </FONT>and <FONT face=Courier>ERANGE </FONT>(found in 
<FONT face=Courier>&lt;errno.h&gt;</FONT>) are non−zero integral constants that 
are used to</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 271707px"><NOBR>signal domain 
and range errors for the functions; <FONT face=Courier>HUGE_VAL </FONT>is a 
positive <FONT face=Courier>double </FONT>value. A <I>domain 
error</I></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 271727px"><NOBR>occurs if an 
argument is outside the domain over which the function is defined. On a domain 
error, <FONT face=Courier>errno </FONT>is</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 271746px"><NOBR>set to <FONT 
face=Courier>EDOM</FONT>; the return value is implementation−defined. A <I>range 
error </I>occurs if the result of the function</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 271766px"><NOBR>cannot be 
represented as a <FONT face=Courier>double</FONT>. If the result overflows, the 
function returns <FONT face=Courier>HUGE_VAL </FONT>with the right</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 271786px"><NOBR>sign, and 
<FONT face=Courier>errno </FONT>is set to <FONT face=Courier>ERANGE</FONT>. If 
the result underflows, the function returns zero; whether <FONT 
face=Courier>errno </FONT>is set</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 271806px"><NOBR>to <FONT 
face=Courier>ERANGE </FONT>is implementation−defined.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 271845px"><NOBR>In the 
following table, <FONT face=Courier>x </FONT>and <FONT face=Courier>y </FONT>are 
of type <FONT face=Courier>double</FONT>, <FONT face=Courier>n </FONT>is an 
<FONT face=Courier>int</FONT>, and all functions return <FONT 
face=Courier>double</FONT>. Angles</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 271865px"><NOBR>for 
trigonometric functions are expressed in 
radians.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 110px; POSITION: absolute; TOP: 271908px"><NOBR>cos(x)</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 307px; POSITION: absolute; TOP: 271907px"><NOBR>cosine of 
<I>x</I></NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 110px; POSITION: absolute; TOP: 271934px"><NOBR>tan(x)</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 307px; POSITION: absolute; TOP: 271933px"><NOBR>tangent of 
<I>x</I></NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 110px; POSITION: absolute; TOP: 271960px"><NOBR>asin(x)</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 307px; POSITION: absolute; TOP: 271959px"><NOBR>sin</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 326px; POSITION: absolute; TOP: 271955px"><NOBR>−1</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 338px; POSITION: absolute; TOP: 271959px"><NOBR>(x) in range 
[−pi/2,pi/2], x in [−1,1].</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 110px; POSITION: absolute; TOP: 271987px"><NOBR>acos(x)</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 307px; POSITION: absolute; TOP: 271986px"><NOBR>cos</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 329px; POSITION: absolute; TOP: 271982px"><NOBR>−1</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 341px; POSITION: absolute; TOP: 271986px"><NOBR>(x) in range 
[0,pi], x in [−1,1].</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 110px; POSITION: absolute; TOP: 272013px"><NOBR>atan(x)</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 307px; POSITION: absolute; TOP: 272012px"><NOBR>tan</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 327px; POSITION: absolute; TOP: 272008px"><NOBR>−1</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 339px; POSITION: absolute; TOP: 272012px"><NOBR>(x) in range 
[−pi/2,pi/2].</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 110px; POSITION: absolute; TOP: 272039px"><NOBR>atan2(y,x)</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 307px; POSITION: absolute; TOP: 272038px"><NOBR>tan</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 327px; POSITION: absolute; TOP: 272034px"><NOBR>−1</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 339px; POSITION: absolute; TOP: 272038px"><NOBR>(y/x) in range 
[−pi,pi].</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 110px; POSITION: absolute; TOP: 272065px"><NOBR>sinh(x)</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 307px; POSITION: absolute; TOP: 272064px"><NOBR>hyperbolic 
sine of <I>x</I></NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 110px; POSITION: absolute; TOP: 272092px"><NOBR>cosh(x)</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 307px; POSITION: absolute; TOP: 272091px"><NOBR>hyperbolic 
cosine of <I>x</I></NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 110px; POSITION: absolute; TOP: 272118px"><NOBR>tanh(x)</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 307px; POSITION: absolute; TOP: 272117px"><NOBR>hyperbolic 
tangent of <I>x</I></NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 271081px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 272161px"><NOBR>B.4 
Mathematical Functions: &lt;math.h&gt;</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 272161px"><NOBR>229</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 272227px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=230><B>Page 230</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 110px; POSITION: absolute; TOP: 272322px"><NOBR>exp(x)</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 307px; POSITION: absolute; TOP: 272321px"><NOBR>exponential 
function <I>e</I></NOBR></DIV></SPAN></FONT><FONT face=Times size=2><SPAN 
style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 455px; POSITION: absolute; TOP: 272317px"><NOBR><I>x</I></NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 110px; POSITION: absolute; TOP: 272349px"><NOBR>log(x)</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 307px; POSITION: absolute; TOP: 272348px"><NOBR>natural 
logarithm ln(x), <I>x</I>&gt;0.</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 110px; POSITION: absolute; TOP: 272375px"><NOBR>log10(x)</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 307px; POSITION: absolute; TOP: 272374px"><NOBR>base 10 
logarithm log</NOBR></DIV></SPAN></FONT><FONT face=Times size=2><SPAN 
style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 450px; POSITION: absolute; TOP: 272380px"><NOBR>10</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 462px; POSITION: absolute; TOP: 272374px"><NOBR>(x), 
<I>x</I>&gt;0.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 110px; POSITION: absolute; TOP: 272411px"><NOBR>pow(x,y)</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 307px; POSITION: absolute; TOP: 272400px"><NOBR><I>x</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 314px; POSITION: absolute; TOP: 272396px"><NOBR><I>y</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 319px; POSITION: absolute; TOP: 272400px"><NOBR>. A domain 
error occurs if <I>x=0 </I>and <I>y&lt;=0</I>, or if</NOBR></DIV>
<DIV style="LEFT: 307px; POSITION: absolute; TOP: 272420px"><NOBR><I>x&lt;0 
</I>and <I>y </I>is not an integer.</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 110px; POSITION: absolute; TOP: 272447px"><NOBR>sqrt(x)</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 307px; POSITION: absolute; TOP: 272446px"><NOBR>sqare root of 
x, x&gt;=0.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 110px; POSITION: absolute; TOP: 272473px"><NOBR>ceil(x)</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 307px; POSITION: absolute; TOP: 272472px"><NOBR>smallest 
integer not less than <FONT face=Courier>x</FONT>, as a <FONT 
face=Courier>double</FONT>.</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 110px; POSITION: absolute; TOP: 272500px"><NOBR>floor(x)</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 307px; POSITION: absolute; TOP: 272499px"><NOBR>largest 
integer not greater than <FONT face=Courier>x</FONT>, as a <FONT 
face=Courier>double</FONT>.</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 110px; POSITION: absolute; TOP: 272526px"><NOBR>fabs(x)</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 307px; POSITION: absolute; TOP: 272525px"><NOBR>absolute value 
|x|</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 110px; POSITION: absolute; TOP: 272552px"><NOBR>ldexp(x,n)</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 307px; POSITION: absolute; TOP: 272551px"><NOBR>x*2</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 332px; POSITION: absolute; TOP: 272547px"><NOBR>n</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 110px; POSITION: absolute; TOP: 272608px"><NOBR>frexp(x, int 
*ip)</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 307px; POSITION: absolute; TOP: 272577px"><NOBR>splits <I>x 
</I>into a normalized fraction in the interval</NOBR></DIV>
<DIV style="LEFT: 307px; POSITION: absolute; TOP: 272597px"><NOBR>[1/2,1) which 
is returned, and a power of 2,</NOBR></DIV>
<DIV style="LEFT: 307px; POSITION: absolute; TOP: 272617px"><NOBR>which is 
stored in <FONT face=Courier>*exp</FONT>. If <I>x </I>is zero, both 
parts</NOBR></DIV>
<DIV style="LEFT: 307px; POSITION: absolute; TOP: 272637px"><NOBR>of the result 
are zero.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 110px; POSITION: absolute; TOP: 272684px"><NOBR>modf(x, double 
*ip)</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 307px; POSITION: absolute; TOP: 272663px"><NOBR>splits <I>x 
</I>into integral and fractional parts, each</NOBR></DIV>
<DIV style="LEFT: 307px; POSITION: absolute; TOP: 272683px"><NOBR>with the same 
sign as <I>x</I>. It stores the integral part</NOBR></DIV>
<DIV style="LEFT: 307px; POSITION: absolute; TOP: 272703px"><NOBR>in <FONT 
face=Courier>*ip</FONT>, and returns the fractional 
part.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 110px; POSITION: absolute; TOP: 272750px"><NOBR>fmod(x,y)</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 307px; POSITION: absolute; TOP: 272729px"><NOBR>floating−point 
remainder of <I>x/y</I>, with the same</NOBR></DIV>
<DIV style="LEFT: 307px; POSITION: absolute; TOP: 272749px"><NOBR>sign as 
<I>x</I>. If <I>y </I>is zero, the result is</NOBR></DIV>
<DIV 
style="LEFT: 307px; POSITION: absolute; TOP: 272768px"><NOBR>implementation−defined.</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=4><SPAN style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 272794px"><NOBR><B>B.5 Utility 
Functions: &lt;stdlib.h&gt;</B></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 272841px"><NOBR>The header 
<FONT face=Courier>&lt;stdlib.h&gt; </FONT>declares functions for number 
conversion, storage allocation, and similar 
tasks.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 272881px"><NOBR>double 
atof(const char *s)</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 272901px"><NOBR>atof <FONT 
face=Times>converts </FONT>s <FONT face=Times>to </FONT>double<FONT face=Times>; 
it is equivalent to </FONT>strtod(s, (char**)NULL)<FONT 
face=Times>.</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 272941px"><NOBR><I>int 
atoi(const char *s)</I></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 272960px"><NOBR>converts <FONT 
face=Courier>s </FONT>to <FONT face=Courier>int</FONT>; it is equivalent to 
<FONT face=Courier>(int)strtol(s, (char**)NULL, 
10)</FONT>.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 273000px"><NOBR><I>long 
atol(const char *s)</I></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 273019px"><NOBR>converts <FONT 
face=Courier>s </FONT>to <FONT face=Courier>long</FONT>; it is equivalent to 
<FONT face=Courier>strtol(s, (char**)NULL, 
10)</FONT>.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 273060px"><NOBR><I>double 
strtod(const char *s, char **endp)</I></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 273079px"><NOBR>strtod <FONT 
face=Times>converts the prefix of </FONT>s <FONT face=Times>to 
</FONT>double<FONT face=Times>, ignoring leading white space; it stores a 
pointer to any</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 273098px"><NOBR>unconverted 
suffix in <FONT face=Courier>*endp </FONT>unless <FONT face=Courier>endp 
</FONT>is <FONT face=Courier>NULL</FONT>. If the answer would overflow, <FONT 
face=Courier>HUGE_VAL </FONT>is</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 273118px"><NOBR>returned with 
the proper sign; if the answer would underflow, zero is returned. In either case 
<FONT face=Courier>errno</FONT></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 273138px"><NOBR>is set to 
<FONT face=Courier>ERANGE</FONT>.</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 273178px"><NOBR><I>long 
strtol(const char *s, char **endp, int base)</I></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 273198px"><NOBR>strtol <FONT 
face=Times>converts the prefix of </FONT>s <FONT face=Times>to </FONT>long<FONT 
face=Times>, ignoring leading white space; it stores a pointer to 
any</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 273217px"><NOBR>unconverted 
suffix in <FONT face=Courier>*endp </FONT>unless <FONT face=Courier>endp 
</FONT>is <FONT face=Courier>NULL</FONT>. If <FONT face=Courier>base </FONT>is 
between 2 and 36, conversion is done</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 273237px"><NOBR>assuming that 
the input is written in that base. If <FONT face=Courier>base </FONT>is zero, 
the base is 8, 10, or 16; leading 0</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 273257px"><NOBR>implies octal 
and leading <FONT face=Courier>0x </FONT>or <FONT face=Courier>0X 
</FONT>hexadecimal. Letters in either case represent digits from 10 
to</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 273277px"><NOBR>base−1<FONT 
face=Times>; a leading </FONT>0x <FONT face=Times>or </FONT>0X <FONT 
face=Times>is permitted in base 16. If the answer would overflow, 
</FONT>LONG_MAX <FONT face=Times>or</FONT></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 273297px"><NOBR>LONG_MIN <FONT 
face=Times>is returned, depending on the sign of the result, and </FONT>errno 
<FONT face=Times>is set to </FONT>ERANGE<FONT 
face=Times>.</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 272269px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 273349px"><NOBR>B.5 Utility 
Functions: &lt;stdlib.h&gt;</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 273349px"><NOBR>230</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 273415px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=231><B>Page 231</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 273508px"><NOBR><I>unsigned 
long strtoul(const char *s, char **endp, int base)</I></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 273528px"><NOBR>strtoul <FONT 
face=Times>is the same as </FONT>strtol <FONT face=Times>except that the result 
is </FONT>unsigned long <FONT face=Times>and the error value 
is</FONT></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 273548px"><NOBR>ULONG_MAX<FONT 
face=Times>.</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 273587px"><NOBR><I>int 
rand(void)</I></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 273607px"><NOBR>rand <FONT 
face=Times>returns a pseudo−random integer in the range 0 to 
</FONT>RAND_MAX<FONT face=Times>, which is at least 32767.</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 273647px"><NOBR><I>void 
srand(unsigned int seed)</I></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 273667px"><NOBR>srand <FONT 
face=Times>uses </FONT>seed <FONT face=Times>as the seed for a new sequence of 
pseudo−random numbers. The initial seed is 1.</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 273706px"><NOBR><I>void 
*calloc(size_t nobj, size_t size)</I></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 273726px"><NOBR>calloc <FONT 
face=Times>returns a pointer to space for an array of </FONT>nobj <FONT 
face=Times>objects, each of size </FONT>size<FONT face=Times>, or </FONT>NULL 
<FONT face=Times>if the</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 273745px"><NOBR>request cannot 
be satisfied. The space is initialized to zero 
bytes.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 273785px"><NOBR><I>void 
*malloc(size_t size)</I></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 273805px"><NOBR>malloc <FONT 
face=Times>returns a pointer to space for an object of size </FONT>size<FONT 
face=Times>, or </FONT>NULL <FONT face=Times>if the request cannot 
be</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 273824px"><NOBR>satisfied. The 
space is uninitialized.</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 273865px"><NOBR><I>void 
*realloc(void *p, size_t size)</I></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 273884px"><NOBR>realloc <FONT 
face=Times>changes the size of the object pointed to by </FONT>p <FONT 
face=Times>to </FONT>size<FONT face=Times>. The contents will be unchanged 
up</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 273903px"><NOBR>to the minimum 
of the old and new sizes. If the new size is larger, the new space is 
uninitialized.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 273924px"><NOBR>realloc <FONT 
face=Times>returns a pointer to the new space, or </FONT>NULL <FONT 
face=Times>if the request cannot be satisfied, in which case</FONT></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 273944px"><NOBR>*p <FONT 
face=Times>is unchanged.</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 273983px"><NOBR><I>void 
free(void *p)</I></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 274003px"><NOBR>free <FONT 
face=Times>deallocates the space pointed to by </FONT>p<FONT face=Times>; it 
does nothing if </FONT>p <FONT face=Times>is </FONT>NULL<FONT face=Times>. 
</FONT>p <FONT face=Times>must be a pointer to 
space</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 274022px"><NOBR>previously 
allocated by <FONT face=Courier>calloc</FONT>, <FONT face=Courier>malloc</FONT>, 
or <FONT face=Courier>realloc</FONT>.</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 274063px"><NOBR><I>void 
abort(void)</I></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 274082px"><NOBR>abort <FONT 
face=Times>causes the program to terminate abnormally, as if by 
</FONT>raise(SIGABRT)<FONT face=Times>.</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 274122px"><NOBR><I>void 
exit(int status)</I></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 274142px"><NOBR>exit <FONT 
face=Times>causes normal program termination. </FONT>atexit <FONT 
face=Times>functions are called in reverse order 
of</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 274161px"><NOBR>registration, 
open files are flushed, open streams are closed, and control is returned to 
the</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 274180px"><NOBR>environment. 
How <FONT face=Courier>status </FONT>is returned to the environment is 
implementation−dependent, but zero is</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 274200px"><NOBR>taken as 
successful termination. The values <FONT face=Courier>EXIT_SUCCESS </FONT>and 
<FONT face=Courier>EXIT_FAILURE </FONT>may also be</NOBR></DIV>
<DIV 
style="LEFT: 162px; POSITION: absolute; TOP: 274220px"><NOBR>used.</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 274261px"><NOBR><I>int 
atexit(void (*fcn)(void))</I></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 274280px"><NOBR>atexit <FONT 
face=Times>registers the function </FONT>fcn <FONT face=Times>to be called when 
the program terminates normally; it 
returns</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 274299px"><NOBR>non−zero if 
the registration cannot be made.</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 274340px"><NOBR><I>int 
system(const char *s)</I></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 274360px"><NOBR>system <FONT 
face=Times>passes the string </FONT>s <FONT face=Times>to the environment for 
execution. If </FONT>s <FONT face=Times>is </FONT>NULL<FONT face=Times>, 
</FONT>system <FONT face=Times>returns</FONT></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 274378px"><NOBR>non−zero if 
there is a command processor. If <FONT face=Courier>s </FONT>is not <FONT 
face=Courier>NULL</FONT>, the return value is</NOBR></DIV>
<DIV 
style="LEFT: 162px; POSITION: absolute; TOP: 274398px"><NOBR>implementation−dependent.</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 274439px"><NOBR><I>char 
*getenv(const char *name)</I></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 274459px"><NOBR>getenv <FONT 
face=Times>returns the environment string associated with </FONT>name<FONT 
face=Times>, or </FONT>NULL <FONT face=Times>if no string exists. Details 
are</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 162px; POSITION: absolute; TOP: 274477px"><NOBR>implementation−dependent.</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 274497px"><NOBR>void 
*bsearch(const void *key, const void *base,</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 273457px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 274537px"><NOBR>B.5 Utility 
Functions: &lt;stdlib.h&gt;</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 274537px"><NOBR>231</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 274603px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=232><B>Page 232</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 278px; POSITION: absolute; TOP: 274695px"><NOBR>size_t n, 
size_t size,</NOBR></DIV>
<DIV style="LEFT: 278px; POSITION: absolute; TOP: 274712px"><NOBR>int 
(*cmp)(const void *keyval, const void *datum))</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 274749px"><NOBR>bsearch <FONT 
face=Times>searches </FONT>base[0]...base[n−1] <FONT face=Times>for an item that 
matches </FONT>*key<FONT face=Times>. The function 
</FONT>cmp</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 274768px"><NOBR>must return 
negative if its first argument (the search key) is less than its second (a table 
entry), zero if</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 274788px"><NOBR>equal, and 
positive if greater. Items in the array <FONT face=Courier>base </FONT>must be 
in ascending order. <FONT face=Courier>bsearch </FONT>returns</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 274807px"><NOBR>a pointer to a 
matching item, or <FONT face=Courier>NULL </FONT>if none 
exists.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 274827px"><NOBR>void 
qsort(void *base, size_t n, size_t size,</NOBR></DIV>
<DIV style="LEFT: 253px; POSITION: absolute; TOP: 274844px"><NOBR>int 
(*cmp)(const void *, const void *))</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 274881px"><NOBR>qsort <FONT 
face=Times>sorts into ascending order an array </FONT>base[0]...base[n−1] <FONT 
face=Times>of objects of size </FONT>size<FONT face=Times>. 
The</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 274900px"><NOBR>comparison 
function <FONT face=Courier>cmp </FONT>is as in <FONT 
face=Courier>bsearch</FONT>.</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 274940px"><NOBR><I>int abs(int 
n)</I></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 274960px"><NOBR>abs <FONT 
face=Times>returns the absolute value of its </FONT>int <FONT 
face=Times>argument.</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 275000px"><NOBR><I>long 
labs(long n)</I></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 275020px"><NOBR>labs <FONT 
face=Times>returns the absolute value of its </FONT>long <FONT 
face=Times>argument.</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 275059px"><NOBR><I>div_t 
div(int num, int denom)</I></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 275079px"><NOBR>div <FONT 
face=Times>computes the quotient and remainder of </FONT>num/denom<FONT 
face=Times>. The results are stored in the 
</FONT>int</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 275098px"><NOBR>members <FONT 
face=Courier>quot </FONT>and <FONT face=Courier>rem </FONT>of a structure of 
type <FONT face=Courier>div_t</FONT>.</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 275138px"><NOBR><I>ldiv_t 
ldiv(long num, long denom)</I></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 275158px"><NOBR>ldiv <FONT 
face=Times>computes the quotient and remainder of </FONT>num/denom<FONT 
face=Times>. The results are stored in the 
</FONT>long</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 275177px"><NOBR>members <FONT 
face=Courier>quot </FONT>and <FONT face=Courier>rem </FONT>of a structure of 
type <FONT face=Courier>ldiv_t</FONT>.</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=4><SPAN style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 275218px"><NOBR><B>B.6 
Diagnostics: &lt;assert.h&gt;</B></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 275265px"><NOBR>The <FONT 
face=Courier>assert </FONT>macro is used to add diagnostics to 
programs:</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 128px; POSITION: absolute; TOP: 275305px"><NOBR>void 
assert(int <I>expression</I>)</NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 275344px"><NOBR>If 
<I>expression </I>is zero when</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 128px; POSITION: absolute; TOP: 275385px"><NOBR>assert(<I>expression</I>)</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 275423px"><NOBR>is executed, 
the <FONT face=Courier>assert </FONT>macro will print on <FONT 
face=Courier>stderr </FONT>a message, such as</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 128px; POSITION: absolute; TOP: 275464px"><NOBR>Assertion 
failed: <I><FONT face=Times>expression</FONT></I><FONT face=Times>, </FONT>file 
<I><FONT face=Times>filename</FONT></I><FONT face=Times>, </FONT>line <I><FONT 
face=Times>nnn</FONT></I></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 275503px"><NOBR>It then calls 
<FONT face=Courier>abort </FONT>to terminate execution. The source filename and 
line number come from the preprocessor</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 275522px"><NOBR>macros <FONT 
face=Courier>__FILE__ </FONT>and <FONT 
face=Courier>__LINE__</FONT>.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 275562px"><NOBR>If <FONT 
face=Courier>NDEBUG </FONT>is defined at the time <FONT 
face=Courier>&lt;assert.h&gt; </FONT>is included, the assert macro is 
ignored.</NOBR></DIV></SPAN></FONT><FONT face=Times size=4><SPAN 
style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 275603px"><NOBR><B>B.7 
Variable Argument Lists: &lt;stdarg.h&gt;</B></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 275650px"><NOBR>The header 
<FONT face=Courier>&lt;stdarg.h&gt; </FONT>provides facilities for stepping 
through a list of function arguments of unknown</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 275670px"><NOBR>number and 
type.</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 274645px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 275725px"><NOBR>B.6 
Diagnostics: &lt;assert.h&gt;</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 275725px"><NOBR>232</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 275791px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=233><B>Page 233</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 275883px"><NOBR>Suppose <FONT 
face=Courier>lastarg </FONT>is the last named parameter of a function <FONT 
face=Courier>f </FONT>with a variable number of arguments. Then</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 275903px"><NOBR>declare within 
<FONT face=Courier>f </FONT>a variable of type <FONT face=Courier>va_list 
</FONT>that will point to each argument in turn:</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 275942px"><NOBR>va_list 
ap;</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 275980px"><NOBR>ap <FONT 
face=Times>must be initialized once with the macro </FONT>va_start <FONT 
face=Times>before any unnamed argument is accessed:</FONT></NOBR></DIV>
<DIV 
style="LEFT: 128px; POSITION: absolute; TOP: 276019px"><NOBR>va_start(va_list 
ap, <I><FONT face=Times>lastarg</FONT></I>);</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 276058px"><NOBR>Thereafter, 
each execution of the macro <FONT face=Courier>va_arg </FONT>will produce a 
value that has the type and value of the next</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 276078px"><NOBR>unnamed 
argument, and will also modify <FONT face=Courier>ap </FONT>so the next use of 
<FONT face=Courier>va_arg </FONT>returns the next argument:</NOBR></DIV>
<DIV style="LEFT: 128px; POSITION: absolute; TOP: 276118px"><NOBR><I>type 
</I><FONT face=Courier>va_arg(va_list ap, </FONT><I>type</I><FONT 
face=Courier>);</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 276157px"><NOBR>The 
macro</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 133px; POSITION: absolute; TOP: 276197px"><NOBR>void 
va_end(va_list ap);</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 276233px"><NOBR>must be called 
once after the arguments have been processed but before <FONT face=Courier>f 
</FONT>is exited.</NOBR></DIV></SPAN></FONT><FONT face=Times size=4><SPAN 
style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 276274px"><NOBR><B>B.8 
Non−local Jumps: &lt;setjmp.h&gt;</B></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 276321px"><NOBR>The 
declarations in <FONT face=Courier>&lt;setjmp.h&gt; </FONT>provide a way to 
avoid the normal function call and return sequence,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 276341px"><NOBR>typically to 
permit an immediate return from a deeply nested function 
call.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 276381px"><NOBR><I>int 
setjmp(jmp_buf env)</I></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 276400px"><NOBR>The macro 
<FONT face=Courier>setjmp </FONT>saves state information in <FONT 
face=Courier>env </FONT>for use by <FONT face=Courier>longjmp</FONT>. The return 
is zero from a</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 276420px"><NOBR>direct call of 
<FONT face=Courier>setjmp</FONT>, and non−zero from a subsequent call of <FONT 
face=Courier>longjmp</FONT>. A call to <FONT face=Courier>setjmp 
</FONT>can</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 276440px"><NOBR>only occur in 
certain contexts, basically the test of <FONT face=Courier>if</FONT>, <FONT 
face=Courier>switch</FONT>, and loops, and only in simple</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 276460px"><NOBR>relational 
expressions.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 158px; POSITION: absolute; TOP: 276499px"><NOBR>if 
(setjmp(env) == 0)</NOBR></DIV>
<DIV style="LEFT: 191px; POSITION: absolute; TOP: 276515px"><NOBR>/* get here on 
direct call */</NOBR></DIV>
<DIV 
style="LEFT: 158px; POSITION: absolute; TOP: 276532px"><NOBR>else</NOBR></DIV>
<DIV style="LEFT: 191px; POSITION: absolute; TOP: 276548px"><NOBR>/* get here by 
calling longjmp */</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 276586px"><NOBR><I>void 
longjmp(jmp_buf env, int val)</I></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 276606px"><NOBR>longjmp <FONT 
face=Times>restores the state saved by the most recent call to 
</FONT>setjmp<FONT face=Times>, using the information saved 
in</FONT></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 276625px"><NOBR>env<FONT 
face=Times>, and execution resumes as if the </FONT>setjmp <FONT 
face=Times>function had just executed and returned the 
non−zero</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 276644px"><NOBR>value <FONT 
face=Courier>val</FONT>. The function containing the <FONT face=Courier>setjmp 
</FONT>must not have terminated. Accessible objects have</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 276664px"><NOBR>the values 
they had at the time <FONT face=Courier>longjmp </FONT>was called, except that 
non−<FONT face=Courier>volatile </FONT>automatic</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 276684px"><NOBR>variables in 
the function calling <FONT face=Courier>setjmp </FONT>become undefined if they 
were changed after the <FONT face=Courier>setjmp</FONT></NOBR></DIV>
<DIV 
style="LEFT: 162px; POSITION: absolute; TOP: 276704px"><NOBR>call.</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=4><SPAN style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 276745px"><NOBR><B>B.9 
Signals: &lt;signal.h&gt;</B></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 276792px"><NOBR>The header 
<FONT face=Courier>&lt;signal.h&gt; </FONT>provides facilities for handling 
exceptional conditions that arise during execution,</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 276811px"><NOBR>such as an 
interrupt signal from an external source or an error in 
execution.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 276851px"><NOBR>void 
(*signal(int sig, void (*handler)(int)))(int)</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 275833px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 276913px"><NOBR>B.8 Non−local 
Jumps: &lt;setjmp.h&gt;</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 276913px"><NOBR>233</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 276979px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=234><B>Page 234</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 277072px"><NOBR>signal <FONT 
face=Times>determines how subsequent signals will be handled. If </FONT>handler 
<FONT face=Times>is </FONT>SIG_DFL<FONT face=Times>, 
the</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 277091px"><NOBR>implementation−defined 
default behavior is used, if it is <FONT face=Courier>SIG_IGN</FONT>, the signal 
is ignored; otherwise, the</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 277111px"><NOBR>function 
pointed to by <FONT face=Courier>handler </FONT>will be called, with the 
argument of the type of signal. Valid signals 
include</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 233px; POSITION: absolute; TOP: 277153px"><NOBR>SIGFPE</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 327px; POSITION: absolute; TOP: 277153px"><NOBR>arithmetic 
error, e.g., zero divide or overflow</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 233px; POSITION: absolute; TOP: 277180px"><NOBR>SIGILL</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 327px; POSITION: absolute; TOP: 277179px"><NOBR>illegal 
function image, e.g., illegal instruction</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 233px; POSITION: absolute; TOP: 277206px"><NOBR>SIGINT</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 327px; POSITION: absolute; TOP: 277205px"><NOBR>interactive 
attention, e.g., interrupt</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 233px; POSITION: absolute; TOP: 277232px"><NOBR>SIGSEGV</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 327px; POSITION: absolute; TOP: 277231px"><NOBR>illegal 
storage access, e.g., access outside memory 
limits</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 233px; POSITION: absolute; TOP: 277258px"><NOBR>SIGTERM <FONT 
face=Times>termination request sent to this program</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 277289px"><NOBR>signal <FONT 
face=Times>returns the previous value of </FONT>handler <FONT face=Times>for the 
specific signal, or </FONT>SIG_ERR <FONT face=Times>if an error 
occurs.</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 277328px"><NOBR>When a signal 
<FONT face=Courier>sig </FONT>subsequently occurs, the signal is restored to its 
default behavior; then the signal−handler</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 277348px"><NOBR>function is 
called, as if by <FONT face=Courier>(*handler)(sig)</FONT>. If the handler 
returns, execution will resume where it was</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 277367px"><NOBR>when the 
signal occurred.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 277407px"><NOBR>The initial 
state of signals is implementation−defined.</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 277446px"><NOBR>int raise(int 
sig)</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 277484px"><NOBR>raise <FONT 
face=Times>sends the signal </FONT>sig <FONT face=Times>to the program; it 
returns non−zero if unsuccessful.</FONT></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=4><SPAN style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 277524px"><NOBR><B>B.10 Date 
and Time Functions: &lt;time.h&gt;</B></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 277571px"><NOBR>The header 
<FONT face=Courier>&lt;time.h&gt; </FONT>declares types and functions for 
manipulating date and time. Some functions process</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 277591px"><NOBR><I>local 
time</I>, which may differ from calendar time, for <B><SPAN 
class=goohl2>example</SPAN></B> because of time zone. <FONT face=Courier>clock_t 
</FONT>and <FONT face=Courier>time_t</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 277610px"><NOBR>are arithmetic 
types representing times, and <FONT face=Courier>struct tm </FONT>holds the 
components of a calendar time:</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 307px; POSITION: absolute; TOP: 277653px"><NOBR>int 
tm_min;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 443px; POSITION: absolute; TOP: 277652px"><NOBR>minutes after 
the hour (0,59)</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 307px; POSITION: absolute; TOP: 277679px"><NOBR>int tm_hour; 
<FONT face=Times>hours since midnight (0,23)</FONT></NOBR></DIV>
<DIV style="LEFT: 307px; POSITION: absolute; TOP: 277705px"><NOBR>int tm_mday; 
<FONT face=Times>day of the month (1,31)</FONT></NOBR></DIV>
<DIV style="LEFT: 307px; POSITION: absolute; TOP: 277732px"><NOBR>int 
tm_mon;</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 443px; POSITION: absolute; TOP: 277731px"><NOBR>months 
<I>since </I>January (0,11)</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 307px; POSITION: absolute; TOP: 277758px"><NOBR>int tm_year; 
<FONT face=Times>years since 1900</FONT></NOBR></DIV>
<DIV style="LEFT: 307px; POSITION: absolute; TOP: 277784px"><NOBR>int tm_wday; 
<FONT face=Times>days since Sunday (0,6)</FONT></NOBR></DIV>
<DIV style="LEFT: 307px; POSITION: absolute; TOP: 277810px"><NOBR>int tm_yday; 
<FONT face=Times>days since January 1 (0,365)</FONT></NOBR></DIV>
<DIV style="LEFT: 307px; POSITION: absolute; TOP: 277837px"><NOBR>int tm_isdst; 
<FONT face=Times>Daylight Saving Time flag</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 277861px"><NOBR>tm_isdst <FONT 
face=Times>is positive if Daylight Saving Time is in effect, zero if not, and 
negative if the information is not</FONT></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 277880px"><NOBR>available.</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 277920px"><NOBR><I>clock_t 
clock(void)</I></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 277940px"><NOBR>clock <FONT 
face=Times>returns the processor time used by the program since the beginning of 
execution, or </FONT>−1 <FONT 
face=Times>if</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 277959px"><NOBR>unavailable. 
<FONT face=Courier>clock()/CLK_PER_SEC </FONT>is a time in 
seconds.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 277999px"><NOBR><I>time_t 
time(time_t *tp)</I></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 278019px"><NOBR>time <FONT 
face=Times>returns the current calendar time or </FONT>−1 <FONT face=Times>if 
the time is not available. If </FONT>tp <FONT face=Times>is not </FONT>NULL<FONT 
face=Times>, the return</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 278038px"><NOBR>value is also 
assigned to <FONT face=Courier>*tp</FONT>.</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 277021px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 278101px"><NOBR>B.10 Date and 
Time Functions: &lt;time.h&gt;</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 278101px"><NOBR>234</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 278167px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=235><B>Page 235</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 278260px"><NOBR><I>double 
difftime(time_t time2, time_t time1)</I></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 278280px"><NOBR>difftime <FONT 
face=Times>returns </FONT>time2−time1 <FONT face=Times>expressed in 
seconds.</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 278320px"><NOBR><I>time_t 
mktime(struct tm *tp)</I></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 278339px"><NOBR>mktime <FONT 
face=Times>converts the local time in the structure </FONT>*tp <FONT 
face=Times>into calendar time in the same 
representation</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 278358px"><NOBR>used by <FONT 
face=Courier>time</FONT>. The components will have values in the ranges shown. 
<FONT face=Courier>mktime </FONT>returns the calendar</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 278378px"><NOBR>time or <FONT 
face=Courier>−1 </FONT>if it cannot be represented.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 278418px"><NOBR>The next four 
functions return pointers to static objects that may be overwritten by other 
calls.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 278458px"><NOBR><I>char 
*asctime(const struct tm *tp)</I></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 278478px"><NOBR>asctime*tp 
<FONT face=Times>into a string of the 
form</FONT></NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV style="LEFT: 212px; POSITION: absolute; TOP: 278497px"><NOBR>Sun Jan 3 
15:14:13 1988\n\0</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 278534px"><NOBR><I>char 
*ctime(const time_t *tp)</I></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 278554px"><NOBR>ctime <FONT 
face=Times>converts the calendar time </FONT>*tp <FONT face=Times>to local time; 
it is equivalent to</FONT></NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 11px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 212px; POSITION: absolute; TOP: 278573px"><NOBR>asctime(localtime(tp)) 
</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 278610px"><NOBR><I>struct tm 
*gmtime(const time_t *tp)</I></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 278630px"><NOBR>gmtime <FONT 
face=Times>converts the calendar time </FONT>*tp <FONT face=Times>into 
Coordinated Universal Time (UTC). It returns </FONT>NULL <FONT 
face=Times>if</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 278649px"><NOBR>UTC is not 
available. The name <FONT face=Courier>gmtime </FONT>has historical 
significance.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 278689px"><NOBR><I>struct tm 
*localtime(const time_t *tp)</I></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 278709px"><NOBR>localtime 
<FONT face=Times>converts the calendar time </FONT>*tp <FONT face=Times>into 
local time.</FONT></NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 278749px"><NOBR><I>size_t 
strftime(char *s, size_t smax, const char *fmt, const struct tm</I></NOBR></DIV>
<DIV 
style="LEFT: 108px; POSITION: absolute; TOP: 278768px"><NOBR><I>*tp)</I></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 278788px"><NOBR>strftime <FONT 
face=Times>formats date and time information from </FONT>*tp <FONT 
face=Times>into </FONT>s <FONT face=Times>according to </FONT>fmt<FONT 
face=Times>, which is</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 278807px"><NOBR>analogous to a 
<FONT face=Courier>printf </FONT>format. Ordinary characters (including the 
terminating <FONT face=Courier>'\0'</FONT>) are copied 
into</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 278828px"><NOBR>s<FONT 
face=Times>. Each %c is replaced as described below, using values appropriate 
for the local environment. No</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 278847px"><NOBR>more than 
<FONT face=Courier>smax </FONT>characters are placed into <FONT 
face=Courier>s</FONT>. <FONT face=Courier>strftime </FONT>returns the number of 
characters, excluding</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 278866px"><NOBR>the <FONT 
face=Courier>'\0'</FONT>, or zero if more than <FONT face=Courier>smax 
</FONT>characters were produced.</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 333px; POSITION: absolute; TOP: 278909px"><NOBR>%A</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 379px; POSITION: absolute; TOP: 278908px"><NOBR>full weekday 
name.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 333px; POSITION: absolute; TOP: 278935px"><NOBR>%b</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 379px; POSITION: absolute; TOP: 278934px"><NOBR>abbreviated 
month name.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 333px; POSITION: absolute; TOP: 278962px"><NOBR>%B</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 379px; POSITION: absolute; TOP: 278961px"><NOBR>full month 
name.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 333px; POSITION: absolute; TOP: 278988px"><NOBR>%c</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 379px; POSITION: absolute; TOP: 278987px"><NOBR>local date and 
time representation.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 333px; POSITION: absolute; TOP: 279014px"><NOBR>%d</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 379px; POSITION: absolute; TOP: 279013px"><NOBR>day of the 
month (<FONT face=Courier>01−31</FONT>).</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 333px; POSITION: absolute; TOP: 279040px"><NOBR>%H</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 379px; POSITION: absolute; TOP: 279039px"><NOBR>hour (24−hour 
clock) <FONT face=Courier>(00−23)</FONT>.</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 333px; POSITION: absolute; TOP: 279067px"><NOBR>%I</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 379px; POSITION: absolute; TOP: 279066px"><NOBR>hour (12−hour 
clock) <FONT face=Courier>(01−12)</FONT>.</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 333px; POSITION: absolute; TOP: 279093px"><NOBR>%j</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 379px; POSITION: absolute; TOP: 279092px"><NOBR>day of the 
year <FONT face=Courier>(001−366)</FONT>.</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 333px; POSITION: absolute; TOP: 279119px"><NOBR>%m</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 379px; POSITION: absolute; TOP: 279118px"><NOBR>month <FONT 
face=Courier>(01−12)</FONT>.</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 333px; POSITION: absolute; TOP: 279145px"><NOBR>%M</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 379px; POSITION: absolute; TOP: 279144px"><NOBR>minute <FONT 
face=Courier>(00−59)</FONT>.</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 333px; POSITION: absolute; TOP: 279172px"><NOBR>%p</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 379px; POSITION: absolute; TOP: 279171px"><NOBR>local 
equivalent of AM or PM.</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 333px; POSITION: absolute; TOP: 279198px"><NOBR>%S</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 379px; POSITION: absolute; TOP: 279197px"><NOBR>second <FONT 
face=Courier>(00−61)</FONT>.</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 333px; POSITION: absolute; TOP: 279234px"><NOBR>%U</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 379px; POSITION: absolute; TOP: 279223px"><NOBR>week number of 
the year (Sunday</NOBR></DIV>
<DIV style="LEFT: 379px; POSITION: absolute; TOP: 279243px"><NOBR>as 1st day of 
week) <FONT face=Courier>(00−53)</FONT>.</NOBR></DIV>
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 278209px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 279289px"><NOBR>B.10 Date and 
Time Functions: &lt;time.h&gt;</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 279289px"><NOBR>235</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 279355px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=236><B>Page 236</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 333px; POSITION: absolute; TOP: 279450px"><NOBR>%w</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 379px; POSITION: absolute; TOP: 279449px"><NOBR>weekday (<FONT 
face=Courier>0−6</FONT>, Sunday is 0).</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 333px; POSITION: absolute; TOP: 279486px"><NOBR>%W</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 379px; POSITION: absolute; TOP: 279476px"><NOBR>week number of 
the year (Monday</NOBR></DIV>
<DIV style="LEFT: 379px; POSITION: absolute; TOP: 279495px"><NOBR>as 1st day of 
week) <FONT face=Courier>(00−53)</FONT>.</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 333px; POSITION: absolute; TOP: 279523px"><NOBR>%x</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 379px; POSITION: absolute; TOP: 279522px"><NOBR>local date 
representation.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 333px; POSITION: absolute; TOP: 279549px"><NOBR>%X</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 379px; POSITION: absolute; TOP: 279548px"><NOBR>local time 
representation.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 333px; POSITION: absolute; TOP: 279575px"><NOBR>%y</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 379px; POSITION: absolute; TOP: 279574px"><NOBR>year without 
century <FONT face=Courier>(00−99)</FONT>.</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 333px; POSITION: absolute; TOP: 279601px"><NOBR>%Y</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 379px; POSITION: absolute; TOP: 279600px"><NOBR>year with 
century.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 333px; POSITION: absolute; TOP: 279628px"><NOBR>%Z</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 379px; POSITION: absolute; TOP: 279627px"><NOBR>time zone 
name, if any.</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 333px; POSITION: absolute; TOP: 279654px"><NOBR>%% <FONT 
face=Times>%</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times size=4><SPAN 
style="FONT-SIZE: 21px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 279679px"><NOBR><B>B.11 
Implementation−defined Limits: &lt;limits.h&gt; and 
&lt;float.h&gt;</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 279725px"><NOBR>The header 
<FONT face=Courier>&lt;limits.h&gt; </FONT>defines constants for the sizes of 
integral types. The values below are acceptable</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 279745px"><NOBR>minimum 
magnitudes; larger values may be used.</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 297px; POSITION: absolute; TOP: 279798px"><NOBR>CHAR_MAX</NOBR></DIV>
<DIV style="LEFT: 392px; POSITION: absolute; TOP: 279788px"><NOBR>UCHAR_MAX 
<I><FONT face=Times>or</FONT></I></NOBR></DIV>
<DIV 
style="LEFT: 392px; POSITION: absolute; TOP: 279808px"><NOBR>SCHAR_MAX</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 508px; POSITION: absolute; TOP: 279787px"><NOBR>maximum value 
of</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 508px; POSITION: absolute; TOP: 279808px"><NOBR>char</NOBR></DIV>
<DIV 
style="LEFT: 297px; POSITION: absolute; TOP: 279844px"><NOBR>CHAR_MIN</NOBR></DIV>
<DIV style="LEFT: 392px; POSITION: absolute; TOP: 279834px"><NOBR>0 <I><FONT 
face=Times>or</FONT></I></NOBR></DIV>
<DIV 
style="LEFT: 392px; POSITION: absolute; TOP: 279854px"><NOBR>SCHAR_MIN</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 508px; POSITION: absolute; TOP: 279833px"><NOBR>maximum value 
of</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 508px; POSITION: absolute; TOP: 279854px"><NOBR>char</NOBR></DIV>
<DIV 
style="LEFT: 297px; POSITION: absolute; TOP: 279890px"><NOBR>INT_MAX</NOBR></DIV>
<DIV 
style="LEFT: 392px; POSITION: absolute; TOP: 279890px"><NOBR>32767</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 508px; POSITION: absolute; TOP: 279879px"><NOBR>maximum value 
of</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 508px; POSITION: absolute; TOP: 279900px"><NOBR>int</NOBR></DIV>
<DIV 
style="LEFT: 297px; POSITION: absolute; TOP: 279936px"><NOBR>INT_MIN</NOBR></DIV>
<DIV 
style="LEFT: 392px; POSITION: absolute; TOP: 279936px"><NOBR>−32767</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 508px; POSITION: absolute; TOP: 279925px"><NOBR>minimum value 
of</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 508px; POSITION: absolute; TOP: 279946px"><NOBR>int</NOBR></DIV>
<DIV style="LEFT: 297px; POSITION: absolute; TOP: 279982px"><NOBR>LONG_MAX 
2147483647</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 508px; POSITION: absolute; TOP: 279971px"><NOBR>maximum value 
of</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 508px; POSITION: absolute; TOP: 279992px"><NOBR>long</NOBR></DIV>
<DIV style="LEFT: 297px; POSITION: absolute; TOP: 280028px"><NOBR>LONG_MIN 
−2147483647</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 508px; POSITION: absolute; TOP: 280017px"><NOBR>minimum value 
of</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 508px; POSITION: absolute; TOP: 280038px"><NOBR>long</NOBR></DIV>
<DIV style="LEFT: 297px; POSITION: absolute; TOP: 280074px"><NOBR>SCHAR_MAX 
+127</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 508px; POSITION: absolute; TOP: 280063px"><NOBR>maximum value 
of</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 508px; POSITION: absolute; TOP: 280084px"><NOBR>signed 
char</NOBR></DIV>
<DIV style="LEFT: 297px; POSITION: absolute; TOP: 280120px"><NOBR>SCHAR_MIN 
−127</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 508px; POSITION: absolute; TOP: 280109px"><NOBR>minimum value 
of</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 508px; POSITION: absolute; TOP: 280130px"><NOBR>signed 
char</NOBR></DIV>
<DIV style="LEFT: 297px; POSITION: absolute; TOP: 280166px"><NOBR>SHRT_MAX 
+32767</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 508px; POSITION: absolute; TOP: 280155px"><NOBR>maximum value 
of</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 508px; POSITION: absolute; TOP: 280176px"><NOBR>short</NOBR></DIV>
<DIV style="LEFT: 297px; POSITION: absolute; TOP: 280212px"><NOBR>SHRT_MIN 
−32767</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 508px; POSITION: absolute; TOP: 280201px"><NOBR>minimum value 
of</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 508px; POSITION: absolute; TOP: 280222px"><NOBR>short</NOBR></DIV>
<DIV style="LEFT: 297px; POSITION: absolute; TOP: 280258px"><NOBR>UCHAR_MAX 
255</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 508px; POSITION: absolute; TOP: 280247px"><NOBR>maximum value 
of</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 508px; POSITION: absolute; TOP: 280268px"><NOBR>unsigned 
char</NOBR></DIV>
<DIV style="LEFT: 297px; POSITION: absolute; TOP: 280304px"><NOBR>UINT_MAX 
65535</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 508px; POSITION: absolute; TOP: 280293px"><NOBR>maximum value 
of</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 508px; POSITION: absolute; TOP: 280314px"><NOBR>unsigned 
int</NOBR></DIV>
<DIV style="LEFT: 297px; POSITION: absolute; TOP: 280350px"><NOBR>ULONG_MAX 
4294967295</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 508px; POSITION: absolute; TOP: 280339px"><NOBR>maximum value 
of</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 508px; POSITION: absolute; TOP: 280360px"><NOBR>unsigned 
long</NOBR></DIV>
<DIV style="LEFT: 297px; POSITION: absolute; TOP: 280396px"><NOBR>USHRT_MAX 
65535</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 508px; POSITION: absolute; TOP: 280385px"><NOBR>maximum value 
of</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 508px; POSITION: absolute; TOP: 280406px"><NOBR>unsigned 
short</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 279397px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 280477px"><NOBR>B.11 
Implementation−defined Limits: &lt;limits.h&gt; and &lt;float.h&gt;</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 280477px"><NOBR>236</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 280543px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=237><B>Page 237</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 280635px"><NOBR>The names in 
the table below, a subset of <FONT face=Courier>&lt;float.h&gt;</FONT>, are 
constants related to floating−point arithmetic.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 280655px"><NOBR>When a value 
is given, it represents the minimum magnitude for the corresponding quantity. 
Each</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 280675px"><NOBR>implementation 
defines appropriate values.</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 213px; POSITION: absolute; TOP: 280717px"><NOBR>FLT_ROUNDS</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 432px; POSITION: absolute; TOP: 280717px"><NOBR>floating−point 
rounding mode for addition</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 213px; POSITION: absolute; TOP: 280744px"><NOBR>FLT_DIG</NOBR></DIV>
<DIV 
style="LEFT: 357px; POSITION: absolute; TOP: 280744px"><NOBR>6</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 432px; POSITION: absolute; TOP: 280743px"><NOBR>decimal digits 
of precision</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 213px; POSITION: absolute; TOP: 280770px"><NOBR>FLT_EPSILON</NOBR></DIV>
<DIV 
style="LEFT: 357px; POSITION: absolute; TOP: 280770px"><NOBR>1E−5</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 432px; POSITION: absolute; TOP: 280769px"><NOBR>smallest 
number <I>x </I>such that 1.0+x != 1.0</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 213px; POSITION: absolute; TOP: 280796px"><NOBR>FLT_MANT_DIG 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 432px; POSITION: absolute; TOP: 280795px"><NOBR>number of base 
<FONT face=Courier>FLT_RADIX </FONT>in mantissa</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 213px; POSITION: absolute; TOP: 280822px"><NOBR>FLT_MAX</NOBR></DIV>
<DIV style="LEFT: 357px; POSITION: absolute; TOP: 280822px"><NOBR>1E+37 <FONT 
face=Times>maximum floating−point number</FONT></NOBR></DIV>
<DIV 
style="LEFT: 213px; POSITION: absolute; TOP: 280859px"><NOBR>FLT_MAX_EXP</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 432px; POSITION: absolute; TOP: 280848px"><NOBR>maximum <I>n 
</I>such that <FONT 
face=Courier>FLT_RADIX</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 668px; POSITION: absolute; TOP: 280844px"><NOBR>n−1</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 690px; POSITION: absolute; TOP: 280848px"><NOBR>is</NOBR></DIV>
<DIV 
style="LEFT: 432px; POSITION: absolute; TOP: 280868px"><NOBR>representable</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 213px; POSITION: absolute; TOP: 280895px"><NOBR>FLT_MIN</NOBR></DIV>
<DIV 
style="LEFT: 357px; POSITION: absolute; TOP: 280895px"><NOBR>1E−37</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 432px; POSITION: absolute; TOP: 280894px"><NOBR>minimum 
normalized floating−point number</NOBR></DIV></SPAN></FONT><FONT face=Courier 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 213px; POSITION: absolute; TOP: 280931px"><NOBR>FLT_MIN_EXP</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 432px; POSITION: absolute; TOP: 280920px"><NOBR>minimum <I>n 
</I>such that 10</NOBR></DIV></SPAN></FONT><FONT face=Times size=2><SPAN 
style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 593px; POSITION: absolute; TOP: 280916px"><NOBR><I>n</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 602px; POSITION: absolute; TOP: 280920px"><NOBR>is a 
normalized</NOBR></DIV>
<DIV 
style="LEFT: 432px; POSITION: absolute; TOP: 280940px"><NOBR>number</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 213px; POSITION: absolute; TOP: 280967px"><NOBR>DBL_DIG</NOBR></DIV>
<DIV 
style="LEFT: 357px; POSITION: absolute; TOP: 280967px"><NOBR>10</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 432px; POSITION: absolute; TOP: 280966px"><NOBR>decimal digits 
of precision</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 213px; POSITION: absolute; TOP: 280993px"><NOBR>DBL_EPSILON</NOBR></DIV>
<DIV 
style="LEFT: 357px; POSITION: absolute; TOP: 280993px"><NOBR>1E−9</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 432px; POSITION: absolute; TOP: 280992px"><NOBR>smallest 
number <I>x </I>such that 1.0+x != 1.0</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 213px; POSITION: absolute; TOP: 281020px"><NOBR>DBL_MANT_DIG</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 432px; POSITION: absolute; TOP: 281019px"><NOBR>number of base 
<FONT face=Courier>FLT_RADIX </FONT>in mantissa</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 213px; POSITION: absolute; TOP: 281046px"><NOBR>DBL_MAX</NOBR></DIV>
<DIV 
style="LEFT: 357px; POSITION: absolute; TOP: 281046px"><NOBR>1E+37</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 432px; POSITION: absolute; TOP: 281045px"><NOBR>maximum <FONT 
face=Courier>double </FONT>floating−point number</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 213px; POSITION: absolute; TOP: 281082px"><NOBR>DBL_MAX_EXP</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 432px; POSITION: absolute; TOP: 281071px"><NOBR>maximum <I>n 
</I>such that <FONT 
face=Courier>FLT_RADIX</FONT></NOBR></DIV></SPAN></FONT><FONT face=Times 
size=2><SPAN style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 668px; POSITION: absolute; TOP: 281067px"><NOBR>n−1</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 690px; POSITION: absolute; TOP: 281071px"><NOBR>is</NOBR></DIV>
<DIV 
style="LEFT: 432px; POSITION: absolute; TOP: 281091px"><NOBR>representable</NOBR></DIV></SPAN></FONT><FONT 
face=Courier size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 213px; POSITION: absolute; TOP: 281128px"><NOBR>DBL_MIN</NOBR></DIV>
<DIV 
style="LEFT: 357px; POSITION: absolute; TOP: 281128px"><NOBR>1E−37</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 432px; POSITION: absolute; TOP: 281117px"><NOBR>minimum 
normalized <FONT face=Courier>double</FONT></NOBR></DIV>
<DIV style="LEFT: 432px; POSITION: absolute; TOP: 281137px"><NOBR>floating−point 
number</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV 
style="LEFT: 213px; POSITION: absolute; TOP: 281174px"><NOBR>DBL_MIN_EXP</NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 432px; POSITION: absolute; TOP: 281163px"><NOBR>minimum <I>n 
</I>such that 10</NOBR></DIV></SPAN></FONT><FONT face=Times size=2><SPAN 
style="FONT-SIZE: 9px; FONT-FAMILY: Times">
<DIV 
style="LEFT: 593px; POSITION: absolute; TOP: 281159px"><NOBR><I>n</I></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 602px; POSITION: absolute; TOP: 281163px"><NOBR>is a 
normalized</NOBR></DIV>
<DIV 
style="LEFT: 432px; POSITION: absolute; TOP: 281183px"><NOBR>number</NOBR></DIV></SPAN></FONT><FONT 
face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 304px; POSITION: absolute; TOP: 281230px"><NOBR><A 
href="#170">Back 
to Appendix A </A><FONT face=Times color=#000000>−− </FONT><A 
href="#1">Index 
</A><FONT face=Times color=#000000>−− </FONT><A 
href="#238">Appendix 
C</A></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 280585px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 281665px"><NOBR>B.11 
Implementation−defined Limits: &lt;limits.h&gt; and &lt;float.h&gt;</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 281665px"><NOBR>237</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 281731px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=238><B>Page 238</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 366px; POSITION: absolute; TOP: 281846px"><NOBR><A 
href="#221">Back 
to Appendix B </A><FONT face=Times color=#000000>−− </FONT><A 
href="#1">Index</A></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=4><SPAN style="FONT-SIZE: 26px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 281891px"><NOBR><B>Appendix C 
− Summary of Changes</B></NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 281943px"><NOBR>Since the 
publication of the first edition of this book, the definition of the C language 
has undergone changes.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 281962px"><NOBR>Almost all 
were extensions of the original language, and were carefully designed to remain 
compatible with</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 281982px"><NOBR>existing 
practice; some repaired ambiguities in the original description; and some 
represent modifications that</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 282002px"><NOBR>change 
existing practice. Many of the new facilities were announced in the documents 
accompanying</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 282022px"><NOBR>compilers 
available from AT&amp;T, and have subsequently been adopted by other suppliers 
of C compilers.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 282042px"><NOBR>More recently, 
the ANSI committee standardizing the language incorporated most of the changes, 
and also</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 282061px"><NOBR>introduced 
other significant modifications. Their report was in part participated by some 
commercial</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 282081px"><NOBR>compilers even 
before issuance of the formal C standard.</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 282121px"><NOBR>This Appendix 
summarizes the differences between the language defined by the first edition of 
this book, and</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 282141px"><NOBR>that expected 
to be defined by the final standard. It treats only the language itself, not its 
environment and</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 282160px"><NOBR>library; 
although these are an important part of the standard, there is little to compare 
with, because the first</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 282180px"><NOBR>edition did 
not attempt to prescribe an environment or library.</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 282220px"><NOBR>Preprocessing 
is more carefully defined in the Standard than in the first edition, and is 
extended: it is</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 282240px"><NOBR>explicitly 
token based; there are new operators for concatenation of tokens (<FONT 
face=Courier>##</FONT>), and creation of</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 282259px"><NOBR>strings (<FONT 
face=Courier>#</FONT>); there are new control lines like <FONT 
face=Courier>#elif </FONT>and <FONT face=Courier>#pragma</FONT>; redeclaration 
of macros by the</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 282279px"><NOBR>same token 
sequence is explicitly permitted; parameters inside strings are no longer 
replaced. Splicing</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 282299px"><NOBR>of lines by \ 
is permitted everywhere, not just in strings and macro definitions. See <FONT 
face=Times color=#0000ff><A 
href="#207">Par.A.12</A></FONT>.</NOBR></DIV></SPAN></FONT><FONT 
face=Symbol size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 282214px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 282319px"><NOBR>The minimum 
significance of all internal identifiers increased to 31 characters; the 
smallest mandated</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 282339px"><NOBR>significance 
of identifiers with external linkage remains 6 monocase letters. (Many 
implementations</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 282358px"><NOBR>provide 
more.)</NOBR></DIV></SPAN></FONT><FONT face=Symbol size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 282313px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 282378px"><NOBR>Trigraph 
sequences introduced by <FONT face=Courier>?? </FONT>allow representation of 
characters lacking in some character</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 282398px"><NOBR>sets. Escapes 
for <FONT face=Courier>#\^[]{}| </FONT>are defined, see <FONT face=Times 
color=#0000ff><A 
href="#208">Par.A.12.1</A></FONT>. 
Observe that the introduction of trigraphs</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 282418px"><NOBR>may change the 
meaning of strings containing the sequence <FONT 
face=Courier>??</FONT>.</NOBR></DIV></SPAN></FONT><FONT face=Symbol size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 282373px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 282438px"><NOBR>New keywords 
(<FONT face=Courier>void, const, volatile, signed, enum</FONT>) are introduced. 
The stillborn</NOBR></DIV></SPAN></FONT><FONT face=Courier size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Courier">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 282458px"><NOBR>entry <FONT 
face=Times>keyword is withdrawn.</FONT></NOBR></DIV></SPAN></FONT><FONT 
face=Symbol size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 282432px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 282477px"><NOBR>New escape 
sequences, for use within character constants and string literals, are defined. 
The effect of</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 282497px"><NOBR>following \ by 
a character not part of an approved escape sequence is undefined. See <FONT 
face=Times color=#0000ff><A 
href="#172">Par.A.2.5.2</A></FONT><A 
href="#172"></A>.</NOBR></DIV></SPAN></FONT><FONT 
face=Symbol size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 282472px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 282517px"><NOBR>Everyone's 
favorite trivial change: <FONT face=Courier>8 </FONT>and <FONT face=Courier>9 
</FONT>are not octal digits.</NOBR></DIV></SPAN></FONT><FONT face=Symbol 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 282511px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 282537px"><NOBR>The standard 
introduces a larger set of suffixes to make the type of constants explicit: 
<FONT face=Courier>U </FONT>or <FONT face=Courier>L </FONT>for</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 282556px"><NOBR>integers, 
<FONT face=Courier>F </FONT>or <FONT face=Courier>L </FONT>for floating. It also 
refines the rules for the type of unsiffixed constants (<FONT face=Times 
color=#0000ff><A 
href="#171">Par.A.2.5</A></FONT><A 
href="#171"></A>).</NOBR></DIV></SPAN></FONT><FONT 
face=Symbol size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 282531px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 282576px"><NOBR>Adjacent 
string literals are concatenated.</NOBR></DIV></SPAN></FONT><FONT face=Symbol 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 282571px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 282596px"><NOBR>There is a 
notation for wide−character string literals and character constants; see <A 
href="#173"></A><FONT 
face=Times color=#0000ff><A 
href="#173">Par.A.2.6</A></FONT>.</NOBR></DIV></SPAN></FONT><FONT 
face=Symbol size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 282591px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 282616px"><NOBR>Characters as 
well as other types, may be explicitly declared to carry, or not to carry, a 
sign by using</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 282636px"><NOBR>the keywords 
<FONT face=Courier>signed </FONT>or <FONT face=Courier>unsigned</FONT>. The 
locution <FONT face=Courier>long float </FONT>as a synonym for <FONT 
face=Courier>double </FONT>is</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 282655px"><NOBR>withdrawn, but 
<FONT face=Courier>long double </FONT>may be used to declare an extra−precision 
floating quantity.</NOBR></DIV></SPAN></FONT><FONT face=Symbol size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 282610px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 282675px"><NOBR>For some time, 
type <FONT face=Courier>unsigned char </FONT>has been available. The standard 
introduces the <FONT face=Courier>signed</FONT></NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 282695px"><NOBR>keyword to 
make signedness explicit for <FONT face=Courier>char </FONT>and other integral 
objects.</NOBR></DIV></SPAN></FONT><FONT face=Symbol size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 282670px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 282715px"><NOBR>The <FONT 
face=Courier>void </FONT>type has been available in most implementations for 
some years. The Standard introduces</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 282735px"><NOBR>the use of the 
<FONT face=Courier>void * </FONT>type as a generic pointer type; previously 
<FONT face=Courier>char * </FONT>played this role. At the</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 282754px"><NOBR>same time, 
explicit rules are enacted against mixing pointers and integers, and pointers of 
different</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 282774px"><NOBR>type, without 
the use of casts.</NOBR></DIV></SPAN></FONT><FONT face=Symbol size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 282709px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 282794px"><NOBR>The Standard 
places explicit minima on the ranges of the arithmetic types, and mandates 
headers</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 282814px"><NOBR>(<FONT 
face=Courier>&lt;limits.h&gt; </FONT>and <FONT 
face=Courier>&lt;float.h&gt;</FONT>) giving the characteristics of each 
particular implementation.</NOBR></DIV></SPAN></FONT><FONT face=Symbol 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 282789px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 281773px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 282853px"><NOBR>Appendix C − 
Summary of Changes</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 282853px"><NOBR>238</NOBR></DIV></SPAN></FONT>
<DIV style="LEFT: 0px; POSITION: absolute; TOP: 282919px">
<HR>

<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD align=right bgColor=#eeeeee><FONT face=arial,sans-serif><A 
      name=239><B>Page 239</B></A></FONT></TD></TR></TBODY></TABLE></DIV><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 283011px"><NOBR>Enumerations 
are new since the first edition of this book.</NOBR></DIV></SPAN></FONT><FONT 
face=Symbol size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 283006px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 283031px"><NOBR>The Standard 
adopts from C++ the notion of type qualifier, for <B><SPAN 
class=goohl2>example</SPAN></B> <FONT face=Courier>const </FONT>(<A 
href="#189"></A><FONT 
face=Times color=#0000ff><A 
href="#189">Par.A.8.2</A></FONT>).</NOBR></DIV></SPAN></FONT><FONT 
face=Symbol size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 283026px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 283051px"><NOBR>Strings are no 
longer modifiable, and so may be placed in read−only 
memory.</NOBR></DIV></SPAN></FONT><FONT face=Symbol size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 283045px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 283071px"><NOBR>The ``usual 
arithmetic conversions'' are changed, essentially from ``for integers, <FONT 
face=Courier>unsigned </FONT>always</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 283090px"><NOBR>wins; for 
floating point, always use <FONT face=Courier>double</FONT>'' to ``promote to 
the smallest capacious−enough type.''</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 283110px"><NOBR>See <FONT 
face=Times color=#0000ff><A 
href="#176">Par.A.6.5</A></FONT><A 
href="#176"></A>.</NOBR></DIV></SPAN></FONT><FONT 
face=Symbol size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 283065px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 283130px"><NOBR>The old 
assignment operators like <FONT face=Courier>=+ </FONT>are truly gone. Also, 
assignment operators are now single</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 283150px"><NOBR>tokens; in the 
first edition, they were pairs, and could be separated by white 
space.</NOBR></DIV></SPAN></FONT><FONT face=Symbol size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 283125px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 283170px"><NOBR>A compiler's 
license to treat mathematically associative operators as computationally 
associative is</NOBR></DIV>
<DIV 
style="LEFT: 162px; POSITION: absolute; TOP: 283189px"><NOBR>revoked.</NOBR></DIV></SPAN></FONT><FONT 
face=Symbol size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 283164px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 283209px"><NOBR>A unary <FONT 
face=Courier>+ </FONT>operator is introduced for symmetry with unary <FONT 
face=Courier>−</FONT>.</NOBR></DIV></SPAN></FONT><FONT face=Symbol size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 283204px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 283229px"><NOBR>A pointer to a 
function may be used as a function designator without an explicit <FONT 
face=Courier>* </FONT>operator. See</NOBR></DIV></SPAN></FONT><FONT face=Times 
color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 283249px"><NOBR><A 
href="#179">Par.A.7.3.2</A><FONT 
face=Times color=#000000>.</FONT></NOBR></DIV></SPAN></FONT><FONT face=Symbol 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 283224px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 283269px"><NOBR>Structures may 
be assigned, passed to functions, and returned by 
functions.</NOBR></DIV></SPAN></FONT><FONT face=Symbol size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 283263px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 283288px"><NOBR>Applying the 
address−of operator to arrays is permitted, and the result is a pointer to the 
array.</NOBR></DIV></SPAN></FONT><FONT face=Symbol size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 283283px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 283308px"><NOBR>The <FONT 
face=Courier>sizeof </FONT>operator, in the first edition, yielded type <FONT 
face=Courier>int</FONT>; subsequently, many implementations</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 283328px"><NOBR>made it <FONT 
face=Courier>unsigned</FONT>. The Standard makes its type explicitly 
implementation−dependent, but requires</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 283348px"><NOBR>the type, 
<FONT face=Courier>size_t</FONT>, to be defined in a standard header (<FONT 
face=Courier>&lt;stddef.h&gt;</FONT>). A similar change occurs in 
the</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 283368px"><NOBR>type (<FONT 
face=Courier>ptrdiff_t</FONT>) of the difference between pointers. See <A 
href="#182"></A><FONT 
face=Times color=#0000ff><A 
href="#182">Par.A.7.4.8 
</A></FONT>and <A 
href="#183"></A><FONT 
face=Times color=#0000ff><A 
href="#183">Par.A.7.7</A></FONT>.</NOBR></DIV></SPAN></FONT><FONT 
face=Symbol size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 283303px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 283387px"><NOBR>The address−of 
operator <FONT face=Courier>&amp; </FONT>may not be applied to an object 
declared <FONT face=Courier>register</FONT>, even if the</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 283407px"><NOBR>implementation 
chooses not to keep the object in a register.</NOBR></DIV></SPAN></FONT><FONT 
face=Symbol size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 283382px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 283427px"><NOBR>The type of a 
shift expression is that of the left operand; the right operand can't promote 
the result.</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 283447px"><NOBR>See <FONT 
face=Times color=#0000ff><A 
href="#184">Par.A.7.8</A></FONT><A 
href="#184"></A>.</NOBR></DIV></SPAN></FONT><FONT 
face=Symbol size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 283422px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 283467px"><NOBR>The Standard 
legalizes the creation of a pointer just beyond the end of an array, and allows 
arithmetic</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 283486px"><NOBR>and relations 
on it; see <FONT face=Times color=#0000ff><A 
href="#183">Par.A.7.7</A></FONT>.</NOBR></DIV></SPAN></FONT><FONT 
face=Symbol size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 283461px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 283506px"><NOBR>The Standard 
introduces (borrowing from C++) the notion of a function prototype declaration 
that</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 283526px"><NOBR>incorporates 
the types of the parameters, and includes an explicit recognition of variadic 
functions</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 283546px"><NOBR>together with 
an approved way of dealing with them. See Pars. <A 
href="#179"></A><FONT 
face=Times color=#0000ff><A 
href="#179">A.7.3.2</A></FONT>, 
<FONT face=Times color=#0000ff><A 
href="#196">A.8.6.3</A></FONT><A 
href="#196"></A>, 
<FONT face=Times color=#0000ff><A 
href="#232">B.7</A></FONT>. 
The older style</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 283566px"><NOBR>is still 
accepted, with restrictions.</NOBR></DIV></SPAN></FONT><FONT face=Symbol 
size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 283501px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 283585px"><NOBR>Empty 
declarations, which have no declarators and don't declare at least a structure, 
union, or</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 283605px"><NOBR>enumeration, 
are forbidden by the Standard. On the other hand, a declaration with just a 
structure or</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 283625px"><NOBR>union tag 
redeclares that tag even if it was declared in an outer 
scope.</NOBR></DIV></SPAN></FONT><FONT face=Symbol size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 283580px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 283645px"><NOBR>External data 
declarations without any specifiers or qualifiers (just a naked declarator) are 
forbidden.</NOBR></DIV></SPAN></FONT><FONT face=Symbol size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 283639px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 283665px"><NOBR>Some 
implementations, when presented with an <FONT face=Courier>extern 
</FONT>declaration in an inner block, would export</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 283684px"><NOBR>the 
declaration to the rest of the file. The Standard makes it clear that the scope 
of such a declaration</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 283704px"><NOBR>is just the 
block.</NOBR></DIV></SPAN></FONT><FONT face=Symbol size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 283659px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 283724px"><NOBR>The scope of 
parameters is injected into a function's compound statement, so that 
variable</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 283744px"><NOBR>declarations 
at the top level of the function cannot hide the 
parameters.</NOBR></DIV></SPAN></FONT><FONT face=Symbol size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 283719px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 283764px"><NOBR>The name 
spaces of identifiers are somewhat different. The Standard puts all tags in a 
single name</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 283783px"><NOBR>space, and 
also introduces a separate name space for labels; see <A 
href="#207"></A><FONT 
face=Times color=#0000ff><A 
href="#207">Par.A.11.1</A></FONT><A 
href="#207"></A>. 
Also, member names are</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 283803px"><NOBR>associated 
with the structure or union of which they are a part. (This has been common 
practice from</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 283823px"><NOBR>some 
time.)</NOBR></DIV></SPAN></FONT><FONT face=Symbol size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 283758px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 283843px"><NOBR>Unions may be 
initialized; the initializer refers to the first 
member.</NOBR></DIV></SPAN></FONT><FONT face=Symbol size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 283837px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 283863px"><NOBR>Automatic 
structures, unions, and arrays may be initialized, albeit in a restricted 
way.</NOBR></DIV></SPAN></FONT><FONT face=Symbol size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 283857px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 283882px"><NOBR>Character 
arrays with an explicit size may be initialized by a string literal with exactly 
that many</NOBR></DIV>
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 283902px"><NOBR>characters 
(the <FONT face=Courier>\0 </FONT>is quietly squeezed 
out).</NOBR></DIV></SPAN></FONT><FONT face=Symbol size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 283877px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 162px; POSITION: absolute; TOP: 283922px"><NOBR>The 
controlling expression, and the case labels, of a switch may have any integral 
type.</NOBR></DIV></SPAN></FONT><FONT face=Symbol size=3><SPAN 
style="FONT-SIZE: 14px; FONT-FAMILY: Symbol">
<DIV style="LEFT: 150px; POSITION: absolute; TOP: 283917px"><NOBR>• 
</NOBR></DIV></SPAN></FONT><FONT face=Times color=#0000ff size=3><SPAN 
style="FONT-SIZE: 14px; COLOR: #0000ff; FONT-FAMILY: Times">
<DIV style="LEFT: 366px; POSITION: absolute; TOP: 283965px"><NOBR><A 
href="#221">Back 
to Appendix B </A><FONT face=Times color=#000000>−− </FONT><A 
href="#1">Index</A></NOBR></DIV></SPAN></FONT><FONT 
face=Times size=3><SPAN style="FONT-SIZE: 14px; FONT-FAMILY: Times">
<DIV style="LEFT: 361px; POSITION: absolute; TOP: 282961px"><NOBR>The C 
programming Language</NOBR></DIV>
<DIV style="LEFT: 108px; POSITION: absolute; TOP: 284041px"><NOBR>Appendix C − 
Summary of Changes</NOBR></DIV>
<DIV 
style="LEFT: 811px; POSITION: absolute; TOP: 284041px"><NOBR>239</NOBR></DIV></SPAN></FONT></BODY></HTML>
